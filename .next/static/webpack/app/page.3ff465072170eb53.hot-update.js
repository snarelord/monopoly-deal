"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/game-board.tsx":
/*!***********************************!*\
  !*** ./components/game-board.tsx ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GameBoard)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_player_area__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/player-area */ \"(app-pages-browser)/./components/player-area.tsx\");\n/* harmony import */ var _components_card_deck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/card-deck */ \"(app-pages-browser)/./components/card-deck.tsx\");\n/* harmony import */ var _components_action_area__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/action-area */ \"(app-pages-browser)/./components/action-area.tsx\");\n/* harmony import */ var _components_action_modal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/action-modal */ \"(app-pages-browser)/./components/action-modal.tsx\");\n/* harmony import */ var _components_property_selection_modal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/property-selection-modal */ \"(app-pages-browser)/./components/property-selection-modal.tsx\");\n/* harmony import */ var _lib_game_logic__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/lib/game-logic */ \"(app-pages-browser)/./lib/game-logic.ts\");\n/* harmony import */ var _components_game_controls__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/components/game-controls */ \"(app-pages-browser)/./components/game-controls.tsx\");\n/* harmony import */ var _components_game_info__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/components/game-info */ \"(app-pages-browser)/./components/game-info.tsx\");\n/* harmony import */ var _components_discard_modal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/components/discard-modal */ \"(app-pages-browser)/./components/discard-modal.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\nfunction GameBoard() {\n    _s();\n    const [gameState, setGameState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [showDiscardModal, setShowDiscardModal] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [actionCardInProgress, setActionCardInProgress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [showPropertySelectionModal, setShowPropertySelectionModal] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [propertySelectionType, setPropertySelectionType] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [targetPlayerForPropertySelection, setTargetPlayerForPropertySelection] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Add state for forced deal and sly deal\n    const [forcedDealTargetCard, setForcedDealTargetCard] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Initialize game\n    const startGame = (numPlayers)=>{\n        const { initializedPlayers, initializedDeck } = (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.initializeGame)(numPlayers);\n        setGameState({\n            players: initializedPlayers,\n            deck: initializedDeck,\n            currentPlayerIndex: 0,\n            cardsPlayed: 0,\n            isGameOver: false,\n            winner: null,\n            actionInProgress: null,\n            hasDrawnCards: false,\n            actionCards: [],\n            message: \"Game started! Draw cards to begin your turn.\"\n        });\n    };\n    // Handle drawing cards at the start of a turn\n    const handleDrawCards = ()=>{\n        if (!gameState || gameState.hasDrawnCards) return;\n        const { updatedPlayer, updatedDeck } = (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.drawCards)(gameState.players[gameState.currentPlayerIndex], gameState.deck);\n        const updatedPlayers = [\n            ...gameState.players\n        ];\n        updatedPlayers[gameState.currentPlayerIndex] = updatedPlayer;\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            deck: updatedDeck,\n            hasDrawnCards: true,\n            message: \"Cards drawn. Play up to 3 cards.\"\n        });\n    };\n    // Handle playing a card\n    const handlePlayCard = (cardIndex, targetArea, targetPlayer)=>{\n        if (!gameState || gameState.cardsPlayed >= 3 || !gameState.hasDrawnCards) return;\n        const player = gameState.players[gameState.currentPlayerIndex];\n        const card = player.hand[cardIndex];\n        // Validate card placement\n        if (!(0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.isValidCardPlacement)(card, targetArea)) {\n            alert(\"Invalid card placement. Check the rules for where this card can be played.\");\n            return;\n        }\n        const updatedPlayers = [\n            ...gameState.players\n        ];\n        const updatedPlayer = {\n            ...updatedPlayers[gameState.currentPlayerIndex]\n        };\n        // Remove card from hand\n        updatedPlayer.hand = [\n            ...updatedPlayer.hand\n        ];\n        updatedPlayer.hand.splice(cardIndex, 1);\n        // Add card to appropriate area\n        if (targetArea === \"bank\") {\n            updatedPlayer.bank = [\n                ...updatedPlayer.bank,\n                card\n            ];\n        } else if (targetArea.startsWith(\"property-\")) {\n            // Handle property placement logic\n            const setIndex = Number.parseInt(targetArea.split(\"-\")[1]);\n            // Check if this is an existing property set\n            if (setIndex < updatedPlayer.properties.length) {\n                // Add to existing property set\n                updatedPlayer.properties = [\n                    ...updatedPlayer.properties\n                ];\n                const updatedSet = {\n                    ...updatedPlayer.properties[setIndex],\n                    cards: [\n                        ...updatedPlayer.properties[setIndex].cards,\n                        card\n                    ]\n                };\n                // Check if set is now complete\n                updatedSet.isComplete = updatedSet.cards.length >= updatedSet.requiredCards;\n                updatedPlayer.properties[setIndex] = updatedSet;\n            } else {\n                // Create new property set (only for regular properties, not \"Any Color\" wildcards)\n                const isAnyColorWildcard = card.type === \"wildcard\" && card.name.toLowerCase().includes(\"any color\");\n                if (!isAnyColorWildcard) {\n                    updatedPlayer.properties = [\n                        ...updatedPlayer.properties,\n                        {\n                            color: card.color || \"\",\n                            cards: [\n                                card\n                            ],\n                            isComplete: false,\n                            houses: 0,\n                            hotels: 0,\n                            requiredCards: (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.getRequiredCardsForColor)(card.color || \"\")\n                        }\n                    ];\n                } else {\n                    // Any Color wildcards can't create their own sets\n                    alert(\"Any Color wildcards must be added to an existing property set.\");\n                    return;\n                }\n            }\n        } else if (targetArea === \"action\") {\n            // This is now handled by handlePlayActionCard\n            return;\n        }\n        updatedPlayers[gameState.currentPlayerIndex] = updatedPlayer;\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            cardsPlayed: gameState.cardsPlayed + 1,\n            message: \"Card played (\".concat(gameState.cardsPlayed + 1, \"/3)\")\n        });\n    };\n    // Handle playing an action card\n    const handlePlayActionCard = (cardIndex)=>{\n        if (!gameState || gameState.cardsPlayed >= 3 || !gameState.hasDrawnCards) return;\n        const player = gameState.players[gameState.currentPlayerIndex];\n        const card = player.hand[cardIndex];\n        if (card.type !== \"action\") {\n            alert(\"This is not an action card.\");\n            return;\n        }\n        // Set the action card in progress\n        setActionCardInProgress({\n            card,\n            index: cardIndex\n        });\n    };\n    // Handle completing an action card\n    const handleActionCardComplete = (targetPlayerIndex, amount)=>{\n        if (!gameState || !actionCardInProgress) return;\n        const currentPlayerIndex = gameState.currentPlayerIndex;\n        const card = actionCardInProgress.card;\n        const cardIndex = actionCardInProgress.index;\n        const updatedPlayers = [\n            ...gameState.players\n        ];\n        const updatedPlayer = {\n            ...updatedPlayers[currentPlayerIndex]\n        };\n        // Remove card from hand\n        updatedPlayer.hand = [\n            ...updatedPlayer.hand\n        ];\n        updatedPlayer.hand.splice(cardIndex, 1);\n        // Add card to action area\n        const updatedActionCards = [\n            ...gameState.actionCards,\n            card\n        ];\n        // Process the action based on the card type\n        let message = \"Played \".concat(card.name);\n        switch(card.actionType){\n            case \"debt-collector\":\n                if (targetPlayerIndex !== undefined) {\n                    const targetPlayer = {\n                        ...updatedPlayers[targetPlayerIndex]\n                    };\n                    const amountToPay = Math.min(5, calculateBankTotal(targetPlayer.bank));\n                    if (amountToPay > 0) {\n                        // Find cards to pay with (simple implementation - just take the first cards that add up to the amount)\n                        const cardsToPay = [];\n                        let totalPaid = 0;\n                        // Sort bank cards by value (ascending) to optimize payment\n                        const sortedBank = [\n                            ...targetPlayer.bank\n                        ].sort((a, b)=>a.value - b.value);\n                        for (const bankCard of sortedBank){\n                            if (totalPaid < amountToPay) {\n                                cardsToPay.push(bankCard);\n                                totalPaid += bankCard.value;\n                                if (totalPaid >= amountToPay) {\n                                    break;\n                                }\n                            }\n                        }\n                        // Remove cards from target player's bank\n                        targetPlayer.bank = targetPlayer.bank.filter((card)=>!cardsToPay.some((payCard)=>payCard.id === card.id));\n                        // Add cards to current player's bank\n                        updatedPlayer.bank = [\n                            ...updatedPlayer.bank,\n                            ...cardsToPay\n                        ];\n                        updatedPlayers[targetPlayerIndex] = targetPlayer;\n                        message = \"Collected $\".concat(totalPaid, \"M from Player \").concat(targetPlayerIndex + 1);\n                    } else {\n                        message = \"Player \".concat(targetPlayerIndex + 1, \" has no money to pay\");\n                    }\n                }\n                break;\n            case \"birthday\":\n                let totalCollected = 0;\n                // Collect 2M from each player\n                updatedPlayers.forEach((player, index)=>{\n                    if (index !== currentPlayerIndex) {\n                        const playerToUpdate = {\n                            ...player\n                        };\n                        const amountToPay = Math.min(2, calculateBankTotal(playerToUpdate.bank));\n                        if (amountToPay > 0) {\n                            // Find cards to pay with\n                            const cardsToPay = [];\n                            let totalPaid = 0;\n                            // Sort bank cards by value (ascending) to optimize payment\n                            const sortedBank = [\n                                ...playerToUpdate.bank\n                            ].sort((a, b)=>a.value - b.value);\n                            for (const bankCard of sortedBank){\n                                if (totalPaid < amountToPay) {\n                                    cardsToPay.push(bankCard);\n                                    totalPaid += bankCard.value;\n                                    if (totalPaid >= amountToPay) {\n                                        break;\n                                    }\n                                }\n                            }\n                            // Remove cards from player's bank\n                            playerToUpdate.bank = playerToUpdate.bank.filter((card)=>!cardsToPay.some((payCard)=>payCard.id === card.id));\n                            // Add cards to current player's bank\n                            updatedPlayer.bank = [\n                                ...updatedPlayer.bank,\n                                ...cardsToPay\n                            ];\n                            updatedPlayers[index] = playerToUpdate;\n                            totalCollected += totalPaid;\n                        }\n                    }\n                });\n                message = \"Collected $\".concat(totalCollected, \"M for your birthday\");\n                break;\n            case \"pass-go\":\n                // Draw 2 more cards\n                const { updatedPlayer: playerWithExtraCards, updatedDeck } = (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.drawCards)(updatedPlayer, gameState.deck, 2);\n                updatedPlayer.hand = playerWithExtraCards.hand;\n                message = \"Drew 2 more cards\";\n                setGameState({\n                    ...gameState,\n                    players: updatedPlayers,\n                    deck: updatedDeck,\n                    cardsPlayed: gameState.cardsPlayed + 1,\n                    actionCards: updatedActionCards,\n                    message\n                });\n                break;\n            case \"rent\":\n                if (targetPlayerIndex !== undefined) {\n                    // Calculate rent based on properties of the specified colors\n                    const rentColors = [];\n                    if (card.color) rentColors.push(card.color);\n                    if (card.secondaryColor) rentColors.push(card.secondaryColor);\n                    // Find property sets of the specified colors\n                    const relevantSets = updatedPlayer.properties.filter((set)=>rentColors.includes(set.color));\n                    // Calculate rent amount\n                    let rentAmount = 0;\n                    relevantSets.forEach((set)=>{\n                        rentAmount += (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.calculateRentAmount)(set);\n                    });\n                    if (rentAmount > 0) {\n                        const targetPlayer = {\n                            ...updatedPlayers[targetPlayerIndex]\n                        };\n                        const amountToPay = Math.min(rentAmount, calculateBankTotal(targetPlayer.bank));\n                        if (amountToPay > 0) {\n                            // Find cards to pay with\n                            const cardsToPay = [];\n                            let totalPaid = 0;\n                            // Sort bank cards by value (ascending) to optimize payment\n                            const sortedBank = [\n                                ...targetPlayer.bank\n                            ].sort((a, b)=>a.value - b.value);\n                            for (const bankCard of sortedBank){\n                                if (totalPaid < amountToPay) {\n                                    cardsToPay.push(bankCard);\n                                    totalPaid += bankCard.value;\n                                    if (totalPaid >= amountToPay) {\n                                        break;\n                                    }\n                                }\n                            }\n                            // Remove cards from target player's bank\n                            targetPlayer.bank = targetPlayer.bank.filter((card)=>!cardsToPay.some((payCard)=>payCard.id === card.id));\n                            // Add cards to current player's bank\n                            updatedPlayer.bank = [\n                                ...updatedPlayer.bank,\n                                ...cardsToPay\n                            ];\n                            updatedPlayers[targetPlayerIndex] = targetPlayer;\n                            message = \"Collected $\".concat(totalPaid, \"M rent from Player \").concat(targetPlayerIndex + 1);\n                        } else {\n                            message = \"Player \".concat(targetPlayerIndex + 1, \" has no money to pay rent\");\n                        }\n                    } else {\n                        message = \"No properties of the specified colors to collect rent for\";\n                    }\n                }\n                break;\n            case \"deal-breaker\":\n                if (targetPlayerIndex !== undefined) {\n                    // Show property selection modal for complete sets\n                    setPropertySelectionType(\"deal-breaker\");\n                    setTargetPlayerForPropertySelection(targetPlayerIndex);\n                    setShowPropertySelectionModal(true);\n                    // The rest of the logic will be handled when the property is selected\n                    setActionCardInProgress(null);\n                    return;\n                }\n                break;\n            case \"sly-deal\":\n                if (targetPlayerIndex !== undefined) {\n                    // Show property selection modal for incomplete sets\n                    setPropertySelectionType(\"sly-deal\");\n                    setTargetPlayerForPropertySelection(targetPlayerIndex);\n                    setShowPropertySelectionModal(true);\n                    // The rest of the logic will be handled when the property is selected\n                    setActionCardInProgress(null);\n                    return;\n                }\n                break;\n            case \"forced-deal\":\n                if (targetPlayerIndex !== undefined) {\n                    // Show property selection modal for incomplete sets\n                    setPropertySelectionType(\"forced-deal\");\n                    setTargetPlayerForPropertySelection(targetPlayerIndex);\n                    setShowPropertySelectionModal(true);\n                    // The rest of the logic will be handled when the property is selected\n                    setActionCardInProgress(null);\n                    return;\n                }\n                break;\n        }\n        updatedPlayers[currentPlayerIndex] = updatedPlayer;\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            cardsPlayed: gameState.cardsPlayed + 1,\n            actionCards: updatedActionCards,\n            message\n        });\n        setActionCardInProgress(null);\n    };\n    // Handle property selection for action cards\n    const handlePropertySelection = (setIndex, cardIndex)=>{\n        if (!gameState || !targetPlayerForPropertySelection) return;\n        const currentPlayerIndex = gameState.currentPlayerIndex;\n        const targetPlayerIndex = targetPlayerForPropertySelection;\n        const updatedPlayers = [\n            ...gameState.players\n        ];\n        const currentPlayer = {\n            ...updatedPlayers[currentPlayerIndex]\n        };\n        const targetPlayer = {\n            ...updatedPlayers[targetPlayerIndex]\n        };\n        let message = \"\";\n        switch(propertySelectionType){\n            case \"deal-breaker\":\n                // Steal a complete property set\n                if (setIndex < targetPlayer.properties.length) {\n                    const stolenSet = {\n                        ...targetPlayer.properties[setIndex]\n                    };\n                    // Remove the set from target player\n                    targetPlayer.properties = targetPlayer.properties.filter((_, i)=>i !== setIndex);\n                    // Add the set to current player\n                    currentPlayer.properties = [\n                        ...currentPlayer.properties,\n                        stolenSet\n                    ];\n                    message = \"Stole \".concat(stolenSet.color, \" property set from Player \").concat(targetPlayerIndex + 1);\n                }\n                break;\n            case \"sly-deal\":\n                // Steal a single property card\n                if (setIndex < targetPlayer.properties.length && cardIndex < targetPlayer.properties[setIndex].cards.length) {\n                    const stolenCard = targetPlayer.properties[setIndex].cards[cardIndex];\n                    // Remove the card from target player's set\n                    const updatedTargetProperties = [\n                        ...targetPlayer.properties\n                    ];\n                    const updatedSet = {\n                        ...updatedTargetProperties[setIndex]\n                    };\n                    updatedSet.cards = updatedSet.cards.filter((_, i)=>i !== cardIndex);\n                    // If the set is now empty, remove it\n                    if (updatedSet.cards.length === 0) {\n                        updatedTargetProperties.splice(setIndex, 1);\n                    } else {\n                        // Update the set's completion status\n                        updatedSet.isComplete = updatedSet.cards.length >= updatedSet.requiredCards;\n                        updatedTargetProperties[setIndex] = updatedSet;\n                    }\n                    targetPlayer.properties = updatedTargetProperties;\n                    // Add the card to current player's properties\n                    const existingSetIndex = currentPlayer.properties.findIndex((set)=>set.color === stolenCard.color);\n                    if (existingSetIndex >= 0) {\n                        // Add to existing set\n                        const updatedCurrentProperties = [\n                            ...currentPlayer.properties\n                        ];\n                        const updatedCurrentSet = {\n                            ...updatedCurrentProperties[existingSetIndex]\n                        };\n                        updatedCurrentSet.cards = [\n                            ...updatedCurrentSet.cards,\n                            stolenCard\n                        ];\n                        updatedCurrentSet.isComplete = updatedCurrentSet.cards.length >= updatedCurrentSet.requiredCards;\n                        updatedCurrentProperties[existingSetIndex] = updatedCurrentSet;\n                        currentPlayer.properties = updatedCurrentProperties;\n                    } else {\n                        // Create new set\n                        currentPlayer.properties = [\n                            ...currentPlayer.properties,\n                            {\n                                color: stolenCard.color || \"\",\n                                cards: [\n                                    stolenCard\n                                ],\n                                isComplete: false,\n                                houses: 0,\n                                hotels: 0,\n                                requiredCards: (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.getRequiredCardsForColor)(stolenCard.color || \"\")\n                            }\n                        ];\n                    }\n                    message = \"Stole \".concat(stolenCard.name, \" from Player \").concat(targetPlayerIndex + 1);\n                }\n                break;\n            case \"forced-deal\":\n                // First step: Select the target player's property\n                if (setIndex < targetPlayer.properties.length && cardIndex < targetPlayer.properties[setIndex].cards.length) {\n                    const targetCard = targetPlayer.properties[setIndex].cards[cardIndex];\n                    // Store the selected card info\n                    setForcedDealTargetCard({\n                        playerIndex: targetPlayerIndex,\n                        setIndex,\n                        cardIndex,\n                        card: targetCard\n                    });\n                    // Show a message to select your own property\n                    setGameState({\n                        ...gameState,\n                        message: \"Selected \".concat(targetCard.name, \". Now select one of your properties to swap.\")\n                    });\n                    // Close the current modal\n                    setShowPropertySelectionModal(false);\n                    // Open a new modal to select your own property\n                    setTimeout(()=>{\n                        setPropertySelectionType(\"forced-deal-own\");\n                        setShowPropertySelectionModal(true);\n                    }, 100);\n                    return; // Exit the function early\n                }\n                break;\n            case \"forced-deal-own\":\n                // Second step: Select your own property to swap\n                if (forcedDealTargetCard !== null && setIndex < currentPlayer.properties.length && cardIndex < currentPlayer.properties[setIndex].cards.length) {\n                    const ownCard = currentPlayer.properties[setIndex].cards[cardIndex];\n                    const targetPlayerIndex = forcedDealTargetCard.playerIndex;\n                    const targetPlayer = {\n                        ...updatedPlayers[targetPlayerIndex]\n                    };\n                    // Remove the card from target player's set\n                    const updatedTargetProperties = [\n                        ...targetPlayer.properties\n                    ];\n                    const targetSetIndex = forcedDealTargetCard.setIndex;\n                    const targetCardIndex = forcedDealTargetCard.cardIndex;\n                    const updatedTargetSet = {\n                        ...updatedTargetProperties[targetSetIndex]\n                    };\n                    updatedTargetSet.cards = [\n                        ...updatedTargetSet.cards\n                    ];\n                    const targetCard = updatedTargetSet.cards[targetCardIndex];\n                    updatedTargetSet.cards.splice(targetCardIndex, 1);\n                    // Remove the card from current player's set\n                    const updatedCurrentProperties = [\n                        ...currentPlayer.properties\n                    ];\n                    const updatedCurrentSet = {\n                        ...updatedCurrentProperties[setIndex]\n                    };\n                    updatedCurrentSet.cards = [\n                        ...updatedCurrentSet.cards\n                    ];\n                    updatedCurrentSet.cards.splice(cardIndex, 1);\n                    // Add current player's card to target player's set\n                    if (updatedTargetSet.cards.length === 0) {\n                        // If set is empty, replace it with a new set\n                        updatedTargetProperties[targetSetIndex] = {\n                            color: ownCard.color || \"\",\n                            cards: [\n                                ownCard\n                            ],\n                            isComplete: false,\n                            houses: 0,\n                            hotels: 0,\n                            requiredCards: (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.getRequiredCardsForColor)(ownCard.color || \"\")\n                        };\n                    } else {\n                        // Add to existing set if colors match\n                        if (ownCard.color === updatedTargetSet.color) {\n                            updatedTargetSet.cards.push(ownCard);\n                            updatedTargetSet.isComplete = updatedTargetSet.cards.length >= updatedTargetSet.requiredCards;\n                            updatedTargetProperties[targetSetIndex] = updatedTargetSet;\n                        } else {\n                            // Create a new set if colors don't match\n                            updatedTargetProperties.push({\n                                color: ownCard.color || \"\",\n                                cards: [\n                                    ownCard\n                                ],\n                                isComplete: false,\n                                houses: 0,\n                                hotels: 0,\n                                requiredCards: (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.getRequiredCardsForColor)(ownCard.color || \"\")\n                            });\n                        }\n                    }\n                    // Add target player's card to current player's set\n                    if (updatedCurrentSet.cards.length === 0) {\n                        // If set is empty, replace it with a new set\n                        updatedCurrentProperties[setIndex] = {\n                            color: targetCard.color || \"\",\n                            cards: [\n                                targetCard\n                            ],\n                            isComplete: false,\n                            houses: 0,\n                            hotels: 0,\n                            requiredCards: (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.getRequiredCardsForColor)(targetCard.color || \"\")\n                        };\n                    } else {\n                        // Add to existing set if colors match\n                        if (targetCard.color === updatedCurrentSet.color) {\n                            updatedCurrentSet.cards.push(targetCard);\n                            updatedCurrentSet.isComplete = updatedCurrentSet.cards.length >= updatedCurrentSet.requiredCards;\n                            updatedCurrentProperties[setIndex] = updatedCurrentSet;\n                        } else {\n                            // Create a new set if colors don't match\n                            updatedCurrentProperties.push({\n                                color: targetCard.color || \"\",\n                                cards: [\n                                    targetCard\n                                ],\n                                isComplete: false,\n                                houses: 0,\n                                hotels: 0,\n                                requiredCards: (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.getRequiredCardsForColor)(targetCard.color || \"\")\n                            });\n                        }\n                    }\n                    // Update the properties arrays\n                    targetPlayer.properties = updatedTargetProperties;\n                    currentPlayer.properties = updatedCurrentProperties;\n                    // Update players in the state\n                    updatedPlayers[targetPlayerIndex] = targetPlayer;\n                    updatedPlayers[currentPlayerIndex] = currentPlayer;\n                    message = \"Swapped \".concat(ownCard.name, \" for \").concat(targetCard.name, \" with Player \").concat(targetPlayerIndex + 1);\n                    // Reset the forced deal state\n                    setForcedDealTargetCard(null);\n                }\n                break;\n        }\n        // Update players\n        updatedPlayers[currentPlayerIndex] = currentPlayer;\n        updatedPlayers[targetPlayerIndex] = targetPlayer;\n        // Add the action card to the action area\n        const updatedActionCards = [\n            ...gameState.actionCards\n        ];\n        // Make sure actionCardInProgress exists before trying to use it\n        if (actionCardInProgress) {\n            // Add the card to the action area\n            updatedActionCards.push(actionCardInProgress.card);\n            // Remove the card from the player's hand\n            const updatedHand = [\n                ...currentPlayer.hand\n            ];\n            updatedHand.splice(actionCardInProgress.index, 1);\n            currentPlayer.hand = updatedHand;\n            // Update the player in the players array\n            updatedPlayers[currentPlayerIndex] = currentPlayer;\n            console.log(\"Removed \".concat(actionCardInProgress.card.name, \" from player \").concat(currentPlayerIndex + 1, \"'s hand\"));\n            console.log(\"Added \".concat(actionCardInProgress.card.name, \" to action area\"));\n        }\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            cardsPlayed: gameState.cardsPlayed + 1,\n            actionCards: updatedActionCards,\n            message\n        });\n        setShowPropertySelectionModal(false);\n        setTargetPlayerForPropertySelection(null);\n        setPropertySelectionType(\"\");\n        setActionCardInProgress(null);\n    };\n    // Handle ending a turn\n    const handleEndTurn = ()=>{\n        if (!gameState) return;\n        // Check if player has more than 7 cards\n        if (gameState.players[gameState.currentPlayerIndex].hand.length > 7) {\n            setShowDiscardModal(true);\n            return;\n        }\n        completeEndTurn();\n    };\n    // Complete the end turn process after discarding if necessary\n    const completeEndTurn = ()=>{\n        if (!gameState) return;\n        const { nextPlayerIndex, updatedPlayers } = (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.endTurn)(gameState.players, gameState.currentPlayerIndex);\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            currentPlayerIndex: nextPlayerIndex,\n            cardsPlayed: 0,\n            hasDrawnCards: false,\n            message: \"Player \".concat(nextPlayerIndex + 1, \"'s turn. Draw cards to begin.\")\n        });\n    };\n    // Handle discarding cards\n    const handleDiscard = (cardIndices)=>{\n        if (!gameState) return;\n        const { updatedPlayer, updatedDeck } = (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.discardCards)(gameState.players[gameState.currentPlayerIndex], cardIndices, gameState.deck);\n        const updatedPlayers = [\n            ...gameState.players\n        ];\n        updatedPlayers[gameState.currentPlayerIndex] = updatedPlayer;\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            deck: updatedDeck,\n            message: \"Discarded \".concat(cardIndices.length, \" cards\")\n        });\n        setShowDiscardModal(false);\n        completeEndTurn();\n    };\n    // Calculate total money in bank\n    const calculateBankTotal = (bank)=>{\n        return bank.reduce((total, card)=>total + card.value, 0);\n    };\n    // Check for winner\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"GameBoard.useEffect\": ()=>{\n            if (!gameState) return;\n            const checkWinner = {\n                \"GameBoard.useEffect.checkWinner\": ()=>{\n                    for (const player of gameState.players){\n                        // Check if player has 3 complete property sets\n                        const completeSets = player.properties.filter({\n                            \"GameBoard.useEffect.checkWinner\": (set)=>set.isComplete\n                        }[\"GameBoard.useEffect.checkWinner\"]).length;\n                        if (completeSets >= 3) {\n                            setGameState({\n                                ...gameState,\n                                isGameOver: true,\n                                winner: player,\n                                message: \"Player \".concat(player.id + 1, \" wins with 3 complete property sets!\")\n                            });\n                            return;\n                        }\n                    }\n                }\n            }[\"GameBoard.useEffect.checkWinner\"];\n            checkWinner();\n        }\n    }[\"GameBoard.useEffect\"], [\n        gameState\n    ]);\n    if (!gameState) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex flex-col items-center justify-center p-6 bg-white rounded-lg shadow-lg\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                    className: \"text-2xl font-bold mb-4\",\n                    children: \"Start New Game\"\n                }, void 0, false, {\n                    fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                    lineNumber: 833,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex gap-4\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>startGame(2),\n                            className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n                            children: \"2 Players\"\n                        }, void 0, false, {\n                            fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                            lineNumber: 835,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>startGame(3),\n                            className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n                            children: \"3 Players\"\n                        }, void 0, false, {\n                            fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                            lineNumber: 841,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>startGame(4),\n                            className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n                            children: \"4 Players\"\n                        }, void 0, false, {\n                            fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                            lineNumber: 847,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                    lineNumber: 834,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n            lineNumber: 832,\n            columnNumber: 7\n        }, this);\n    }\n    if (gameState.isGameOver && gameState.winner) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex flex-col items-center justify-center p-6 bg-white rounded-lg shadow-lg\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                    className: \"text-2xl font-bold mb-4\",\n                    children: \"Game Over!\"\n                }, void 0, false, {\n                    fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                    lineNumber: 861,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"text-xl mb-4\",\n                    children: [\n                        \"Player \",\n                        gameState.winner.id + 1,\n                        \" wins!\"\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                    lineNumber: 862,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    onClick: ()=>startGame(gameState.players.length),\n                    className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n                    children: \"New Game\"\n                }, void 0, false, {\n                    fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                    lineNumber: 863,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n            lineNumber: 860,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full max-w-7xl\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_game_info__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                currentPlayer: gameState.currentPlayerIndex + 1,\n                cardsPlayed: gameState.cardsPlayed,\n                hasDrawnCards: gameState.hasDrawnCards\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 875,\n                columnNumber: 7\n            }, this),\n            gameState.message && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"bg-blue-100 p-3 rounded-lg mb-4 text-center\",\n                children: gameState.message\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 882,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex justify-center items-center gap-6 mb-6\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_card_deck__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                        cardsRemaining: gameState.deck.length,\n                        onDrawCards: handleDrawCards,\n                        hasDrawnCards: gameState.hasDrawnCards\n                    }, void 0, false, {\n                        fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                        lineNumber: 888,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_action_area__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                        actionCards: gameState.actionCards,\n                        isCurrentPlayersTurn: true\n                    }, void 0, false, {\n                        fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                        lineNumber: 894,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 887,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"grid grid-cols-1 md:grid-cols-2 gap-6 mb-20\",\n                children: gameState.players.map((player, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_player_area__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                        player: player,\n                        isCurrentPlayer: index === gameState.currentPlayerIndex,\n                        onPlayCard: handlePlayCard,\n                        onPlayActionCard: handlePlayActionCard,\n                        gameState: gameState,\n                        bankTotal: calculateBankTotal(player.bank)\n                    }, player.id, false, {\n                        fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                        lineNumber: 902,\n                        columnNumber: 11\n                    }, this))\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 900,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_game_controls__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                cardsPlayed: gameState.cardsPlayed,\n                onEndTurn: handleEndTurn,\n                isCurrentPlayersTurn: true,\n                hasDrawnCards: gameState.hasDrawnCards\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 914,\n                columnNumber: 7\n            }, this),\n            showDiscardModal && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_discard_modal__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                player: gameState.players[gameState.currentPlayerIndex],\n                onDiscard: handleDiscard\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 922,\n                columnNumber: 9\n            }, this),\n            actionCardInProgress && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_action_modal__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                card: actionCardInProgress.card,\n                players: gameState.players,\n                currentPlayerIndex: gameState.currentPlayerIndex,\n                onComplete: handleActionCardComplete,\n                onCancel: ()=>setActionCardInProgress(null)\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 929,\n                columnNumber: 9\n            }, this),\n            showPropertySelectionModal && targetPlayerForPropertySelection !== null && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_property_selection_modal__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                title: propertySelectionType === \"deal-breaker\" ? \"Select a complete property set to steal\" : propertySelectionType === \"sly-deal\" ? \"Select a property card to steal\" : \"Select a property card to swap\",\n                propertySets: gameState.players[targetPlayerForPropertySelection].properties,\n                onSelect: handlePropertySelection,\n                onCancel: ()=>{\n                    setShowPropertySelectionModal(false);\n                    setTargetPlayerForPropertySelection(null);\n                    setPropertySelectionType(\"\");\n                    setActionCardInProgress(null);\n                },\n                allowCompleteSet: propertySelectionType === \"deal-breaker\"\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 940,\n                columnNumber: 11\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n        lineNumber: 874,\n        columnNumber: 5\n    }, this);\n}\n_s(GameBoard, \"ghqW/mow9Mh/xXzBOKrPXQNifaQ=\");\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvZ2FtZS1ib2FyZC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRTRDO0FBQ007QUFDSjtBQUNJO0FBQ0U7QUFDdUI7QUFVakQ7QUFDNEI7QUFDUjtBQUNRO0FBRXZDLFNBQVNpQjs7SUFDdEIsTUFBTSxDQUFDQyxXQUFXQyxhQUFhLEdBQUduQiwrQ0FBUUEsQ0FBbUI7SUFDN0QsTUFBTSxDQUFDb0Isa0JBQWtCQyxvQkFBb0IsR0FBR3JCLCtDQUFRQSxDQUFDO0lBQ3pELE1BQU0sQ0FBQ3NCLHNCQUFzQkMsd0JBQXdCLEdBQUd2QiwrQ0FBUUEsQ0FHdEQ7SUFDVixNQUFNLENBQUN3Qiw0QkFBNEJDLDhCQUE4QixHQUMvRHpCLCtDQUFRQSxDQUFDO0lBQ1gsTUFBTSxDQUFDMEIsdUJBQXVCQyx5QkFBeUIsR0FDckQzQiwrQ0FBUUEsQ0FBUztJQUNuQixNQUFNLENBQ0o0QixrQ0FDQUMsb0NBQ0QsR0FBRzdCLCtDQUFRQSxDQUFnQjtJQUU1Qix5Q0FBeUM7SUFDekMsTUFBTSxDQUFDOEIsc0JBQXNCQyx3QkFBd0IsR0FBRy9CLCtDQUFRQSxDQUt0RDtJQUVWLGtCQUFrQjtJQUNsQixNQUFNZ0MsWUFBWSxDQUFDQztRQUNqQixNQUFNLEVBQUVDLGtCQUFrQixFQUFFQyxlQUFlLEVBQUUsR0FBRzVCLCtEQUFjQSxDQUFDMEI7UUFFL0RkLGFBQWE7WUFDWGlCLFNBQVNGO1lBQ1RHLE1BQU1GO1lBQ05HLG9CQUFvQjtZQUNwQkMsYUFBYTtZQUNiQyxZQUFZO1lBQ1pDLFFBQVE7WUFDUkMsa0JBQWtCO1lBQ2xCQyxlQUFlO1lBQ2ZDLGFBQWEsRUFBRTtZQUNmQyxTQUFTO1FBQ1g7SUFDRjtJQUVBLDhDQUE4QztJQUM5QyxNQUFNQyxrQkFBa0I7UUFDdEIsSUFBSSxDQUFDNUIsYUFBYUEsVUFBVXlCLGFBQWEsRUFBRTtRQUUzQyxNQUFNLEVBQUVJLGFBQWEsRUFBRUMsV0FBVyxFQUFFLEdBQUd4QywwREFBU0EsQ0FDOUNVLFVBQVVrQixPQUFPLENBQUNsQixVQUFVb0Isa0JBQWtCLENBQUMsRUFDL0NwQixVQUFVbUIsSUFBSTtRQUdoQixNQUFNWSxpQkFBaUI7ZUFBSS9CLFVBQVVrQixPQUFPO1NBQUM7UUFDN0NhLGNBQWMsQ0FBQy9CLFVBQVVvQixrQkFBa0IsQ0FBQyxHQUFHUztRQUUvQzVCLGFBQWE7WUFDWCxHQUFHRCxTQUFTO1lBQ1prQixTQUFTYTtZQUNUWixNQUFNVztZQUNOTCxlQUFlO1lBQ2ZFLFNBQVM7UUFDWDtJQUNGO0lBRUEsd0JBQXdCO0lBQ3hCLE1BQU1LLGlCQUFpQixDQUNyQkMsV0FDQUMsWUFDQUM7UUFFQSxJQUFJLENBQUNuQyxhQUFhQSxVQUFVcUIsV0FBVyxJQUFJLEtBQUssQ0FBQ3JCLFVBQVV5QixhQUFhLEVBQ3RFO1FBRUYsTUFBTVcsU0FBU3BDLFVBQVVrQixPQUFPLENBQUNsQixVQUFVb0Isa0JBQWtCLENBQUM7UUFDOUQsTUFBTWlCLE9BQU9ELE9BQU9FLElBQUksQ0FBQ0wsVUFBVTtRQUVuQywwQkFBMEI7UUFDMUIsSUFBSSxDQUFDekMscUVBQW9CQSxDQUFDNkMsTUFBTUgsYUFBYTtZQUMzQ0ssTUFDRTtZQUVGO1FBQ0Y7UUFFQSxNQUFNUixpQkFBaUI7ZUFBSS9CLFVBQVVrQixPQUFPO1NBQUM7UUFDN0MsTUFBTVcsZ0JBQWdCO1lBQUUsR0FBR0UsY0FBYyxDQUFDL0IsVUFBVW9CLGtCQUFrQixDQUFDO1FBQUM7UUFFeEUsd0JBQXdCO1FBQ3hCUyxjQUFjUyxJQUFJLEdBQUc7ZUFBSVQsY0FBY1MsSUFBSTtTQUFDO1FBQzVDVCxjQUFjUyxJQUFJLENBQUNFLE1BQU0sQ0FBQ1AsV0FBVztRQUVyQywrQkFBK0I7UUFDL0IsSUFBSUMsZUFBZSxRQUFRO1lBQ3pCTCxjQUFjWSxJQUFJLEdBQUc7bUJBQUlaLGNBQWNZLElBQUk7Z0JBQUVKO2FBQUs7UUFDcEQsT0FBTyxJQUFJSCxXQUFXUSxVQUFVLENBQUMsY0FBYztZQUM3QyxrQ0FBa0M7WUFDbEMsTUFBTUMsV0FBV0MsT0FBT0MsUUFBUSxDQUFDWCxXQUFXWSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFFekQsNENBQTRDO1lBQzVDLElBQUlILFdBQVdkLGNBQWNrQixVQUFVLENBQUNDLE1BQU0sRUFBRTtnQkFDOUMsK0JBQStCO2dCQUMvQm5CLGNBQWNrQixVQUFVLEdBQUc7dUJBQUlsQixjQUFja0IsVUFBVTtpQkFBQztnQkFDeEQsTUFBTUUsYUFBYTtvQkFDakIsR0FBR3BCLGNBQWNrQixVQUFVLENBQUNKLFNBQVM7b0JBQ3JDTyxPQUFPOzJCQUFJckIsY0FBY2tCLFVBQVUsQ0FBQ0osU0FBUyxDQUFDTyxLQUFLO3dCQUFFYjtxQkFBSztnQkFDNUQ7Z0JBRUEsK0JBQStCO2dCQUMvQlksV0FBV0UsVUFBVSxHQUNuQkYsV0FBV0MsS0FBSyxDQUFDRixNQUFNLElBQUlDLFdBQVdHLGFBQWE7Z0JBRXJEdkIsY0FBY2tCLFVBQVUsQ0FBQ0osU0FBUyxHQUFHTTtZQUN2QyxPQUFPO2dCQUNMLG1GQUFtRjtnQkFDbkYsTUFBTUkscUJBQ0poQixLQUFLaUIsSUFBSSxLQUFLLGNBQ2RqQixLQUFLa0IsSUFBSSxDQUFDQyxXQUFXLEdBQUdDLFFBQVEsQ0FBQztnQkFFbkMsSUFBSSxDQUFDSixvQkFBb0I7b0JBQ3ZCeEIsY0FBY2tCLFVBQVUsR0FBRzsyQkFDdEJsQixjQUFja0IsVUFBVTt3QkFDM0I7NEJBQ0VXLE9BQU9yQixLQUFLcUIsS0FBSyxJQUFJOzRCQUNyQlIsT0FBTztnQ0FBQ2I7NkJBQUs7NEJBQ2JjLFlBQVk7NEJBQ1pRLFFBQVE7NEJBQ1JDLFFBQVE7NEJBQ1JSLGVBQWUxRCx5RUFBd0JBLENBQUMyQyxLQUFLcUIsS0FBSyxJQUFJO3dCQUN4RDtxQkFDRDtnQkFDSCxPQUFPO29CQUNMLGtEQUFrRDtvQkFDbERuQixNQUNFO29CQUVGO2dCQUNGO1lBQ0Y7UUFDRixPQUFPLElBQUlMLGVBQWUsVUFBVTtZQUNsQyw4Q0FBOEM7WUFDOUM7UUFDRjtRQUVBSCxjQUFjLENBQUMvQixVQUFVb0Isa0JBQWtCLENBQUMsR0FBR1M7UUFFL0M1QixhQUFhO1lBQ1gsR0FBR0QsU0FBUztZQUNaa0IsU0FBU2E7WUFDVFYsYUFBYXJCLFVBQVVxQixXQUFXLEdBQUc7WUFDckNNLFNBQVMsZ0JBQTBDLE9BQTFCM0IsVUFBVXFCLFdBQVcsR0FBRyxHQUFFO1FBQ3JEO0lBQ0Y7SUFFQSxnQ0FBZ0M7SUFDaEMsTUFBTXdDLHVCQUF1QixDQUFDNUI7UUFDNUIsSUFBSSxDQUFDakMsYUFBYUEsVUFBVXFCLFdBQVcsSUFBSSxLQUFLLENBQUNyQixVQUFVeUIsYUFBYSxFQUN0RTtRQUVGLE1BQU1XLFNBQVNwQyxVQUFVa0IsT0FBTyxDQUFDbEIsVUFBVW9CLGtCQUFrQixDQUFDO1FBQzlELE1BQU1pQixPQUFPRCxPQUFPRSxJQUFJLENBQUNMLFVBQVU7UUFFbkMsSUFBSUksS0FBS2lCLElBQUksS0FBSyxVQUFVO1lBQzFCZixNQUFNO1lBQ047UUFDRjtRQUVBLGtDQUFrQztRQUNsQ2xDLHdCQUF3QjtZQUN0QmdDO1lBQ0F5QixPQUFPN0I7UUFDVDtJQUNGO0lBRUEsbUNBQW1DO0lBQ25DLE1BQU04QiwyQkFBMkIsQ0FDL0JDLG1CQUNBQztRQUVBLElBQUksQ0FBQ2pFLGFBQWEsQ0FBQ0ksc0JBQXNCO1FBRXpDLE1BQU1nQixxQkFBcUJwQixVQUFVb0Isa0JBQWtCO1FBQ3ZELE1BQU1pQixPQUFPakMscUJBQXFCaUMsSUFBSTtRQUN0QyxNQUFNSixZQUFZN0IscUJBQXFCMEQsS0FBSztRQUU1QyxNQUFNL0IsaUJBQWlCO2VBQUkvQixVQUFVa0IsT0FBTztTQUFDO1FBQzdDLE1BQU1XLGdCQUFnQjtZQUFFLEdBQUdFLGNBQWMsQ0FBQ1gsbUJBQW1CO1FBQUM7UUFFOUQsd0JBQXdCO1FBQ3hCUyxjQUFjUyxJQUFJLEdBQUc7ZUFBSVQsY0FBY1MsSUFBSTtTQUFDO1FBQzVDVCxjQUFjUyxJQUFJLENBQUNFLE1BQU0sQ0FBQ1AsV0FBVztRQUVyQywwQkFBMEI7UUFDMUIsTUFBTWlDLHFCQUFxQjtlQUFJbEUsVUFBVTBCLFdBQVc7WUFBRVc7U0FBSztRQUUzRCw0Q0FBNEM7UUFDNUMsSUFBSVYsVUFBVSxVQUFvQixPQUFWVSxLQUFLa0IsSUFBSTtRQUVqQyxPQUFRbEIsS0FBSzhCLFVBQVU7WUFDckIsS0FBSztnQkFDSCxJQUFJSCxzQkFBc0JJLFdBQVc7b0JBQ25DLE1BQU1qQyxlQUFlO3dCQUFFLEdBQUdKLGNBQWMsQ0FBQ2lDLGtCQUFrQjtvQkFBQztvQkFDNUQsTUFBTUssY0FBY0MsS0FBS0MsR0FBRyxDQUMxQixHQUNBQyxtQkFBbUJyQyxhQUFhTSxJQUFJO29CQUd0QyxJQUFJNEIsY0FBYyxHQUFHO3dCQUNuQix1R0FBdUc7d0JBQ3ZHLE1BQU1JLGFBQXFCLEVBQUU7d0JBQzdCLElBQUlDLFlBQVk7d0JBRWhCLDJEQUEyRDt3QkFDM0QsTUFBTUMsYUFBYTsrQkFBSXhDLGFBQWFNLElBQUk7eUJBQUMsQ0FBQ21DLElBQUksQ0FDNUMsQ0FBQ0MsR0FBR0MsSUFBTUQsRUFBRUUsS0FBSyxHQUFHRCxFQUFFQyxLQUFLO3dCQUc3QixLQUFLLE1BQU1DLFlBQVlMLFdBQVk7NEJBQ2pDLElBQUlELFlBQVlMLGFBQWE7Z0NBQzNCSSxXQUFXUSxJQUFJLENBQUNEO2dDQUNoQk4sYUFBYU0sU0FBU0QsS0FBSztnQ0FFM0IsSUFBSUwsYUFBYUwsYUFBYTtvQ0FDNUI7Z0NBQ0Y7NEJBQ0Y7d0JBQ0Y7d0JBRUEseUNBQXlDO3dCQUN6Q2xDLGFBQWFNLElBQUksR0FBR04sYUFBYU0sSUFBSSxDQUFDeUMsTUFBTSxDQUMxQyxDQUFDN0MsT0FBUyxDQUFDb0MsV0FBV1UsSUFBSSxDQUFDLENBQUNDLFVBQVlBLFFBQVFDLEVBQUUsS0FBS2hELEtBQUtnRCxFQUFFO3dCQUdoRSxxQ0FBcUM7d0JBQ3JDeEQsY0FBY1ksSUFBSSxHQUFHOytCQUFJWixjQUFjWSxJQUFJOytCQUFLZ0M7eUJBQVc7d0JBRTNEMUMsY0FBYyxDQUFDaUMsa0JBQWtCLEdBQUc3Qjt3QkFDcENSLFVBQVUsY0FDUnFDLE9BRHNCVSxXQUFVLGtCQUVqQyxPQURDVixvQkFBb0I7b0JBRXhCLE9BQU87d0JBQ0xyQyxVQUFVLFVBQWdDLE9BQXRCcUMsb0JBQW9CLEdBQUU7b0JBQzVDO2dCQUNGO2dCQUNBO1lBRUYsS0FBSztnQkFDSCxJQUFJc0IsaUJBQWlCO2dCQUVyQiw4QkFBOEI7Z0JBQzlCdkQsZUFBZXdELE9BQU8sQ0FBQyxDQUFDbkQsUUFBUTBCO29CQUM5QixJQUFJQSxVQUFVMUMsb0JBQW9CO3dCQUNoQyxNQUFNb0UsaUJBQWlCOzRCQUFFLEdBQUdwRCxNQUFNO3dCQUFDO3dCQUNuQyxNQUFNaUMsY0FBY0MsS0FBS0MsR0FBRyxDQUMxQixHQUNBQyxtQkFBbUJnQixlQUFlL0MsSUFBSTt3QkFHeEMsSUFBSTRCLGNBQWMsR0FBRzs0QkFDbkIseUJBQXlCOzRCQUN6QixNQUFNSSxhQUFxQixFQUFFOzRCQUM3QixJQUFJQyxZQUFZOzRCQUVoQiwyREFBMkQ7NEJBQzNELE1BQU1DLGFBQWE7bUNBQUlhLGVBQWUvQyxJQUFJOzZCQUFDLENBQUNtQyxJQUFJLENBQzlDLENBQUNDLEdBQUdDLElBQU1ELEVBQUVFLEtBQUssR0FBR0QsRUFBRUMsS0FBSzs0QkFHN0IsS0FBSyxNQUFNQyxZQUFZTCxXQUFZO2dDQUNqQyxJQUFJRCxZQUFZTCxhQUFhO29DQUMzQkksV0FBV1EsSUFBSSxDQUFDRDtvQ0FDaEJOLGFBQWFNLFNBQVNELEtBQUs7b0NBRTNCLElBQUlMLGFBQWFMLGFBQWE7d0NBQzVCO29DQUNGO2dDQUNGOzRCQUNGOzRCQUVBLGtDQUFrQzs0QkFDbENtQixlQUFlL0MsSUFBSSxHQUFHK0MsZUFBZS9DLElBQUksQ0FBQ3lDLE1BQU0sQ0FDOUMsQ0FBQzdDLE9BQVMsQ0FBQ29DLFdBQVdVLElBQUksQ0FBQyxDQUFDQyxVQUFZQSxRQUFRQyxFQUFFLEtBQUtoRCxLQUFLZ0QsRUFBRTs0QkFHaEUscUNBQXFDOzRCQUNyQ3hELGNBQWNZLElBQUksR0FBRzttQ0FBSVosY0FBY1ksSUFBSTttQ0FBS2dDOzZCQUFXOzRCQUUzRDFDLGNBQWMsQ0FBQytCLE1BQU0sR0FBRzBCOzRCQUN4QkYsa0JBQWtCWjt3QkFDcEI7b0JBQ0Y7Z0JBQ0Y7Z0JBRUEvQyxVQUFVLGNBQTZCLE9BQWYyRCxnQkFBZTtnQkFDdkM7WUFFRixLQUFLO2dCQUNILG9CQUFvQjtnQkFDcEIsTUFBTSxFQUFFekQsZUFBZTRELG9CQUFvQixFQUFFM0QsV0FBVyxFQUFFLEdBQUd4QywwREFBU0EsQ0FDcEV1QyxlQUNBN0IsVUFBVW1CLElBQUksRUFDZDtnQkFHRlUsY0FBY1MsSUFBSSxHQUFHbUQscUJBQXFCbkQsSUFBSTtnQkFFOUNYLFVBQVU7Z0JBRVYxQixhQUFhO29CQUNYLEdBQUdELFNBQVM7b0JBQ1prQixTQUFTYTtvQkFDVFosTUFBTVc7b0JBQ05ULGFBQWFyQixVQUFVcUIsV0FBVyxHQUFHO29CQUNyQ0ssYUFBYXdDO29CQUNidkM7Z0JBQ0Y7Z0JBQ0E7WUFFRixLQUFLO2dCQUNILElBQUlxQyxzQkFBc0JJLFdBQVc7b0JBQ25DLDZEQUE2RDtvQkFDN0QsTUFBTXNCLGFBQXVCLEVBQUU7b0JBQy9CLElBQUlyRCxLQUFLcUIsS0FBSyxFQUFFZ0MsV0FBV1QsSUFBSSxDQUFDNUMsS0FBS3FCLEtBQUs7b0JBQzFDLElBQUlyQixLQUFLc0QsY0FBYyxFQUFFRCxXQUFXVCxJQUFJLENBQUM1QyxLQUFLc0QsY0FBYztvQkFFNUQsNkNBQTZDO29CQUM3QyxNQUFNQyxlQUFlL0QsY0FBY2tCLFVBQVUsQ0FBQ21DLE1BQU0sQ0FBQyxDQUFDVyxNQUNwREgsV0FBV2pDLFFBQVEsQ0FBQ29DLElBQUluQyxLQUFLO29CQUcvQix3QkFBd0I7b0JBQ3hCLElBQUlvQyxhQUFhO29CQUNqQkYsYUFBYUwsT0FBTyxDQUFDLENBQUNNO3dCQUNwQkMsY0FBY25HLG9FQUFtQkEsQ0FBQ2tHO29CQUNwQztvQkFFQSxJQUFJQyxhQUFhLEdBQUc7d0JBQ2xCLE1BQU0zRCxlQUFlOzRCQUFFLEdBQUdKLGNBQWMsQ0FBQ2lDLGtCQUFrQjt3QkFBQzt3QkFDNUQsTUFBTUssY0FBY0MsS0FBS0MsR0FBRyxDQUMxQnVCLFlBQ0F0QixtQkFBbUJyQyxhQUFhTSxJQUFJO3dCQUd0QyxJQUFJNEIsY0FBYyxHQUFHOzRCQUNuQix5QkFBeUI7NEJBQ3pCLE1BQU1JLGFBQXFCLEVBQUU7NEJBQzdCLElBQUlDLFlBQVk7NEJBRWhCLDJEQUEyRDs0QkFDM0QsTUFBTUMsYUFBYTttQ0FBSXhDLGFBQWFNLElBQUk7NkJBQUMsQ0FBQ21DLElBQUksQ0FDNUMsQ0FBQ0MsR0FBR0MsSUFBTUQsRUFBRUUsS0FBSyxHQUFHRCxFQUFFQyxLQUFLOzRCQUc3QixLQUFLLE1BQU1DLFlBQVlMLFdBQVk7Z0NBQ2pDLElBQUlELFlBQVlMLGFBQWE7b0NBQzNCSSxXQUFXUSxJQUFJLENBQUNEO29DQUNoQk4sYUFBYU0sU0FBU0QsS0FBSztvQ0FFM0IsSUFBSUwsYUFBYUwsYUFBYTt3Q0FDNUI7b0NBQ0Y7Z0NBQ0Y7NEJBQ0Y7NEJBRUEseUNBQXlDOzRCQUN6Q2xDLGFBQWFNLElBQUksR0FBR04sYUFBYU0sSUFBSSxDQUFDeUMsTUFBTSxDQUMxQyxDQUFDN0MsT0FBUyxDQUFDb0MsV0FBV1UsSUFBSSxDQUFDLENBQUNDLFVBQVlBLFFBQVFDLEVBQUUsS0FBS2hELEtBQUtnRCxFQUFFOzRCQUdoRSxxQ0FBcUM7NEJBQ3JDeEQsY0FBY1ksSUFBSSxHQUFHO21DQUFJWixjQUFjWSxJQUFJO21DQUFLZ0M7NkJBQVc7NEJBRTNEMUMsY0FBYyxDQUFDaUMsa0JBQWtCLEdBQUc3Qjs0QkFDcENSLFVBQVUsY0FDUnFDLE9BRHNCVSxXQUFVLHVCQUVqQyxPQURDVixvQkFBb0I7d0JBRXhCLE9BQU87NEJBQ0xyQyxVQUFVLFVBRVQsT0FEQ3FDLG9CQUFvQixHQUNyQjt3QkFDSDtvQkFDRixPQUFPO3dCQUNMckMsVUFBVztvQkFDYjtnQkFDRjtnQkFDQTtZQUVGLEtBQUs7Z0JBQ0gsSUFBSXFDLHNCQUFzQkksV0FBVztvQkFDbkMsa0RBQWtEO29CQUNsRDNELHlCQUF5QjtvQkFDekJFLG9DQUFvQ3FEO29CQUNwQ3pELDhCQUE4QjtvQkFFOUIsc0VBQXNFO29CQUN0RUYsd0JBQXdCO29CQUN4QjtnQkFDRjtnQkFDQTtZQUVGLEtBQUs7Z0JBQ0gsSUFBSTJELHNCQUFzQkksV0FBVztvQkFDbkMsb0RBQW9EO29CQUNwRDNELHlCQUF5QjtvQkFDekJFLG9DQUFvQ3FEO29CQUNwQ3pELDhCQUE4QjtvQkFFOUIsc0VBQXNFO29CQUN0RUYsd0JBQXdCO29CQUN4QjtnQkFDRjtnQkFDQTtZQUVGLEtBQUs7Z0JBQ0gsSUFBSTJELHNCQUFzQkksV0FBVztvQkFDbkMsb0RBQW9EO29CQUNwRDNELHlCQUF5QjtvQkFDekJFLG9DQUFvQ3FEO29CQUNwQ3pELDhCQUE4QjtvQkFFOUIsc0VBQXNFO29CQUN0RUYsd0JBQXdCO29CQUN4QjtnQkFDRjtnQkFDQTtRQUNKO1FBRUEwQixjQUFjLENBQUNYLG1CQUFtQixHQUFHUztRQUVyQzVCLGFBQWE7WUFDWCxHQUFHRCxTQUFTO1lBQ1prQixTQUFTYTtZQUNUVixhQUFhckIsVUFBVXFCLFdBQVcsR0FBRztZQUNyQ0ssYUFBYXdDO1lBQ2J2QztRQUNGO1FBRUF0Qix3QkFBd0I7SUFDMUI7SUFFQSw2Q0FBNkM7SUFDN0MsTUFBTTBGLDBCQUEwQixDQUFDcEQsVUFBa0JWO1FBQ2pELElBQUksQ0FBQ2pDLGFBQWEsQ0FBQ1Usa0NBQWtDO1FBRXJELE1BQU1VLHFCQUFxQnBCLFVBQVVvQixrQkFBa0I7UUFDdkQsTUFBTTRDLG9CQUFvQnREO1FBRTFCLE1BQU1xQixpQkFBaUI7ZUFBSS9CLFVBQVVrQixPQUFPO1NBQUM7UUFDN0MsTUFBTThFLGdCQUFnQjtZQUFFLEdBQUdqRSxjQUFjLENBQUNYLG1CQUFtQjtRQUFDO1FBQzlELE1BQU1lLGVBQWU7WUFBRSxHQUFHSixjQUFjLENBQUNpQyxrQkFBa0I7UUFBQztRQUU1RCxJQUFJckMsVUFBVTtRQUVkLE9BQVFuQjtZQUNOLEtBQUs7Z0JBQ0gsZ0NBQWdDO2dCQUNoQyxJQUFJbUMsV0FBV1IsYUFBYVksVUFBVSxDQUFDQyxNQUFNLEVBQUU7b0JBQzdDLE1BQU1pRCxZQUFZO3dCQUFFLEdBQUc5RCxhQUFhWSxVQUFVLENBQUNKLFNBQVM7b0JBQUM7b0JBRXpELG9DQUFvQztvQkFDcENSLGFBQWFZLFVBQVUsR0FBR1osYUFBYVksVUFBVSxDQUFDbUMsTUFBTSxDQUN0RCxDQUFDZ0IsR0FBR0MsSUFBTUEsTUFBTXhEO29CQUdsQixnQ0FBZ0M7b0JBQ2hDcUQsY0FBY2pELFVBQVUsR0FBRzsyQkFBSWlELGNBQWNqRCxVQUFVO3dCQUFFa0Q7cUJBQVU7b0JBRW5FdEUsVUFBVSxTQUNScUMsT0FEaUJpQyxVQUFVdkMsS0FBSyxFQUFDLDhCQUVsQyxPQURDTSxvQkFBb0I7Z0JBRXhCO2dCQUNBO1lBRUYsS0FBSztnQkFDSCwrQkFBK0I7Z0JBQy9CLElBQ0VyQixXQUFXUixhQUFhWSxVQUFVLENBQUNDLE1BQU0sSUFDekNmLFlBQVlFLGFBQWFZLFVBQVUsQ0FBQ0osU0FBUyxDQUFDTyxLQUFLLENBQUNGLE1BQU0sRUFDMUQ7b0JBQ0EsTUFBTW9ELGFBQWFqRSxhQUFhWSxVQUFVLENBQUNKLFNBQVMsQ0FBQ08sS0FBSyxDQUFDakIsVUFBVTtvQkFFckUsMkNBQTJDO29CQUMzQyxNQUFNb0UsMEJBQTBCOzJCQUFJbEUsYUFBYVksVUFBVTtxQkFBQztvQkFDNUQsTUFBTUUsYUFBYTt3QkFBRSxHQUFHb0QsdUJBQXVCLENBQUMxRCxTQUFTO29CQUFDO29CQUMxRE0sV0FBV0MsS0FBSyxHQUFHRCxXQUFXQyxLQUFLLENBQUNnQyxNQUFNLENBQUMsQ0FBQ2dCLEdBQUdDLElBQU1BLE1BQU1sRTtvQkFFM0QscUNBQXFDO29CQUNyQyxJQUFJZ0IsV0FBV0MsS0FBSyxDQUFDRixNQUFNLEtBQUssR0FBRzt3QkFDakNxRCx3QkFBd0I3RCxNQUFNLENBQUNHLFVBQVU7b0JBQzNDLE9BQU87d0JBQ0wscUNBQXFDO3dCQUNyQ00sV0FBV0UsVUFBVSxHQUNuQkYsV0FBV0MsS0FBSyxDQUFDRixNQUFNLElBQUlDLFdBQVdHLGFBQWE7d0JBQ3JEaUQsdUJBQXVCLENBQUMxRCxTQUFTLEdBQUdNO29CQUN0QztvQkFFQWQsYUFBYVksVUFBVSxHQUFHc0Q7b0JBRTFCLDhDQUE4QztvQkFDOUMsTUFBTUMsbUJBQW1CTixjQUFjakQsVUFBVSxDQUFDd0QsU0FBUyxDQUN6RCxDQUFDVixNQUFRQSxJQUFJbkMsS0FBSyxLQUFLMEMsV0FBVzFDLEtBQUs7b0JBR3pDLElBQUk0QyxvQkFBb0IsR0FBRzt3QkFDekIsc0JBQXNCO3dCQUN0QixNQUFNRSwyQkFBMkI7K0JBQUlSLGNBQWNqRCxVQUFVO3lCQUFDO3dCQUM5RCxNQUFNMEQsb0JBQW9COzRCQUN4QixHQUFHRCx3QkFBd0IsQ0FBQ0YsaUJBQWlCO3dCQUMvQzt3QkFDQUcsa0JBQWtCdkQsS0FBSyxHQUFHOytCQUFJdUQsa0JBQWtCdkQsS0FBSzs0QkFBRWtEO3lCQUFXO3dCQUNsRUssa0JBQWtCdEQsVUFBVSxHQUMxQnNELGtCQUFrQnZELEtBQUssQ0FBQ0YsTUFBTSxJQUFJeUQsa0JBQWtCckQsYUFBYTt3QkFDbkVvRCx3QkFBd0IsQ0FBQ0YsaUJBQWlCLEdBQUdHO3dCQUM3Q1QsY0FBY2pELFVBQVUsR0FBR3lEO29CQUM3QixPQUFPO3dCQUNMLGlCQUFpQjt3QkFDakJSLGNBQWNqRCxVQUFVLEdBQUc7K0JBQ3RCaUQsY0FBY2pELFVBQVU7NEJBQzNCO2dDQUNFVyxPQUFPMEMsV0FBVzFDLEtBQUssSUFBSTtnQ0FDM0JSLE9BQU87b0NBQUNrRDtpQ0FBVztnQ0FDbkJqRCxZQUFZO2dDQUNaUSxRQUFRO2dDQUNSQyxRQUFRO2dDQUNSUixlQUFlMUQseUVBQXdCQSxDQUFDMEcsV0FBVzFDLEtBQUssSUFBSTs0QkFDOUQ7eUJBQ0Q7b0JBQ0g7b0JBRUEvQixVQUFVLFNBQ1JxQyxPQURpQm9DLFdBQVc3QyxJQUFJLEVBQUMsaUJBRWxDLE9BRENTLG9CQUFvQjtnQkFFeEI7Z0JBQ0E7WUFFRixLQUFLO2dCQUNILGtEQUFrRDtnQkFDbEQsSUFDRXJCLFdBQVdSLGFBQWFZLFVBQVUsQ0FBQ0MsTUFBTSxJQUN6Q2YsWUFBWUUsYUFBYVksVUFBVSxDQUFDSixTQUFTLENBQUNPLEtBQUssQ0FBQ0YsTUFBTSxFQUMxRDtvQkFDQSxNQUFNMEQsYUFBYXZFLGFBQWFZLFVBQVUsQ0FBQ0osU0FBUyxDQUFDTyxLQUFLLENBQUNqQixVQUFVO29CQUVyRSwrQkFBK0I7b0JBQy9CcEIsd0JBQXdCO3dCQUN0QjhGLGFBQWEzQzt3QkFDYnJCO3dCQUNBVjt3QkFDQUksTUFBTXFFO29CQUNSO29CQUVBLDZDQUE2QztvQkFDN0N6RyxhQUFhO3dCQUNYLEdBQUdELFNBQVM7d0JBQ1oyQixTQUFTLFlBQTRCLE9BQWhCK0UsV0FBV25ELElBQUksRUFBQztvQkFDdkM7b0JBRUEsMEJBQTBCO29CQUMxQmhELDhCQUE4QjtvQkFFOUIsK0NBQStDO29CQUMvQ3FHLFdBQVc7d0JBQ1RuRyx5QkFBeUI7d0JBQ3pCRiw4QkFBOEI7b0JBQ2hDLEdBQUc7b0JBRUgsUUFBUSwwQkFBMEI7Z0JBQ3BDO2dCQUNBO1lBRUYsS0FBSztnQkFDSCxnREFBZ0Q7Z0JBQ2hELElBQ0VLLHlCQUF5QixRQUN6QitCLFdBQVdxRCxjQUFjakQsVUFBVSxDQUFDQyxNQUFNLElBQzFDZixZQUFZK0QsY0FBY2pELFVBQVUsQ0FBQ0osU0FBUyxDQUFDTyxLQUFLLENBQUNGLE1BQU0sRUFDM0Q7b0JBQ0EsTUFBTTZELFVBQVViLGNBQWNqRCxVQUFVLENBQUNKLFNBQVMsQ0FBQ08sS0FBSyxDQUFDakIsVUFBVTtvQkFDbkUsTUFBTStCLG9CQUFvQnBELHFCQUFxQitGLFdBQVc7b0JBQzFELE1BQU14RSxlQUFlO3dCQUFFLEdBQUdKLGNBQWMsQ0FBQ2lDLGtCQUFrQjtvQkFBQztvQkFFNUQsMkNBQTJDO29CQUMzQyxNQUFNcUMsMEJBQTBCOzJCQUFJbEUsYUFBYVksVUFBVTtxQkFBQztvQkFDNUQsTUFBTStELGlCQUFpQmxHLHFCQUFxQitCLFFBQVE7b0JBQ3BELE1BQU1vRSxrQkFBa0JuRyxxQkFBcUJxQixTQUFTO29CQUN0RCxNQUFNK0UsbUJBQW1CO3dCQUN2QixHQUFHWCx1QkFBdUIsQ0FBQ1MsZUFBZTtvQkFDNUM7b0JBQ0FFLGlCQUFpQjlELEtBQUssR0FBRzsyQkFBSThELGlCQUFpQjlELEtBQUs7cUJBQUM7b0JBQ3BELE1BQU13RCxhQUFhTSxpQkFBaUI5RCxLQUFLLENBQUM2RCxnQkFBZ0I7b0JBQzFEQyxpQkFBaUI5RCxLQUFLLENBQUNWLE1BQU0sQ0FBQ3VFLGlCQUFpQjtvQkFFL0MsNENBQTRDO29CQUM1QyxNQUFNUCwyQkFBMkI7MkJBQUlSLGNBQWNqRCxVQUFVO3FCQUFDO29CQUM5RCxNQUFNMEQsb0JBQW9CO3dCQUFFLEdBQUdELHdCQUF3QixDQUFDN0QsU0FBUztvQkFBQztvQkFDbEU4RCxrQkFBa0J2RCxLQUFLLEdBQUc7MkJBQUl1RCxrQkFBa0J2RCxLQUFLO3FCQUFDO29CQUN0RHVELGtCQUFrQnZELEtBQUssQ0FBQ1YsTUFBTSxDQUFDUCxXQUFXO29CQUUxQyxtREFBbUQ7b0JBQ25ELElBQUkrRSxpQkFBaUI5RCxLQUFLLENBQUNGLE1BQU0sS0FBSyxHQUFHO3dCQUN2Qyw2Q0FBNkM7d0JBQzdDcUQsdUJBQXVCLENBQUNTLGVBQWUsR0FBRzs0QkFDeENwRCxPQUFPbUQsUUFBUW5ELEtBQUssSUFBSTs0QkFDeEJSLE9BQU87Z0NBQUMyRDs2QkFBUTs0QkFDaEIxRCxZQUFZOzRCQUNaUSxRQUFROzRCQUNSQyxRQUFROzRCQUNSUixlQUFlMUQseUVBQXdCQSxDQUFDbUgsUUFBUW5ELEtBQUssSUFBSTt3QkFDM0Q7b0JBQ0YsT0FBTzt3QkFDTCxzQ0FBc0M7d0JBQ3RDLElBQUltRCxRQUFRbkQsS0FBSyxLQUFLc0QsaUJBQWlCdEQsS0FBSyxFQUFFOzRCQUM1Q3NELGlCQUFpQjlELEtBQUssQ0FBQytCLElBQUksQ0FBQzRCOzRCQUM1QkcsaUJBQWlCN0QsVUFBVSxHQUN6QjZELGlCQUFpQjlELEtBQUssQ0FBQ0YsTUFBTSxJQUFJZ0UsaUJBQWlCNUQsYUFBYTs0QkFDakVpRCx1QkFBdUIsQ0FBQ1MsZUFBZSxHQUFHRTt3QkFDNUMsT0FBTzs0QkFDTCx5Q0FBeUM7NEJBQ3pDWCx3QkFBd0JwQixJQUFJLENBQUM7Z0NBQzNCdkIsT0FBT21ELFFBQVFuRCxLQUFLLElBQUk7Z0NBQ3hCUixPQUFPO29DQUFDMkQ7aUNBQVE7Z0NBQ2hCMUQsWUFBWTtnQ0FDWlEsUUFBUTtnQ0FDUkMsUUFBUTtnQ0FDUlIsZUFBZTFELHlFQUF3QkEsQ0FBQ21ILFFBQVFuRCxLQUFLLElBQUk7NEJBQzNEO3dCQUNGO29CQUNGO29CQUVBLG1EQUFtRDtvQkFDbkQsSUFBSStDLGtCQUFrQnZELEtBQUssQ0FBQ0YsTUFBTSxLQUFLLEdBQUc7d0JBQ3hDLDZDQUE2Qzt3QkFDN0N3RCx3QkFBd0IsQ0FBQzdELFNBQVMsR0FBRzs0QkFDbkNlLE9BQU9nRCxXQUFXaEQsS0FBSyxJQUFJOzRCQUMzQlIsT0FBTztnQ0FBQ3dEOzZCQUFXOzRCQUNuQnZELFlBQVk7NEJBQ1pRLFFBQVE7NEJBQ1JDLFFBQVE7NEJBQ1JSLGVBQWUxRCx5RUFBd0JBLENBQUNnSCxXQUFXaEQsS0FBSyxJQUFJO3dCQUM5RDtvQkFDRixPQUFPO3dCQUNMLHNDQUFzQzt3QkFDdEMsSUFBSWdELFdBQVdoRCxLQUFLLEtBQUsrQyxrQkFBa0IvQyxLQUFLLEVBQUU7NEJBQ2hEK0Msa0JBQWtCdkQsS0FBSyxDQUFDK0IsSUFBSSxDQUFDeUI7NEJBQzdCRCxrQkFBa0J0RCxVQUFVLEdBQzFCc0Qsa0JBQWtCdkQsS0FBSyxDQUFDRixNQUFNLElBQzlCeUQsa0JBQWtCckQsYUFBYTs0QkFDakNvRCx3QkFBd0IsQ0FBQzdELFNBQVMsR0FBRzhEO3dCQUN2QyxPQUFPOzRCQUNMLHlDQUF5Qzs0QkFDekNELHlCQUF5QnZCLElBQUksQ0FBQztnQ0FDNUJ2QixPQUFPZ0QsV0FBV2hELEtBQUssSUFBSTtnQ0FDM0JSLE9BQU87b0NBQUN3RDtpQ0FBVztnQ0FDbkJ2RCxZQUFZO2dDQUNaUSxRQUFRO2dDQUNSQyxRQUFRO2dDQUNSUixlQUFlMUQseUVBQXdCQSxDQUFDZ0gsV0FBV2hELEtBQUssSUFBSTs0QkFDOUQ7d0JBQ0Y7b0JBQ0Y7b0JBRUEsK0JBQStCO29CQUMvQnZCLGFBQWFZLFVBQVUsR0FBR3NEO29CQUMxQkwsY0FBY2pELFVBQVUsR0FBR3lEO29CQUUzQiw4QkFBOEI7b0JBQzlCekUsY0FBYyxDQUFDaUMsa0JBQWtCLEdBQUc3QjtvQkFDcENKLGNBQWMsQ0FBQ1gsbUJBQW1CLEdBQUc0RTtvQkFFckNyRSxVQUFVLFdBQ1IrRSxPQURtQkcsUUFBUXRELElBQUksRUFBQyxTQUVsQlMsT0FEZDBDLFdBQVduRCxJQUFJLEVBQ2hCLGlCQUFxQyxPQUF0QlMsb0JBQW9CO29CQUVwQyw4QkFBOEI7b0JBQzlCbkQsd0JBQXdCO2dCQUMxQjtnQkFDQTtRQUNKO1FBRUEsaUJBQWlCO1FBQ2pCa0IsY0FBYyxDQUFDWCxtQkFBbUIsR0FBRzRFO1FBQ3JDakUsY0FBYyxDQUFDaUMsa0JBQWtCLEdBQUc3QjtRQUVwQyx5Q0FBeUM7UUFDekMsTUFBTStCLHFCQUFxQjtlQUFJbEUsVUFBVTBCLFdBQVc7U0FBQztRQUVyRCxnRUFBZ0U7UUFDaEUsSUFBSXRCLHNCQUFzQjtZQUN4QixrQ0FBa0M7WUFDbEM4RCxtQkFBbUJlLElBQUksQ0FBQzdFLHFCQUFxQmlDLElBQUk7WUFFakQseUNBQXlDO1lBQ3pDLE1BQU00RSxjQUFjO21CQUFJakIsY0FBYzFELElBQUk7YUFBQztZQUMzQzJFLFlBQVl6RSxNQUFNLENBQUNwQyxxQkFBcUIwRCxLQUFLLEVBQUU7WUFDL0NrQyxjQUFjMUQsSUFBSSxHQUFHMkU7WUFFckIseUNBQXlDO1lBQ3pDbEYsY0FBYyxDQUFDWCxtQkFBbUIsR0FBRzRFO1lBRXJDa0IsUUFBUUMsR0FBRyxDQUNULFdBQ0UvRixPQURTaEIscUJBQXFCaUMsSUFBSSxDQUFDa0IsSUFBSSxFQUFDLGlCQUV6QyxPQURDbkMscUJBQXFCLEdBQ3RCO1lBRUg4RixRQUFRQyxHQUFHLENBQUMsU0FBd0MsT0FBL0IvRyxxQkFBcUJpQyxJQUFJLENBQUNrQixJQUFJLEVBQUM7UUFDdEQ7UUFFQXRELGFBQWE7WUFDWCxHQUFHRCxTQUFTO1lBQ1prQixTQUFTYTtZQUNUVixhQUFhckIsVUFBVXFCLFdBQVcsR0FBRztZQUNyQ0ssYUFBYXdDO1lBQ2J2QztRQUNGO1FBRUFwQiw4QkFBOEI7UUFDOUJJLG9DQUFvQztRQUNwQ0YseUJBQXlCO1FBQ3pCSix3QkFBd0I7SUFDMUI7SUFFQSx1QkFBdUI7SUFDdkIsTUFBTStHLGdCQUFnQjtRQUNwQixJQUFJLENBQUNwSCxXQUFXO1FBRWhCLHdDQUF3QztRQUN4QyxJQUFJQSxVQUFVa0IsT0FBTyxDQUFDbEIsVUFBVW9CLGtCQUFrQixDQUFDLENBQUNrQixJQUFJLENBQUNVLE1BQU0sR0FBRyxHQUFHO1lBQ25FN0Msb0JBQW9CO1lBQ3BCO1FBQ0Y7UUFFQWtIO0lBQ0Y7SUFFQSw4REFBOEQ7SUFDOUQsTUFBTUEsa0JBQWtCO1FBQ3RCLElBQUksQ0FBQ3JILFdBQVc7UUFFaEIsTUFBTSxFQUFFc0gsZUFBZSxFQUFFdkYsY0FBYyxFQUFFLEdBQUd4Qyx3REFBT0EsQ0FDakRTLFVBQVVrQixPQUFPLEVBQ2pCbEIsVUFBVW9CLGtCQUFrQjtRQUc5Qm5CLGFBQWE7WUFDWCxHQUFHRCxTQUFTO1lBQ1prQixTQUFTYTtZQUNUWCxvQkFBb0JrRztZQUNwQmpHLGFBQWE7WUFDYkksZUFBZTtZQUNmRSxTQUFTLFVBQThCLE9BQXBCMkYsa0JBQWtCLEdBQUU7UUFDekM7SUFDRjtJQUVBLDBCQUEwQjtJQUMxQixNQUFNQyxnQkFBZ0IsQ0FBQ0M7UUFDckIsSUFBSSxDQUFDeEgsV0FBVztRQUVoQixNQUFNLEVBQUU2QixhQUFhLEVBQUVDLFdBQVcsRUFBRSxHQUFHckMsNkRBQVlBLENBQ2pETyxVQUFVa0IsT0FBTyxDQUFDbEIsVUFBVW9CLGtCQUFrQixDQUFDLEVBQy9Db0csYUFDQXhILFVBQVVtQixJQUFJO1FBR2hCLE1BQU1ZLGlCQUFpQjtlQUFJL0IsVUFBVWtCLE9BQU87U0FBQztRQUM3Q2EsY0FBYyxDQUFDL0IsVUFBVW9CLGtCQUFrQixDQUFDLEdBQUdTO1FBRS9DNUIsYUFBYTtZQUNYLEdBQUdELFNBQVM7WUFDWmtCLFNBQVNhO1lBQ1RaLE1BQU1XO1lBQ05ILFNBQVMsYUFBZ0MsT0FBbkI2RixZQUFZeEUsTUFBTSxFQUFDO1FBQzNDO1FBRUE3QyxvQkFBb0I7UUFDcEJrSDtJQUNGO0lBRUEsZ0NBQWdDO0lBQ2hDLE1BQU03QyxxQkFBcUIsQ0FBQy9CO1FBQzFCLE9BQU9BLEtBQUtnRixNQUFNLENBQUMsQ0FBQ0MsT0FBT3JGLE9BQVNxRixRQUFRckYsS0FBSzBDLEtBQUssRUFBRTtJQUMxRDtJQUVBLG1CQUFtQjtJQUNuQmhHLGdEQUFTQTsrQkFBQztZQUNSLElBQUksQ0FBQ2lCLFdBQVc7WUFFaEIsTUFBTTJIO21EQUFjO29CQUNsQixLQUFLLE1BQU12RixVQUFVcEMsVUFBVWtCLE9BQU8sQ0FBRTt3QkFDdEMsK0NBQStDO3dCQUMvQyxNQUFNMEcsZUFBZXhGLE9BQU9XLFVBQVUsQ0FBQ21DLE1BQU07K0RBQzNDLENBQUNXLE1BQVFBLElBQUkxQyxVQUFVOzhEQUN2QkgsTUFBTTt3QkFDUixJQUFJNEUsZ0JBQWdCLEdBQUc7NEJBQ3JCM0gsYUFBYTtnQ0FDWCxHQUFHRCxTQUFTO2dDQUNac0IsWUFBWTtnQ0FDWkMsUUFBUWE7Z0NBQ1JULFNBQVMsVUFFUixPQURDUyxPQUFPaUQsRUFBRSxHQUFHLEdBQ2I7NEJBQ0g7NEJBQ0E7d0JBQ0Y7b0JBQ0Y7Z0JBQ0Y7O1lBRUFzQztRQUNGOzhCQUFHO1FBQUMzSDtLQUFVO0lBRWQsSUFBSSxDQUFDQSxXQUFXO1FBQ2QscUJBQ0UsOERBQUM2SDtZQUFJQyxXQUFVOzs4QkFDYiw4REFBQ0M7b0JBQUdELFdBQVU7OEJBQTBCOzs7Ozs7OEJBQ3hDLDhEQUFDRDtvQkFBSUMsV0FBVTs7c0NBQ2IsOERBQUNFOzRCQUNDQyxTQUFTLElBQU1uSCxVQUFVOzRCQUN6QmdILFdBQVU7c0NBQ1g7Ozs7OztzQ0FHRCw4REFBQ0U7NEJBQ0NDLFNBQVMsSUFBTW5ILFVBQVU7NEJBQ3pCZ0gsV0FBVTtzQ0FDWDs7Ozs7O3NDQUdELDhEQUFDRTs0QkFDQ0MsU0FBUyxJQUFNbkgsVUFBVTs0QkFDekJnSCxXQUFVO3NDQUNYOzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFNVDtJQUVBLElBQUk5SCxVQUFVc0IsVUFBVSxJQUFJdEIsVUFBVXVCLE1BQU0sRUFBRTtRQUM1QyxxQkFDRSw4REFBQ3NHO1lBQUlDLFdBQVU7OzhCQUNiLDhEQUFDQztvQkFBR0QsV0FBVTs4QkFBMEI7Ozs7Ozs4QkFDeEMsOERBQUNJO29CQUFFSixXQUFVOzt3QkFBZTt3QkFBUTlILFVBQVV1QixNQUFNLENBQUM4RCxFQUFFLEdBQUc7d0JBQUU7Ozs7Ozs7OEJBQzVELDhEQUFDMkM7b0JBQ0NDLFNBQVMsSUFBTW5ILFVBQVVkLFVBQVVrQixPQUFPLENBQUM4QixNQUFNO29CQUNqRDhFLFdBQVU7OEJBQ1g7Ozs7Ozs7Ozs7OztJQUtQO0lBRUEscUJBQ0UsOERBQUNEO1FBQUlDLFdBQVU7OzBCQUNiLDhEQUFDakksNkRBQVFBO2dCQUNQbUcsZUFBZWhHLFVBQVVvQixrQkFBa0IsR0FBRztnQkFDOUNDLGFBQWFyQixVQUFVcUIsV0FBVztnQkFDbENJLGVBQWV6QixVQUFVeUIsYUFBYTs7Ozs7O1lBR3ZDekIsVUFBVTJCLE9BQU8sa0JBQ2hCLDhEQUFDa0c7Z0JBQUlDLFdBQVU7MEJBQ1o5SCxVQUFVMkIsT0FBTzs7Ozs7OzBCQUl0Qiw4REFBQ2tHO2dCQUFJQyxXQUFVOztrQ0FDYiw4REFBQzdJLDZEQUFRQTt3QkFDUGtKLGdCQUFnQm5JLFVBQVVtQixJQUFJLENBQUM2QixNQUFNO3dCQUNyQ29GLGFBQWF4Rzt3QkFDYkgsZUFBZXpCLFVBQVV5QixhQUFhOzs7Ozs7a0NBR3hDLDhEQUFDdkMsK0RBQVVBO3dCQUNUd0MsYUFBYTFCLFVBQVUwQixXQUFXO3dCQUNsQzJHLHNCQUFzQjs7Ozs7Ozs7Ozs7OzBCQUkxQiw4REFBQ1I7Z0JBQUlDLFdBQVU7MEJBQ1o5SCxVQUFVa0IsT0FBTyxDQUFDb0gsR0FBRyxDQUFDLENBQUNsRyxRQUFRMEIsc0JBQzlCLDhEQUFDOUUsK0RBQVVBO3dCQUVUb0QsUUFBUUE7d0JBQ1JtRyxpQkFBaUJ6RSxVQUFVOUQsVUFBVW9CLGtCQUFrQjt3QkFDdkRvSCxZQUFZeEc7d0JBQ1p5RyxrQkFBa0I1RTt3QkFDbEI3RCxXQUFXQTt3QkFDWDBJLFdBQVdsRSxtQkFBbUJwQyxPQUFPSyxJQUFJO3VCQU5wQ0wsT0FBT2lELEVBQUU7Ozs7Ozs7Ozs7MEJBV3BCLDhEQUFDekYsaUVBQVlBO2dCQUNYeUIsYUFBYXJCLFVBQVVxQixXQUFXO2dCQUNsQ3NILFdBQVd2QjtnQkFDWGlCLHNCQUFzQjtnQkFDdEI1RyxlQUFlekIsVUFBVXlCLGFBQWE7Ozs7OztZQUd2Q3ZCLGtDQUNDLDhEQUFDSixrRUFBWUE7Z0JBQ1hzQyxRQUFRcEMsVUFBVWtCLE9BQU8sQ0FBQ2xCLFVBQVVvQixrQkFBa0IsQ0FBQztnQkFDdkR3SCxXQUFXckI7Ozs7OztZQUlkbkgsc0NBQ0MsOERBQUNqQixnRUFBV0E7Z0JBQ1ZrRCxNQUFNakMscUJBQXFCaUMsSUFBSTtnQkFDL0JuQixTQUFTbEIsVUFBVWtCLE9BQU87Z0JBQzFCRSxvQkFBb0JwQixVQUFVb0Isa0JBQWtCO2dCQUNoRHlILFlBQVk5RTtnQkFDWitFLFVBQVUsSUFBTXpJLHdCQUF3Qjs7Ozs7O1lBSTNDQyw4QkFDQ0kscUNBQXFDLHNCQUNuQyw4REFBQ3RCLDRFQUFzQkE7Z0JBQ3JCMkosT0FDRXZJLDBCQUEwQixpQkFDdEIsNENBQ0FBLDBCQUEwQixhQUMxQixvQ0FDQTtnQkFFTndJLGNBQ0VoSixVQUFVa0IsT0FBTyxDQUFDUixpQ0FBaUMsQ0FBQ3FDLFVBQVU7Z0JBRWhFa0csVUFBVWxEO2dCQUNWK0MsVUFBVTtvQkFDUnZJLDhCQUE4QjtvQkFDOUJJLG9DQUFvQztvQkFDcENGLHlCQUF5QjtvQkFDekJKLHdCQUF3QjtnQkFDMUI7Z0JBQ0E2SSxrQkFBa0IxSSwwQkFBMEI7Ozs7Ozs7Ozs7OztBQUt4RDtHQTU2QndCVDtLQUFBQSIsInNvdXJjZXMiOlsiL1VzZXJzL2tpdGpvbmVzL0Rlc2t0b3AvbW9ub3BvbHktZGVhbC9jb21wb25lbnRzL2dhbWUtYm9hcmQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUGxheWVyQXJlYSBmcm9tIFwiQC9jb21wb25lbnRzL3BsYXllci1hcmVhXCI7XG5pbXBvcnQgQ2FyZERlY2sgZnJvbSBcIkAvY29tcG9uZW50cy9jYXJkLWRlY2tcIjtcbmltcG9ydCBBY3Rpb25BcmVhIGZyb20gXCJAL2NvbXBvbmVudHMvYWN0aW9uLWFyZWFcIjtcbmltcG9ydCBBY3Rpb25Nb2RhbCBmcm9tIFwiQC9jb21wb25lbnRzL2FjdGlvbi1tb2RhbFwiO1xuaW1wb3J0IFByb3BlcnR5U2VsZWN0aW9uTW9kYWwgZnJvbSBcIkAvY29tcG9uZW50cy9wcm9wZXJ0eS1zZWxlY3Rpb24tbW9kYWxcIjtcbmltcG9ydCB0eXBlIHsgQ2FyZCwgR2FtZVN0YXRlIH0gZnJvbSBcIkAvbGliL3R5cGVzXCI7XG5pbXBvcnQge1xuICBpbml0aWFsaXplR2FtZSxcbiAgZHJhd0NhcmRzLFxuICBlbmRUdXJuLFxuICBpc1ZhbGlkQ2FyZFBsYWNlbWVudCxcbiAgZGlzY2FyZENhcmRzLFxuICBnZXRSZXF1aXJlZENhcmRzRm9yQ29sb3IsXG4gIGNhbGN1bGF0ZVJlbnRBbW91bnQsXG59IGZyb20gXCJAL2xpYi9nYW1lLWxvZ2ljXCI7XG5pbXBvcnQgR2FtZUNvbnRyb2xzIGZyb20gXCJAL2NvbXBvbmVudHMvZ2FtZS1jb250cm9sc1wiO1xuaW1wb3J0IEdhbWVJbmZvIGZyb20gXCJAL2NvbXBvbmVudHMvZ2FtZS1pbmZvXCI7XG5pbXBvcnQgRGlzY2FyZE1vZGFsIGZyb20gXCJAL2NvbXBvbmVudHMvZGlzY2FyZC1tb2RhbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHYW1lQm9hcmQoKSB7XG4gIGNvbnN0IFtnYW1lU3RhdGUsIHNldEdhbWVTdGF0ZV0gPSB1c2VTdGF0ZTxHYW1lU3RhdGUgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW3Nob3dEaXNjYXJkTW9kYWwsIHNldFNob3dEaXNjYXJkTW9kYWxdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbYWN0aW9uQ2FyZEluUHJvZ3Jlc3MsIHNldEFjdGlvbkNhcmRJblByb2dyZXNzXSA9IHVzZVN0YXRlPHtcbiAgICBjYXJkOiBDYXJkO1xuICAgIGluZGV4OiBudW1iZXI7XG4gIH0gfCBudWxsPihudWxsKTtcbiAgY29uc3QgW3Nob3dQcm9wZXJ0eVNlbGVjdGlvbk1vZGFsLCBzZXRTaG93UHJvcGVydHlTZWxlY3Rpb25Nb2RhbF0gPVxuICAgIHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3Byb3BlcnR5U2VsZWN0aW9uVHlwZSwgc2V0UHJvcGVydHlTZWxlY3Rpb25UeXBlXSA9XG4gICAgdXNlU3RhdGU8c3RyaW5nPihcIlwiKTtcbiAgY29uc3QgW1xuICAgIHRhcmdldFBsYXllckZvclByb3BlcnR5U2VsZWN0aW9uLFxuICAgIHNldFRhcmdldFBsYXllckZvclByb3BlcnR5U2VsZWN0aW9uLFxuICBdID0gdXNlU3RhdGU8bnVtYmVyIHwgbnVsbD4obnVsbCk7XG5cbiAgLy8gQWRkIHN0YXRlIGZvciBmb3JjZWQgZGVhbCBhbmQgc2x5IGRlYWxcbiAgY29uc3QgW2ZvcmNlZERlYWxUYXJnZXRDYXJkLCBzZXRGb3JjZWREZWFsVGFyZ2V0Q2FyZF0gPSB1c2VTdGF0ZTx7XG4gICAgcGxheWVySW5kZXg6IG51bWJlcjtcbiAgICBzZXRJbmRleDogbnVtYmVyO1xuICAgIGNhcmRJbmRleDogbnVtYmVyO1xuICAgIGNhcmQ6IENhcmQ7XG4gIH0gfCBudWxsPihudWxsKTtcblxuICAvLyBJbml0aWFsaXplIGdhbWVcbiAgY29uc3Qgc3RhcnRHYW1lID0gKG51bVBsYXllcnM6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHsgaW5pdGlhbGl6ZWRQbGF5ZXJzLCBpbml0aWFsaXplZERlY2sgfSA9IGluaXRpYWxpemVHYW1lKG51bVBsYXllcnMpO1xuXG4gICAgc2V0R2FtZVN0YXRlKHtcbiAgICAgIHBsYXllcnM6IGluaXRpYWxpemVkUGxheWVycyxcbiAgICAgIGRlY2s6IGluaXRpYWxpemVkRGVjayxcbiAgICAgIGN1cnJlbnRQbGF5ZXJJbmRleDogMCxcbiAgICAgIGNhcmRzUGxheWVkOiAwLFxuICAgICAgaXNHYW1lT3ZlcjogZmFsc2UsXG4gICAgICB3aW5uZXI6IG51bGwsXG4gICAgICBhY3Rpb25JblByb2dyZXNzOiBudWxsLFxuICAgICAgaGFzRHJhd25DYXJkczogZmFsc2UsXG4gICAgICBhY3Rpb25DYXJkczogW10sXG4gICAgICBtZXNzYWdlOiBcIkdhbWUgc3RhcnRlZCEgRHJhdyBjYXJkcyB0byBiZWdpbiB5b3VyIHR1cm4uXCIsXG4gICAgfSk7XG4gIH07XG5cbiAgLy8gSGFuZGxlIGRyYXdpbmcgY2FyZHMgYXQgdGhlIHN0YXJ0IG9mIGEgdHVyblxuICBjb25zdCBoYW5kbGVEcmF3Q2FyZHMgPSAoKSA9PiB7XG4gICAgaWYgKCFnYW1lU3RhdGUgfHwgZ2FtZVN0YXRlLmhhc0RyYXduQ2FyZHMpIHJldHVybjtcblxuICAgIGNvbnN0IHsgdXBkYXRlZFBsYXllciwgdXBkYXRlZERlY2sgfSA9IGRyYXdDYXJkcyhcbiAgICAgIGdhbWVTdGF0ZS5wbGF5ZXJzW2dhbWVTdGF0ZS5jdXJyZW50UGxheWVySW5kZXhdLFxuICAgICAgZ2FtZVN0YXRlLmRlY2tcbiAgICApO1xuXG4gICAgY29uc3QgdXBkYXRlZFBsYXllcnMgPSBbLi4uZ2FtZVN0YXRlLnBsYXllcnNdO1xuICAgIHVwZGF0ZWRQbGF5ZXJzW2dhbWVTdGF0ZS5jdXJyZW50UGxheWVySW5kZXhdID0gdXBkYXRlZFBsYXllcjtcblxuICAgIHNldEdhbWVTdGF0ZSh7XG4gICAgICAuLi5nYW1lU3RhdGUsXG4gICAgICBwbGF5ZXJzOiB1cGRhdGVkUGxheWVycyxcbiAgICAgIGRlY2s6IHVwZGF0ZWREZWNrLFxuICAgICAgaGFzRHJhd25DYXJkczogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6IFwiQ2FyZHMgZHJhd24uIFBsYXkgdXAgdG8gMyBjYXJkcy5cIixcbiAgICB9KTtcbiAgfTtcblxuICAvLyBIYW5kbGUgcGxheWluZyBhIGNhcmRcbiAgY29uc3QgaGFuZGxlUGxheUNhcmQgPSAoXG4gICAgY2FyZEluZGV4OiBudW1iZXIsXG4gICAgdGFyZ2V0QXJlYTogc3RyaW5nLFxuICAgIHRhcmdldFBsYXllcj86IG51bWJlclxuICApID0+IHtcbiAgICBpZiAoIWdhbWVTdGF0ZSB8fCBnYW1lU3RhdGUuY2FyZHNQbGF5ZWQgPj0gMyB8fCAhZ2FtZVN0YXRlLmhhc0RyYXduQ2FyZHMpXG4gICAgICByZXR1cm47XG5cbiAgICBjb25zdCBwbGF5ZXIgPSBnYW1lU3RhdGUucGxheWVyc1tnYW1lU3RhdGUuY3VycmVudFBsYXllckluZGV4XTtcbiAgICBjb25zdCBjYXJkID0gcGxheWVyLmhhbmRbY2FyZEluZGV4XTtcblxuICAgIC8vIFZhbGlkYXRlIGNhcmQgcGxhY2VtZW50XG4gICAgaWYgKCFpc1ZhbGlkQ2FyZFBsYWNlbWVudChjYXJkLCB0YXJnZXRBcmVhKSkge1xuICAgICAgYWxlcnQoXG4gICAgICAgIFwiSW52YWxpZCBjYXJkIHBsYWNlbWVudC4gQ2hlY2sgdGhlIHJ1bGVzIGZvciB3aGVyZSB0aGlzIGNhcmQgY2FuIGJlIHBsYXllZC5cIlxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1cGRhdGVkUGxheWVycyA9IFsuLi5nYW1lU3RhdGUucGxheWVyc107XG4gICAgY29uc3QgdXBkYXRlZFBsYXllciA9IHsgLi4udXBkYXRlZFBsYXllcnNbZ2FtZVN0YXRlLmN1cnJlbnRQbGF5ZXJJbmRleF0gfTtcblxuICAgIC8vIFJlbW92ZSBjYXJkIGZyb20gaGFuZFxuICAgIHVwZGF0ZWRQbGF5ZXIuaGFuZCA9IFsuLi51cGRhdGVkUGxheWVyLmhhbmRdO1xuICAgIHVwZGF0ZWRQbGF5ZXIuaGFuZC5zcGxpY2UoY2FyZEluZGV4LCAxKTtcblxuICAgIC8vIEFkZCBjYXJkIHRvIGFwcHJvcHJpYXRlIGFyZWFcbiAgICBpZiAodGFyZ2V0QXJlYSA9PT0gXCJiYW5rXCIpIHtcbiAgICAgIHVwZGF0ZWRQbGF5ZXIuYmFuayA9IFsuLi51cGRhdGVkUGxheWVyLmJhbmssIGNhcmRdO1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0QXJlYS5zdGFydHNXaXRoKFwicHJvcGVydHktXCIpKSB7XG4gICAgICAvLyBIYW5kbGUgcHJvcGVydHkgcGxhY2VtZW50IGxvZ2ljXG4gICAgICBjb25zdCBzZXRJbmRleCA9IE51bWJlci5wYXJzZUludCh0YXJnZXRBcmVhLnNwbGl0KFwiLVwiKVsxXSk7XG5cbiAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYW4gZXhpc3RpbmcgcHJvcGVydHkgc2V0XG4gICAgICBpZiAoc2V0SW5kZXggPCB1cGRhdGVkUGxheWVyLnByb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgIC8vIEFkZCB0byBleGlzdGluZyBwcm9wZXJ0eSBzZXRcbiAgICAgICAgdXBkYXRlZFBsYXllci5wcm9wZXJ0aWVzID0gWy4uLnVwZGF0ZWRQbGF5ZXIucHJvcGVydGllc107XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRTZXQgPSB7XG4gICAgICAgICAgLi4udXBkYXRlZFBsYXllci5wcm9wZXJ0aWVzW3NldEluZGV4XSxcbiAgICAgICAgICBjYXJkczogWy4uLnVwZGF0ZWRQbGF5ZXIucHJvcGVydGllc1tzZXRJbmRleF0uY2FyZHMsIGNhcmRdLFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHNldCBpcyBub3cgY29tcGxldGVcbiAgICAgICAgdXBkYXRlZFNldC5pc0NvbXBsZXRlID1cbiAgICAgICAgICB1cGRhdGVkU2V0LmNhcmRzLmxlbmd0aCA+PSB1cGRhdGVkU2V0LnJlcXVpcmVkQ2FyZHM7XG5cbiAgICAgICAgdXBkYXRlZFBsYXllci5wcm9wZXJ0aWVzW3NldEluZGV4XSA9IHVwZGF0ZWRTZXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDcmVhdGUgbmV3IHByb3BlcnR5IHNldCAob25seSBmb3IgcmVndWxhciBwcm9wZXJ0aWVzLCBub3QgXCJBbnkgQ29sb3JcIiB3aWxkY2FyZHMpXG4gICAgICAgIGNvbnN0IGlzQW55Q29sb3JXaWxkY2FyZCA9XG4gICAgICAgICAgY2FyZC50eXBlID09PSBcIndpbGRjYXJkXCIgJiZcbiAgICAgICAgICBjYXJkLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcImFueSBjb2xvclwiKTtcblxuICAgICAgICBpZiAoIWlzQW55Q29sb3JXaWxkY2FyZCkge1xuICAgICAgICAgIHVwZGF0ZWRQbGF5ZXIucHJvcGVydGllcyA9IFtcbiAgICAgICAgICAgIC4uLnVwZGF0ZWRQbGF5ZXIucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY29sb3I6IGNhcmQuY29sb3IgfHwgXCJcIixcbiAgICAgICAgICAgICAgY2FyZHM6IFtjYXJkXSxcbiAgICAgICAgICAgICAgaXNDb21wbGV0ZTogZmFsc2UsXG4gICAgICAgICAgICAgIGhvdXNlczogMCxcbiAgICAgICAgICAgICAgaG90ZWxzOiAwLFxuICAgICAgICAgICAgICByZXF1aXJlZENhcmRzOiBnZXRSZXF1aXJlZENhcmRzRm9yQ29sb3IoY2FyZC5jb2xvciB8fCBcIlwiKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBBbnkgQ29sb3Igd2lsZGNhcmRzIGNhbid0IGNyZWF0ZSB0aGVpciBvd24gc2V0c1xuICAgICAgICAgIGFsZXJ0KFxuICAgICAgICAgICAgXCJBbnkgQ29sb3Igd2lsZGNhcmRzIG11c3QgYmUgYWRkZWQgdG8gYW4gZXhpc3RpbmcgcHJvcGVydHkgc2V0LlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRhcmdldEFyZWEgPT09IFwiYWN0aW9uXCIpIHtcbiAgICAgIC8vIFRoaXMgaXMgbm93IGhhbmRsZWQgYnkgaGFuZGxlUGxheUFjdGlvbkNhcmRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVkUGxheWVyc1tnYW1lU3RhdGUuY3VycmVudFBsYXllckluZGV4XSA9IHVwZGF0ZWRQbGF5ZXI7XG5cbiAgICBzZXRHYW1lU3RhdGUoe1xuICAgICAgLi4uZ2FtZVN0YXRlLFxuICAgICAgcGxheWVyczogdXBkYXRlZFBsYXllcnMsXG4gICAgICBjYXJkc1BsYXllZDogZ2FtZVN0YXRlLmNhcmRzUGxheWVkICsgMSxcbiAgICAgIG1lc3NhZ2U6IGBDYXJkIHBsYXllZCAoJHtnYW1lU3RhdGUuY2FyZHNQbGF5ZWQgKyAxfS8zKWAsXG4gICAgfSk7XG4gIH07XG5cbiAgLy8gSGFuZGxlIHBsYXlpbmcgYW4gYWN0aW9uIGNhcmRcbiAgY29uc3QgaGFuZGxlUGxheUFjdGlvbkNhcmQgPSAoY2FyZEluZGV4OiBudW1iZXIpID0+IHtcbiAgICBpZiAoIWdhbWVTdGF0ZSB8fCBnYW1lU3RhdGUuY2FyZHNQbGF5ZWQgPj0gMyB8fCAhZ2FtZVN0YXRlLmhhc0RyYXduQ2FyZHMpXG4gICAgICByZXR1cm47XG5cbiAgICBjb25zdCBwbGF5ZXIgPSBnYW1lU3RhdGUucGxheWVyc1tnYW1lU3RhdGUuY3VycmVudFBsYXllckluZGV4XTtcbiAgICBjb25zdCBjYXJkID0gcGxheWVyLmhhbmRbY2FyZEluZGV4XTtcblxuICAgIGlmIChjYXJkLnR5cGUgIT09IFwiYWN0aW9uXCIpIHtcbiAgICAgIGFsZXJ0KFwiVGhpcyBpcyBub3QgYW4gYWN0aW9uIGNhcmQuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNldCB0aGUgYWN0aW9uIGNhcmQgaW4gcHJvZ3Jlc3NcbiAgICBzZXRBY3Rpb25DYXJkSW5Qcm9ncmVzcyh7XG4gICAgICBjYXJkLFxuICAgICAgaW5kZXg6IGNhcmRJbmRleCxcbiAgICB9KTtcbiAgfTtcblxuICAvLyBIYW5kbGUgY29tcGxldGluZyBhbiBhY3Rpb24gY2FyZFxuICBjb25zdCBoYW5kbGVBY3Rpb25DYXJkQ29tcGxldGUgPSAoXG4gICAgdGFyZ2V0UGxheWVySW5kZXg/OiBudW1iZXIsXG4gICAgYW1vdW50PzogbnVtYmVyXG4gICkgPT4ge1xuICAgIGlmICghZ2FtZVN0YXRlIHx8ICFhY3Rpb25DYXJkSW5Qcm9ncmVzcykgcmV0dXJuO1xuXG4gICAgY29uc3QgY3VycmVudFBsYXllckluZGV4ID0gZ2FtZVN0YXRlLmN1cnJlbnRQbGF5ZXJJbmRleDtcbiAgICBjb25zdCBjYXJkID0gYWN0aW9uQ2FyZEluUHJvZ3Jlc3MuY2FyZDtcbiAgICBjb25zdCBjYXJkSW5kZXggPSBhY3Rpb25DYXJkSW5Qcm9ncmVzcy5pbmRleDtcblxuICAgIGNvbnN0IHVwZGF0ZWRQbGF5ZXJzID0gWy4uLmdhbWVTdGF0ZS5wbGF5ZXJzXTtcbiAgICBjb25zdCB1cGRhdGVkUGxheWVyID0geyAuLi51cGRhdGVkUGxheWVyc1tjdXJyZW50UGxheWVySW5kZXhdIH07XG5cbiAgICAvLyBSZW1vdmUgY2FyZCBmcm9tIGhhbmRcbiAgICB1cGRhdGVkUGxheWVyLmhhbmQgPSBbLi4udXBkYXRlZFBsYXllci5oYW5kXTtcbiAgICB1cGRhdGVkUGxheWVyLmhhbmQuc3BsaWNlKGNhcmRJbmRleCwgMSk7XG5cbiAgICAvLyBBZGQgY2FyZCB0byBhY3Rpb24gYXJlYVxuICAgIGNvbnN0IHVwZGF0ZWRBY3Rpb25DYXJkcyA9IFsuLi5nYW1lU3RhdGUuYWN0aW9uQ2FyZHMsIGNhcmRdO1xuXG4gICAgLy8gUHJvY2VzcyB0aGUgYWN0aW9uIGJhc2VkIG9uIHRoZSBjYXJkIHR5cGVcbiAgICBsZXQgbWVzc2FnZSA9IGBQbGF5ZWQgJHtjYXJkLm5hbWV9YDtcblxuICAgIHN3aXRjaCAoY2FyZC5hY3Rpb25UeXBlKSB7XG4gICAgICBjYXNlIFwiZGVidC1jb2xsZWN0b3JcIjpcbiAgICAgICAgaWYgKHRhcmdldFBsYXllckluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zdCB0YXJnZXRQbGF5ZXIgPSB7IC4uLnVwZGF0ZWRQbGF5ZXJzW3RhcmdldFBsYXllckluZGV4XSB9O1xuICAgICAgICAgIGNvbnN0IGFtb3VudFRvUGF5ID0gTWF0aC5taW4oXG4gICAgICAgICAgICA1LFxuICAgICAgICAgICAgY2FsY3VsYXRlQmFua1RvdGFsKHRhcmdldFBsYXllci5iYW5rKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoYW1vdW50VG9QYXkgPiAwKSB7XG4gICAgICAgICAgICAvLyBGaW5kIGNhcmRzIHRvIHBheSB3aXRoIChzaW1wbGUgaW1wbGVtZW50YXRpb24gLSBqdXN0IHRha2UgdGhlIGZpcnN0IGNhcmRzIHRoYXQgYWRkIHVwIHRvIHRoZSBhbW91bnQpXG4gICAgICAgICAgICBjb25zdCBjYXJkc1RvUGF5OiBDYXJkW10gPSBbXTtcbiAgICAgICAgICAgIGxldCB0b3RhbFBhaWQgPSAwO1xuXG4gICAgICAgICAgICAvLyBTb3J0IGJhbmsgY2FyZHMgYnkgdmFsdWUgKGFzY2VuZGluZykgdG8gb3B0aW1pemUgcGF5bWVudFxuICAgICAgICAgICAgY29uc3Qgc29ydGVkQmFuayA9IFsuLi50YXJnZXRQbGF5ZXIuYmFua10uc29ydChcbiAgICAgICAgICAgICAgKGEsIGIpID0+IGEudmFsdWUgLSBiLnZhbHVlXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGJhbmtDYXJkIG9mIHNvcnRlZEJhbmspIHtcbiAgICAgICAgICAgICAgaWYgKHRvdGFsUGFpZCA8IGFtb3VudFRvUGF5KSB7XG4gICAgICAgICAgICAgICAgY2FyZHNUb1BheS5wdXNoKGJhbmtDYXJkKTtcbiAgICAgICAgICAgICAgICB0b3RhbFBhaWQgKz0gYmFua0NhcmQudmFsdWU7XG5cbiAgICAgICAgICAgICAgICBpZiAodG90YWxQYWlkID49IGFtb3VudFRvUGF5KSB7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVtb3ZlIGNhcmRzIGZyb20gdGFyZ2V0IHBsYXllcidzIGJhbmtcbiAgICAgICAgICAgIHRhcmdldFBsYXllci5iYW5rID0gdGFyZ2V0UGxheWVyLmJhbmsuZmlsdGVyKFxuICAgICAgICAgICAgICAoY2FyZCkgPT4gIWNhcmRzVG9QYXkuc29tZSgocGF5Q2FyZCkgPT4gcGF5Q2FyZC5pZCA9PT0gY2FyZC5pZClcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIC8vIEFkZCBjYXJkcyB0byBjdXJyZW50IHBsYXllcidzIGJhbmtcbiAgICAgICAgICAgIHVwZGF0ZWRQbGF5ZXIuYmFuayA9IFsuLi51cGRhdGVkUGxheWVyLmJhbmssIC4uLmNhcmRzVG9QYXldO1xuXG4gICAgICAgICAgICB1cGRhdGVkUGxheWVyc1t0YXJnZXRQbGF5ZXJJbmRleF0gPSB0YXJnZXRQbGF5ZXI7XG4gICAgICAgICAgICBtZXNzYWdlID0gYENvbGxlY3RlZCAkJHt0b3RhbFBhaWR9TSBmcm9tIFBsYXllciAke1xuICAgICAgICAgICAgICB0YXJnZXRQbGF5ZXJJbmRleCArIDFcbiAgICAgICAgICAgIH1gO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gYFBsYXllciAke3RhcmdldFBsYXllckluZGV4ICsgMX0gaGFzIG5vIG1vbmV5IHRvIHBheWA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiYmlydGhkYXlcIjpcbiAgICAgICAgbGV0IHRvdGFsQ29sbGVjdGVkID0gMDtcblxuICAgICAgICAvLyBDb2xsZWN0IDJNIGZyb20gZWFjaCBwbGF5ZXJcbiAgICAgICAgdXBkYXRlZFBsYXllcnMuZm9yRWFjaCgocGxheWVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gY3VycmVudFBsYXllckluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBwbGF5ZXJUb1VwZGF0ZSA9IHsgLi4ucGxheWVyIH07XG4gICAgICAgICAgICBjb25zdCBhbW91bnRUb1BheSA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAyLFxuICAgICAgICAgICAgICBjYWxjdWxhdGVCYW5rVG90YWwocGxheWVyVG9VcGRhdGUuYmFuaylcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChhbW91bnRUb1BheSA+IDApIHtcbiAgICAgICAgICAgICAgLy8gRmluZCBjYXJkcyB0byBwYXkgd2l0aFxuICAgICAgICAgICAgICBjb25zdCBjYXJkc1RvUGF5OiBDYXJkW10gPSBbXTtcbiAgICAgICAgICAgICAgbGV0IHRvdGFsUGFpZCA9IDA7XG5cbiAgICAgICAgICAgICAgLy8gU29ydCBiYW5rIGNhcmRzIGJ5IHZhbHVlIChhc2NlbmRpbmcpIHRvIG9wdGltaXplIHBheW1lbnRcbiAgICAgICAgICAgICAgY29uc3Qgc29ydGVkQmFuayA9IFsuLi5wbGF5ZXJUb1VwZGF0ZS5iYW5rXS5zb3J0KFxuICAgICAgICAgICAgICAgIChhLCBiKSA9PiBhLnZhbHVlIC0gYi52YWx1ZVxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIGZvciAoY29uc3QgYmFua0NhcmQgb2Ygc29ydGVkQmFuaykge1xuICAgICAgICAgICAgICAgIGlmICh0b3RhbFBhaWQgPCBhbW91bnRUb1BheSkge1xuICAgICAgICAgICAgICAgICAgY2FyZHNUb1BheS5wdXNoKGJhbmtDYXJkKTtcbiAgICAgICAgICAgICAgICAgIHRvdGFsUGFpZCArPSBiYW5rQ2FyZC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgaWYgKHRvdGFsUGFpZCA+PSBhbW91bnRUb1BheSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBSZW1vdmUgY2FyZHMgZnJvbSBwbGF5ZXIncyBiYW5rXG4gICAgICAgICAgICAgIHBsYXllclRvVXBkYXRlLmJhbmsgPSBwbGF5ZXJUb1VwZGF0ZS5iYW5rLmZpbHRlcihcbiAgICAgICAgICAgICAgICAoY2FyZCkgPT4gIWNhcmRzVG9QYXkuc29tZSgocGF5Q2FyZCkgPT4gcGF5Q2FyZC5pZCA9PT0gY2FyZC5pZClcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAvLyBBZGQgY2FyZHMgdG8gY3VycmVudCBwbGF5ZXIncyBiYW5rXG4gICAgICAgICAgICAgIHVwZGF0ZWRQbGF5ZXIuYmFuayA9IFsuLi51cGRhdGVkUGxheWVyLmJhbmssIC4uLmNhcmRzVG9QYXldO1xuXG4gICAgICAgICAgICAgIHVwZGF0ZWRQbGF5ZXJzW2luZGV4XSA9IHBsYXllclRvVXBkYXRlO1xuICAgICAgICAgICAgICB0b3RhbENvbGxlY3RlZCArPSB0b3RhbFBhaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBtZXNzYWdlID0gYENvbGxlY3RlZCAkJHt0b3RhbENvbGxlY3RlZH1NIGZvciB5b3VyIGJpcnRoZGF5YDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJwYXNzLWdvXCI6XG4gICAgICAgIC8vIERyYXcgMiBtb3JlIGNhcmRzXG4gICAgICAgIGNvbnN0IHsgdXBkYXRlZFBsYXllcjogcGxheWVyV2l0aEV4dHJhQ2FyZHMsIHVwZGF0ZWREZWNrIH0gPSBkcmF3Q2FyZHMoXG4gICAgICAgICAgdXBkYXRlZFBsYXllcixcbiAgICAgICAgICBnYW1lU3RhdGUuZGVjayxcbiAgICAgICAgICAyXG4gICAgICAgICk7XG5cbiAgICAgICAgdXBkYXRlZFBsYXllci5oYW5kID0gcGxheWVyV2l0aEV4dHJhQ2FyZHMuaGFuZDtcblxuICAgICAgICBtZXNzYWdlID0gXCJEcmV3IDIgbW9yZSBjYXJkc1wiO1xuXG4gICAgICAgIHNldEdhbWVTdGF0ZSh7XG4gICAgICAgICAgLi4uZ2FtZVN0YXRlLFxuICAgICAgICAgIHBsYXllcnM6IHVwZGF0ZWRQbGF5ZXJzLFxuICAgICAgICAgIGRlY2s6IHVwZGF0ZWREZWNrLFxuICAgICAgICAgIGNhcmRzUGxheWVkOiBnYW1lU3RhdGUuY2FyZHNQbGF5ZWQgKyAxLFxuICAgICAgICAgIGFjdGlvbkNhcmRzOiB1cGRhdGVkQWN0aW9uQ2FyZHMsXG4gICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwicmVudFwiOlxuICAgICAgICBpZiAodGFyZ2V0UGxheWVySW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIENhbGN1bGF0ZSByZW50IGJhc2VkIG9uIHByb3BlcnRpZXMgb2YgdGhlIHNwZWNpZmllZCBjb2xvcnNcbiAgICAgICAgICBjb25zdCByZW50Q29sb3JzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgIGlmIChjYXJkLmNvbG9yKSByZW50Q29sb3JzLnB1c2goY2FyZC5jb2xvcik7XG4gICAgICAgICAgaWYgKGNhcmQuc2Vjb25kYXJ5Q29sb3IpIHJlbnRDb2xvcnMucHVzaChjYXJkLnNlY29uZGFyeUNvbG9yKTtcblxuICAgICAgICAgIC8vIEZpbmQgcHJvcGVydHkgc2V0cyBvZiB0aGUgc3BlY2lmaWVkIGNvbG9yc1xuICAgICAgICAgIGNvbnN0IHJlbGV2YW50U2V0cyA9IHVwZGF0ZWRQbGF5ZXIucHJvcGVydGllcy5maWx0ZXIoKHNldCkgPT5cbiAgICAgICAgICAgIHJlbnRDb2xvcnMuaW5jbHVkZXMoc2V0LmNvbG9yKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyBDYWxjdWxhdGUgcmVudCBhbW91bnRcbiAgICAgICAgICBsZXQgcmVudEFtb3VudCA9IDA7XG4gICAgICAgICAgcmVsZXZhbnRTZXRzLmZvckVhY2goKHNldCkgPT4ge1xuICAgICAgICAgICAgcmVudEFtb3VudCArPSBjYWxjdWxhdGVSZW50QW1vdW50KHNldCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAocmVudEFtb3VudCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldFBsYXllciA9IHsgLi4udXBkYXRlZFBsYXllcnNbdGFyZ2V0UGxheWVySW5kZXhdIH07XG4gICAgICAgICAgICBjb25zdCBhbW91bnRUb1BheSA9IE1hdGgubWluKFxuICAgICAgICAgICAgICByZW50QW1vdW50LFxuICAgICAgICAgICAgICBjYWxjdWxhdGVCYW5rVG90YWwodGFyZ2V0UGxheWVyLmJhbmspXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoYW1vdW50VG9QYXkgPiAwKSB7XG4gICAgICAgICAgICAgIC8vIEZpbmQgY2FyZHMgdG8gcGF5IHdpdGhcbiAgICAgICAgICAgICAgY29uc3QgY2FyZHNUb1BheTogQ2FyZFtdID0gW107XG4gICAgICAgICAgICAgIGxldCB0b3RhbFBhaWQgPSAwO1xuXG4gICAgICAgICAgICAgIC8vIFNvcnQgYmFuayBjYXJkcyBieSB2YWx1ZSAoYXNjZW5kaW5nKSB0byBvcHRpbWl6ZSBwYXltZW50XG4gICAgICAgICAgICAgIGNvbnN0IHNvcnRlZEJhbmsgPSBbLi4udGFyZ2V0UGxheWVyLmJhbmtdLnNvcnQoXG4gICAgICAgICAgICAgICAgKGEsIGIpID0+IGEudmFsdWUgLSBiLnZhbHVlXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgZm9yIChjb25zdCBiYW5rQ2FyZCBvZiBzb3J0ZWRCYW5rKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvdGFsUGFpZCA8IGFtb3VudFRvUGF5KSB7XG4gICAgICAgICAgICAgICAgICBjYXJkc1RvUGF5LnB1c2goYmFua0NhcmQpO1xuICAgICAgICAgICAgICAgICAgdG90YWxQYWlkICs9IGJhbmtDYXJkLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICBpZiAodG90YWxQYWlkID49IGFtb3VudFRvUGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIFJlbW92ZSBjYXJkcyBmcm9tIHRhcmdldCBwbGF5ZXIncyBiYW5rXG4gICAgICAgICAgICAgIHRhcmdldFBsYXllci5iYW5rID0gdGFyZ2V0UGxheWVyLmJhbmsuZmlsdGVyKFxuICAgICAgICAgICAgICAgIChjYXJkKSA9PiAhY2FyZHNUb1BheS5zb21lKChwYXlDYXJkKSA9PiBwYXlDYXJkLmlkID09PSBjYXJkLmlkKVxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIC8vIEFkZCBjYXJkcyB0byBjdXJyZW50IHBsYXllcidzIGJhbmtcbiAgICAgICAgICAgICAgdXBkYXRlZFBsYXllci5iYW5rID0gWy4uLnVwZGF0ZWRQbGF5ZXIuYmFuaywgLi4uY2FyZHNUb1BheV07XG5cbiAgICAgICAgICAgICAgdXBkYXRlZFBsYXllcnNbdGFyZ2V0UGxheWVySW5kZXhdID0gdGFyZ2V0UGxheWVyO1xuICAgICAgICAgICAgICBtZXNzYWdlID0gYENvbGxlY3RlZCAkJHt0b3RhbFBhaWR9TSByZW50IGZyb20gUGxheWVyICR7XG4gICAgICAgICAgICAgICAgdGFyZ2V0UGxheWVySW5kZXggKyAxXG4gICAgICAgICAgICAgIH1gO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWVzc2FnZSA9IGBQbGF5ZXIgJHtcbiAgICAgICAgICAgICAgICB0YXJnZXRQbGF5ZXJJbmRleCArIDFcbiAgICAgICAgICAgICAgfSBoYXMgbm8gbW9uZXkgdG8gcGF5IHJlbnRgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gYE5vIHByb3BlcnRpZXMgb2YgdGhlIHNwZWNpZmllZCBjb2xvcnMgdG8gY29sbGVjdCByZW50IGZvcmA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiZGVhbC1icmVha2VyXCI6XG4gICAgICAgIGlmICh0YXJnZXRQbGF5ZXJJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gU2hvdyBwcm9wZXJ0eSBzZWxlY3Rpb24gbW9kYWwgZm9yIGNvbXBsZXRlIHNldHNcbiAgICAgICAgICBzZXRQcm9wZXJ0eVNlbGVjdGlvblR5cGUoXCJkZWFsLWJyZWFrZXJcIik7XG4gICAgICAgICAgc2V0VGFyZ2V0UGxheWVyRm9yUHJvcGVydHlTZWxlY3Rpb24odGFyZ2V0UGxheWVySW5kZXgpO1xuICAgICAgICAgIHNldFNob3dQcm9wZXJ0eVNlbGVjdGlvbk1vZGFsKHRydWUpO1xuXG4gICAgICAgICAgLy8gVGhlIHJlc3Qgb2YgdGhlIGxvZ2ljIHdpbGwgYmUgaGFuZGxlZCB3aGVuIHRoZSBwcm9wZXJ0eSBpcyBzZWxlY3RlZFxuICAgICAgICAgIHNldEFjdGlvbkNhcmRJblByb2dyZXNzKG51bGwpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInNseS1kZWFsXCI6XG4gICAgICAgIGlmICh0YXJnZXRQbGF5ZXJJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gU2hvdyBwcm9wZXJ0eSBzZWxlY3Rpb24gbW9kYWwgZm9yIGluY29tcGxldGUgc2V0c1xuICAgICAgICAgIHNldFByb3BlcnR5U2VsZWN0aW9uVHlwZShcInNseS1kZWFsXCIpO1xuICAgICAgICAgIHNldFRhcmdldFBsYXllckZvclByb3BlcnR5U2VsZWN0aW9uKHRhcmdldFBsYXllckluZGV4KTtcbiAgICAgICAgICBzZXRTaG93UHJvcGVydHlTZWxlY3Rpb25Nb2RhbCh0cnVlKTtcblxuICAgICAgICAgIC8vIFRoZSByZXN0IG9mIHRoZSBsb2dpYyB3aWxsIGJlIGhhbmRsZWQgd2hlbiB0aGUgcHJvcGVydHkgaXMgc2VsZWN0ZWRcbiAgICAgICAgICBzZXRBY3Rpb25DYXJkSW5Qcm9ncmVzcyhudWxsKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJmb3JjZWQtZGVhbFwiOlxuICAgICAgICBpZiAodGFyZ2V0UGxheWVySW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIFNob3cgcHJvcGVydHkgc2VsZWN0aW9uIG1vZGFsIGZvciBpbmNvbXBsZXRlIHNldHNcbiAgICAgICAgICBzZXRQcm9wZXJ0eVNlbGVjdGlvblR5cGUoXCJmb3JjZWQtZGVhbFwiKTtcbiAgICAgICAgICBzZXRUYXJnZXRQbGF5ZXJGb3JQcm9wZXJ0eVNlbGVjdGlvbih0YXJnZXRQbGF5ZXJJbmRleCk7XG4gICAgICAgICAgc2V0U2hvd1Byb3BlcnR5U2VsZWN0aW9uTW9kYWwodHJ1ZSk7XG5cbiAgICAgICAgICAvLyBUaGUgcmVzdCBvZiB0aGUgbG9naWMgd2lsbCBiZSBoYW5kbGVkIHdoZW4gdGhlIHByb3BlcnR5IGlzIHNlbGVjdGVkXG4gICAgICAgICAgc2V0QWN0aW9uQ2FyZEluUHJvZ3Jlc3MobnVsbCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHVwZGF0ZWRQbGF5ZXJzW2N1cnJlbnRQbGF5ZXJJbmRleF0gPSB1cGRhdGVkUGxheWVyO1xuXG4gICAgc2V0R2FtZVN0YXRlKHtcbiAgICAgIC4uLmdhbWVTdGF0ZSxcbiAgICAgIHBsYXllcnM6IHVwZGF0ZWRQbGF5ZXJzLFxuICAgICAgY2FyZHNQbGF5ZWQ6IGdhbWVTdGF0ZS5jYXJkc1BsYXllZCArIDEsXG4gICAgICBhY3Rpb25DYXJkczogdXBkYXRlZEFjdGlvbkNhcmRzLFxuICAgICAgbWVzc2FnZSxcbiAgICB9KTtcblxuICAgIHNldEFjdGlvbkNhcmRJblByb2dyZXNzKG51bGwpO1xuICB9O1xuXG4gIC8vIEhhbmRsZSBwcm9wZXJ0eSBzZWxlY3Rpb24gZm9yIGFjdGlvbiBjYXJkc1xuICBjb25zdCBoYW5kbGVQcm9wZXJ0eVNlbGVjdGlvbiA9IChzZXRJbmRleDogbnVtYmVyLCBjYXJkSW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGlmICghZ2FtZVN0YXRlIHx8ICF0YXJnZXRQbGF5ZXJGb3JQcm9wZXJ0eVNlbGVjdGlvbikgcmV0dXJuO1xuXG4gICAgY29uc3QgY3VycmVudFBsYXllckluZGV4ID0gZ2FtZVN0YXRlLmN1cnJlbnRQbGF5ZXJJbmRleDtcbiAgICBjb25zdCB0YXJnZXRQbGF5ZXJJbmRleCA9IHRhcmdldFBsYXllckZvclByb3BlcnR5U2VsZWN0aW9uO1xuXG4gICAgY29uc3QgdXBkYXRlZFBsYXllcnMgPSBbLi4uZ2FtZVN0YXRlLnBsYXllcnNdO1xuICAgIGNvbnN0IGN1cnJlbnRQbGF5ZXIgPSB7IC4uLnVwZGF0ZWRQbGF5ZXJzW2N1cnJlbnRQbGF5ZXJJbmRleF0gfTtcbiAgICBjb25zdCB0YXJnZXRQbGF5ZXIgPSB7IC4uLnVwZGF0ZWRQbGF5ZXJzW3RhcmdldFBsYXllckluZGV4XSB9O1xuXG4gICAgbGV0IG1lc3NhZ2UgPSBcIlwiO1xuXG4gICAgc3dpdGNoIChwcm9wZXJ0eVNlbGVjdGlvblR5cGUpIHtcbiAgICAgIGNhc2UgXCJkZWFsLWJyZWFrZXJcIjpcbiAgICAgICAgLy8gU3RlYWwgYSBjb21wbGV0ZSBwcm9wZXJ0eSBzZXRcbiAgICAgICAgaWYgKHNldEluZGV4IDwgdGFyZ2V0UGxheWVyLnByb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3Qgc3RvbGVuU2V0ID0geyAuLi50YXJnZXRQbGF5ZXIucHJvcGVydGllc1tzZXRJbmRleF0gfTtcblxuICAgICAgICAgIC8vIFJlbW92ZSB0aGUgc2V0IGZyb20gdGFyZ2V0IHBsYXllclxuICAgICAgICAgIHRhcmdldFBsYXllci5wcm9wZXJ0aWVzID0gdGFyZ2V0UGxheWVyLnByb3BlcnRpZXMuZmlsdGVyKFxuICAgICAgICAgICAgKF8sIGkpID0+IGkgIT09IHNldEluZGV4XG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIEFkZCB0aGUgc2V0IHRvIGN1cnJlbnQgcGxheWVyXG4gICAgICAgICAgY3VycmVudFBsYXllci5wcm9wZXJ0aWVzID0gWy4uLmN1cnJlbnRQbGF5ZXIucHJvcGVydGllcywgc3RvbGVuU2V0XTtcblxuICAgICAgICAgIG1lc3NhZ2UgPSBgU3RvbGUgJHtzdG9sZW5TZXQuY29sb3J9IHByb3BlcnR5IHNldCBmcm9tIFBsYXllciAke1xuICAgICAgICAgICAgdGFyZ2V0UGxheWVySW5kZXggKyAxXG4gICAgICAgICAgfWA7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJzbHktZGVhbFwiOlxuICAgICAgICAvLyBTdGVhbCBhIHNpbmdsZSBwcm9wZXJ0eSBjYXJkXG4gICAgICAgIGlmIChcbiAgICAgICAgICBzZXRJbmRleCA8IHRhcmdldFBsYXllci5wcm9wZXJ0aWVzLmxlbmd0aCAmJlxuICAgICAgICAgIGNhcmRJbmRleCA8IHRhcmdldFBsYXllci5wcm9wZXJ0aWVzW3NldEluZGV4XS5jYXJkcy5sZW5ndGhcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3Qgc3RvbGVuQ2FyZCA9IHRhcmdldFBsYXllci5wcm9wZXJ0aWVzW3NldEluZGV4XS5jYXJkc1tjYXJkSW5kZXhdO1xuXG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBjYXJkIGZyb20gdGFyZ2V0IHBsYXllcidzIHNldFxuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRUYXJnZXRQcm9wZXJ0aWVzID0gWy4uLnRhcmdldFBsYXllci5wcm9wZXJ0aWVzXTtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkU2V0ID0geyAuLi51cGRhdGVkVGFyZ2V0UHJvcGVydGllc1tzZXRJbmRleF0gfTtcbiAgICAgICAgICB1cGRhdGVkU2V0LmNhcmRzID0gdXBkYXRlZFNldC5jYXJkcy5maWx0ZXIoKF8sIGkpID0+IGkgIT09IGNhcmRJbmRleCk7XG5cbiAgICAgICAgICAvLyBJZiB0aGUgc2V0IGlzIG5vdyBlbXB0eSwgcmVtb3ZlIGl0XG4gICAgICAgICAgaWYgKHVwZGF0ZWRTZXQuY2FyZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB1cGRhdGVkVGFyZ2V0UHJvcGVydGllcy5zcGxpY2Uoc2V0SW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHNldCdzIGNvbXBsZXRpb24gc3RhdHVzXG4gICAgICAgICAgICB1cGRhdGVkU2V0LmlzQ29tcGxldGUgPVxuICAgICAgICAgICAgICB1cGRhdGVkU2V0LmNhcmRzLmxlbmd0aCA+PSB1cGRhdGVkU2V0LnJlcXVpcmVkQ2FyZHM7XG4gICAgICAgICAgICB1cGRhdGVkVGFyZ2V0UHJvcGVydGllc1tzZXRJbmRleF0gPSB1cGRhdGVkU2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRhcmdldFBsYXllci5wcm9wZXJ0aWVzID0gdXBkYXRlZFRhcmdldFByb3BlcnRpZXM7XG5cbiAgICAgICAgICAvLyBBZGQgdGhlIGNhcmQgdG8gY3VycmVudCBwbGF5ZXIncyBwcm9wZXJ0aWVzXG4gICAgICAgICAgY29uc3QgZXhpc3RpbmdTZXRJbmRleCA9IGN1cnJlbnRQbGF5ZXIucHJvcGVydGllcy5maW5kSW5kZXgoXG4gICAgICAgICAgICAoc2V0KSA9PiBzZXQuY29sb3IgPT09IHN0b2xlbkNhcmQuY29sb3JcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKGV4aXN0aW5nU2V0SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgLy8gQWRkIHRvIGV4aXN0aW5nIHNldFxuICAgICAgICAgICAgY29uc3QgdXBkYXRlZEN1cnJlbnRQcm9wZXJ0aWVzID0gWy4uLmN1cnJlbnRQbGF5ZXIucHJvcGVydGllc107XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkQ3VycmVudFNldCA9IHtcbiAgICAgICAgICAgICAgLi4udXBkYXRlZEN1cnJlbnRQcm9wZXJ0aWVzW2V4aXN0aW5nU2V0SW5kZXhdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHVwZGF0ZWRDdXJyZW50U2V0LmNhcmRzID0gWy4uLnVwZGF0ZWRDdXJyZW50U2V0LmNhcmRzLCBzdG9sZW5DYXJkXTtcbiAgICAgICAgICAgIHVwZGF0ZWRDdXJyZW50U2V0LmlzQ29tcGxldGUgPVxuICAgICAgICAgICAgICB1cGRhdGVkQ3VycmVudFNldC5jYXJkcy5sZW5ndGggPj0gdXBkYXRlZEN1cnJlbnRTZXQucmVxdWlyZWRDYXJkcztcbiAgICAgICAgICAgIHVwZGF0ZWRDdXJyZW50UHJvcGVydGllc1tleGlzdGluZ1NldEluZGV4XSA9IHVwZGF0ZWRDdXJyZW50U2V0O1xuICAgICAgICAgICAgY3VycmVudFBsYXllci5wcm9wZXJ0aWVzID0gdXBkYXRlZEN1cnJlbnRQcm9wZXJ0aWVzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgbmV3IHNldFxuICAgICAgICAgICAgY3VycmVudFBsYXllci5wcm9wZXJ0aWVzID0gW1xuICAgICAgICAgICAgICAuLi5jdXJyZW50UGxheWVyLnByb3BlcnRpZXMsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogc3RvbGVuQ2FyZC5jb2xvciB8fCBcIlwiLFxuICAgICAgICAgICAgICAgIGNhcmRzOiBbc3RvbGVuQ2FyZF0sXG4gICAgICAgICAgICAgICAgaXNDb21wbGV0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgaG91c2VzOiAwLFxuICAgICAgICAgICAgICAgIGhvdGVsczogMCxcbiAgICAgICAgICAgICAgICByZXF1aXJlZENhcmRzOiBnZXRSZXF1aXJlZENhcmRzRm9yQ29sb3Ioc3RvbGVuQ2FyZC5jb2xvciB8fCBcIlwiKSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVzc2FnZSA9IGBTdG9sZSAke3N0b2xlbkNhcmQubmFtZX0gZnJvbSBQbGF5ZXIgJHtcbiAgICAgICAgICAgIHRhcmdldFBsYXllckluZGV4ICsgMVxuICAgICAgICAgIH1gO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiZm9yY2VkLWRlYWxcIjpcbiAgICAgICAgLy8gRmlyc3Qgc3RlcDogU2VsZWN0IHRoZSB0YXJnZXQgcGxheWVyJ3MgcHJvcGVydHlcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHNldEluZGV4IDwgdGFyZ2V0UGxheWVyLnByb3BlcnRpZXMubGVuZ3RoICYmXG4gICAgICAgICAgY2FyZEluZGV4IDwgdGFyZ2V0UGxheWVyLnByb3BlcnRpZXNbc2V0SW5kZXhdLmNhcmRzLmxlbmd0aFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCB0YXJnZXRDYXJkID0gdGFyZ2V0UGxheWVyLnByb3BlcnRpZXNbc2V0SW5kZXhdLmNhcmRzW2NhcmRJbmRleF07XG5cbiAgICAgICAgICAvLyBTdG9yZSB0aGUgc2VsZWN0ZWQgY2FyZCBpbmZvXG4gICAgICAgICAgc2V0Rm9yY2VkRGVhbFRhcmdldENhcmQoe1xuICAgICAgICAgICAgcGxheWVySW5kZXg6IHRhcmdldFBsYXllckluZGV4LFxuICAgICAgICAgICAgc2V0SW5kZXgsXG4gICAgICAgICAgICBjYXJkSW5kZXgsXG4gICAgICAgICAgICBjYXJkOiB0YXJnZXRDYXJkLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gU2hvdyBhIG1lc3NhZ2UgdG8gc2VsZWN0IHlvdXIgb3duIHByb3BlcnR5XG4gICAgICAgICAgc2V0R2FtZVN0YXRlKHtcbiAgICAgICAgICAgIC4uLmdhbWVTdGF0ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBTZWxlY3RlZCAke3RhcmdldENhcmQubmFtZX0uIE5vdyBzZWxlY3Qgb25lIG9mIHlvdXIgcHJvcGVydGllcyB0byBzd2FwLmAsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBDbG9zZSB0aGUgY3VycmVudCBtb2RhbFxuICAgICAgICAgIHNldFNob3dQcm9wZXJ0eVNlbGVjdGlvbk1vZGFsKGZhbHNlKTtcblxuICAgICAgICAgIC8vIE9wZW4gYSBuZXcgbW9kYWwgdG8gc2VsZWN0IHlvdXIgb3duIHByb3BlcnR5XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBzZXRQcm9wZXJ0eVNlbGVjdGlvblR5cGUoXCJmb3JjZWQtZGVhbC1vd25cIik7XG4gICAgICAgICAgICBzZXRTaG93UHJvcGVydHlTZWxlY3Rpb25Nb2RhbCh0cnVlKTtcbiAgICAgICAgICB9LCAxMDApO1xuXG4gICAgICAgICAgcmV0dXJuOyAvLyBFeGl0IHRoZSBmdW5jdGlvbiBlYXJseVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiZm9yY2VkLWRlYWwtb3duXCI6XG4gICAgICAgIC8vIFNlY29uZCBzdGVwOiBTZWxlY3QgeW91ciBvd24gcHJvcGVydHkgdG8gc3dhcFxuICAgICAgICBpZiAoXG4gICAgICAgICAgZm9yY2VkRGVhbFRhcmdldENhcmQgIT09IG51bGwgJiZcbiAgICAgICAgICBzZXRJbmRleCA8IGN1cnJlbnRQbGF5ZXIucHJvcGVydGllcy5sZW5ndGggJiZcbiAgICAgICAgICBjYXJkSW5kZXggPCBjdXJyZW50UGxheWVyLnByb3BlcnRpZXNbc2V0SW5kZXhdLmNhcmRzLmxlbmd0aFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBvd25DYXJkID0gY3VycmVudFBsYXllci5wcm9wZXJ0aWVzW3NldEluZGV4XS5jYXJkc1tjYXJkSW5kZXhdO1xuICAgICAgICAgIGNvbnN0IHRhcmdldFBsYXllckluZGV4ID0gZm9yY2VkRGVhbFRhcmdldENhcmQucGxheWVySW5kZXg7XG4gICAgICAgICAgY29uc3QgdGFyZ2V0UGxheWVyID0geyAuLi51cGRhdGVkUGxheWVyc1t0YXJnZXRQbGF5ZXJJbmRleF0gfTtcblxuICAgICAgICAgIC8vIFJlbW92ZSB0aGUgY2FyZCBmcm9tIHRhcmdldCBwbGF5ZXIncyBzZXRcbiAgICAgICAgICBjb25zdCB1cGRhdGVkVGFyZ2V0UHJvcGVydGllcyA9IFsuLi50YXJnZXRQbGF5ZXIucHJvcGVydGllc107XG4gICAgICAgICAgY29uc3QgdGFyZ2V0U2V0SW5kZXggPSBmb3JjZWREZWFsVGFyZ2V0Q2FyZC5zZXRJbmRleDtcbiAgICAgICAgICBjb25zdCB0YXJnZXRDYXJkSW5kZXggPSBmb3JjZWREZWFsVGFyZ2V0Q2FyZC5jYXJkSW5kZXg7XG4gICAgICAgICAgY29uc3QgdXBkYXRlZFRhcmdldFNldCA9IHtcbiAgICAgICAgICAgIC4uLnVwZGF0ZWRUYXJnZXRQcm9wZXJ0aWVzW3RhcmdldFNldEluZGV4XSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHVwZGF0ZWRUYXJnZXRTZXQuY2FyZHMgPSBbLi4udXBkYXRlZFRhcmdldFNldC5jYXJkc107XG4gICAgICAgICAgY29uc3QgdGFyZ2V0Q2FyZCA9IHVwZGF0ZWRUYXJnZXRTZXQuY2FyZHNbdGFyZ2V0Q2FyZEluZGV4XTtcbiAgICAgICAgICB1cGRhdGVkVGFyZ2V0U2V0LmNhcmRzLnNwbGljZSh0YXJnZXRDYXJkSW5kZXgsIDEpO1xuXG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBjYXJkIGZyb20gY3VycmVudCBwbGF5ZXIncyBzZXRcbiAgICAgICAgICBjb25zdCB1cGRhdGVkQ3VycmVudFByb3BlcnRpZXMgPSBbLi4uY3VycmVudFBsYXllci5wcm9wZXJ0aWVzXTtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkQ3VycmVudFNldCA9IHsgLi4udXBkYXRlZEN1cnJlbnRQcm9wZXJ0aWVzW3NldEluZGV4XSB9O1xuICAgICAgICAgIHVwZGF0ZWRDdXJyZW50U2V0LmNhcmRzID0gWy4uLnVwZGF0ZWRDdXJyZW50U2V0LmNhcmRzXTtcbiAgICAgICAgICB1cGRhdGVkQ3VycmVudFNldC5jYXJkcy5zcGxpY2UoY2FyZEluZGV4LCAxKTtcblxuICAgICAgICAgIC8vIEFkZCBjdXJyZW50IHBsYXllcidzIGNhcmQgdG8gdGFyZ2V0IHBsYXllcidzIHNldFxuICAgICAgICAgIGlmICh1cGRhdGVkVGFyZ2V0U2V0LmNhcmRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gSWYgc2V0IGlzIGVtcHR5LCByZXBsYWNlIGl0IHdpdGggYSBuZXcgc2V0XG4gICAgICAgICAgICB1cGRhdGVkVGFyZ2V0UHJvcGVydGllc1t0YXJnZXRTZXRJbmRleF0gPSB7XG4gICAgICAgICAgICAgIGNvbG9yOiBvd25DYXJkLmNvbG9yIHx8IFwiXCIsXG4gICAgICAgICAgICAgIGNhcmRzOiBbb3duQ2FyZF0sXG4gICAgICAgICAgICAgIGlzQ29tcGxldGU6IGZhbHNlLFxuICAgICAgICAgICAgICBob3VzZXM6IDAsXG4gICAgICAgICAgICAgIGhvdGVsczogMCxcbiAgICAgICAgICAgICAgcmVxdWlyZWRDYXJkczogZ2V0UmVxdWlyZWRDYXJkc0ZvckNvbG9yKG93bkNhcmQuY29sb3IgfHwgXCJcIiksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBBZGQgdG8gZXhpc3Rpbmcgc2V0IGlmIGNvbG9ycyBtYXRjaFxuICAgICAgICAgICAgaWYgKG93bkNhcmQuY29sb3IgPT09IHVwZGF0ZWRUYXJnZXRTZXQuY29sb3IpIHtcbiAgICAgICAgICAgICAgdXBkYXRlZFRhcmdldFNldC5jYXJkcy5wdXNoKG93bkNhcmQpO1xuICAgICAgICAgICAgICB1cGRhdGVkVGFyZ2V0U2V0LmlzQ29tcGxldGUgPVxuICAgICAgICAgICAgICAgIHVwZGF0ZWRUYXJnZXRTZXQuY2FyZHMubGVuZ3RoID49IHVwZGF0ZWRUYXJnZXRTZXQucmVxdWlyZWRDYXJkcztcbiAgICAgICAgICAgICAgdXBkYXRlZFRhcmdldFByb3BlcnRpZXNbdGFyZ2V0U2V0SW5kZXhdID0gdXBkYXRlZFRhcmdldFNldDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBzZXQgaWYgY29sb3JzIGRvbid0IG1hdGNoXG4gICAgICAgICAgICAgIHVwZGF0ZWRUYXJnZXRQcm9wZXJ0aWVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBvd25DYXJkLmNvbG9yIHx8IFwiXCIsXG4gICAgICAgICAgICAgICAgY2FyZHM6IFtvd25DYXJkXSxcbiAgICAgICAgICAgICAgICBpc0NvbXBsZXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBob3VzZXM6IDAsXG4gICAgICAgICAgICAgICAgaG90ZWxzOiAwLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkQ2FyZHM6IGdldFJlcXVpcmVkQ2FyZHNGb3JDb2xvcihvd25DYXJkLmNvbG9yIHx8IFwiXCIpLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBBZGQgdGFyZ2V0IHBsYXllcidzIGNhcmQgdG8gY3VycmVudCBwbGF5ZXIncyBzZXRcbiAgICAgICAgICBpZiAodXBkYXRlZEN1cnJlbnRTZXQuY2FyZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBJZiBzZXQgaXMgZW1wdHksIHJlcGxhY2UgaXQgd2l0aCBhIG5ldyBzZXRcbiAgICAgICAgICAgIHVwZGF0ZWRDdXJyZW50UHJvcGVydGllc1tzZXRJbmRleF0gPSB7XG4gICAgICAgICAgICAgIGNvbG9yOiB0YXJnZXRDYXJkLmNvbG9yIHx8IFwiXCIsXG4gICAgICAgICAgICAgIGNhcmRzOiBbdGFyZ2V0Q2FyZF0sXG4gICAgICAgICAgICAgIGlzQ29tcGxldGU6IGZhbHNlLFxuICAgICAgICAgICAgICBob3VzZXM6IDAsXG4gICAgICAgICAgICAgIGhvdGVsczogMCxcbiAgICAgICAgICAgICAgcmVxdWlyZWRDYXJkczogZ2V0UmVxdWlyZWRDYXJkc0ZvckNvbG9yKHRhcmdldENhcmQuY29sb3IgfHwgXCJcIiksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBBZGQgdG8gZXhpc3Rpbmcgc2V0IGlmIGNvbG9ycyBtYXRjaFxuICAgICAgICAgICAgaWYgKHRhcmdldENhcmQuY29sb3IgPT09IHVwZGF0ZWRDdXJyZW50U2V0LmNvbG9yKSB7XG4gICAgICAgICAgICAgIHVwZGF0ZWRDdXJyZW50U2V0LmNhcmRzLnB1c2godGFyZ2V0Q2FyZCk7XG4gICAgICAgICAgICAgIHVwZGF0ZWRDdXJyZW50U2V0LmlzQ29tcGxldGUgPVxuICAgICAgICAgICAgICAgIHVwZGF0ZWRDdXJyZW50U2V0LmNhcmRzLmxlbmd0aCA+PVxuICAgICAgICAgICAgICAgIHVwZGF0ZWRDdXJyZW50U2V0LnJlcXVpcmVkQ2FyZHM7XG4gICAgICAgICAgICAgIHVwZGF0ZWRDdXJyZW50UHJvcGVydGllc1tzZXRJbmRleF0gPSB1cGRhdGVkQ3VycmVudFNldDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBzZXQgaWYgY29sb3JzIGRvbid0IG1hdGNoXG4gICAgICAgICAgICAgIHVwZGF0ZWRDdXJyZW50UHJvcGVydGllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdGFyZ2V0Q2FyZC5jb2xvciB8fCBcIlwiLFxuICAgICAgICAgICAgICAgIGNhcmRzOiBbdGFyZ2V0Q2FyZF0sXG4gICAgICAgICAgICAgICAgaXNDb21wbGV0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgaG91c2VzOiAwLFxuICAgICAgICAgICAgICAgIGhvdGVsczogMCxcbiAgICAgICAgICAgICAgICByZXF1aXJlZENhcmRzOiBnZXRSZXF1aXJlZENhcmRzRm9yQ29sb3IodGFyZ2V0Q2FyZC5jb2xvciB8fCBcIlwiKSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSBwcm9wZXJ0aWVzIGFycmF5c1xuICAgICAgICAgIHRhcmdldFBsYXllci5wcm9wZXJ0aWVzID0gdXBkYXRlZFRhcmdldFByb3BlcnRpZXM7XG4gICAgICAgICAgY3VycmVudFBsYXllci5wcm9wZXJ0aWVzID0gdXBkYXRlZEN1cnJlbnRQcm9wZXJ0aWVzO1xuXG4gICAgICAgICAgLy8gVXBkYXRlIHBsYXllcnMgaW4gdGhlIHN0YXRlXG4gICAgICAgICAgdXBkYXRlZFBsYXllcnNbdGFyZ2V0UGxheWVySW5kZXhdID0gdGFyZ2V0UGxheWVyO1xuICAgICAgICAgIHVwZGF0ZWRQbGF5ZXJzW2N1cnJlbnRQbGF5ZXJJbmRleF0gPSBjdXJyZW50UGxheWVyO1xuXG4gICAgICAgICAgbWVzc2FnZSA9IGBTd2FwcGVkICR7b3duQ2FyZC5uYW1lfSBmb3IgJHtcbiAgICAgICAgICAgIHRhcmdldENhcmQubmFtZVxuICAgICAgICAgIH0gd2l0aCBQbGF5ZXIgJHt0YXJnZXRQbGF5ZXJJbmRleCArIDF9YDtcblxuICAgICAgICAgIC8vIFJlc2V0IHRoZSBmb3JjZWQgZGVhbCBzdGF0ZVxuICAgICAgICAgIHNldEZvcmNlZERlYWxUYXJnZXRDYXJkKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBwbGF5ZXJzXG4gICAgdXBkYXRlZFBsYXllcnNbY3VycmVudFBsYXllckluZGV4XSA9IGN1cnJlbnRQbGF5ZXI7XG4gICAgdXBkYXRlZFBsYXllcnNbdGFyZ2V0UGxheWVySW5kZXhdID0gdGFyZ2V0UGxheWVyO1xuXG4gICAgLy8gQWRkIHRoZSBhY3Rpb24gY2FyZCB0byB0aGUgYWN0aW9uIGFyZWFcbiAgICBjb25zdCB1cGRhdGVkQWN0aW9uQ2FyZHMgPSBbLi4uZ2FtZVN0YXRlLmFjdGlvbkNhcmRzXTtcblxuICAgIC8vIE1ha2Ugc3VyZSBhY3Rpb25DYXJkSW5Qcm9ncmVzcyBleGlzdHMgYmVmb3JlIHRyeWluZyB0byB1c2UgaXRcbiAgICBpZiAoYWN0aW9uQ2FyZEluUHJvZ3Jlc3MpIHtcbiAgICAgIC8vIEFkZCB0aGUgY2FyZCB0byB0aGUgYWN0aW9uIGFyZWFcbiAgICAgIHVwZGF0ZWRBY3Rpb25DYXJkcy5wdXNoKGFjdGlvbkNhcmRJblByb2dyZXNzLmNhcmQpO1xuXG4gICAgICAvLyBSZW1vdmUgdGhlIGNhcmQgZnJvbSB0aGUgcGxheWVyJ3MgaGFuZFxuICAgICAgY29uc3QgdXBkYXRlZEhhbmQgPSBbLi4uY3VycmVudFBsYXllci5oYW5kXTtcbiAgICAgIHVwZGF0ZWRIYW5kLnNwbGljZShhY3Rpb25DYXJkSW5Qcm9ncmVzcy5pbmRleCwgMSk7XG4gICAgICBjdXJyZW50UGxheWVyLmhhbmQgPSB1cGRhdGVkSGFuZDtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBwbGF5ZXIgaW4gdGhlIHBsYXllcnMgYXJyYXlcbiAgICAgIHVwZGF0ZWRQbGF5ZXJzW2N1cnJlbnRQbGF5ZXJJbmRleF0gPSBjdXJyZW50UGxheWVyO1xuXG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYFJlbW92ZWQgJHthY3Rpb25DYXJkSW5Qcm9ncmVzcy5jYXJkLm5hbWV9IGZyb20gcGxheWVyICR7XG4gICAgICAgICAgY3VycmVudFBsYXllckluZGV4ICsgMVxuICAgICAgICB9J3MgaGFuZGBcbiAgICAgICk7XG4gICAgICBjb25zb2xlLmxvZyhgQWRkZWQgJHthY3Rpb25DYXJkSW5Qcm9ncmVzcy5jYXJkLm5hbWV9IHRvIGFjdGlvbiBhcmVhYCk7XG4gICAgfVxuXG4gICAgc2V0R2FtZVN0YXRlKHtcbiAgICAgIC4uLmdhbWVTdGF0ZSxcbiAgICAgIHBsYXllcnM6IHVwZGF0ZWRQbGF5ZXJzLFxuICAgICAgY2FyZHNQbGF5ZWQ6IGdhbWVTdGF0ZS5jYXJkc1BsYXllZCArIDEsXG4gICAgICBhY3Rpb25DYXJkczogdXBkYXRlZEFjdGlvbkNhcmRzLFxuICAgICAgbWVzc2FnZSxcbiAgICB9KTtcblxuICAgIHNldFNob3dQcm9wZXJ0eVNlbGVjdGlvbk1vZGFsKGZhbHNlKTtcbiAgICBzZXRUYXJnZXRQbGF5ZXJGb3JQcm9wZXJ0eVNlbGVjdGlvbihudWxsKTtcbiAgICBzZXRQcm9wZXJ0eVNlbGVjdGlvblR5cGUoXCJcIik7XG4gICAgc2V0QWN0aW9uQ2FyZEluUHJvZ3Jlc3MobnVsbCk7XG4gIH07XG5cbiAgLy8gSGFuZGxlIGVuZGluZyBhIHR1cm5cbiAgY29uc3QgaGFuZGxlRW5kVHVybiA9ICgpID0+IHtcbiAgICBpZiAoIWdhbWVTdGF0ZSkgcmV0dXJuO1xuXG4gICAgLy8gQ2hlY2sgaWYgcGxheWVyIGhhcyBtb3JlIHRoYW4gNyBjYXJkc1xuICAgIGlmIChnYW1lU3RhdGUucGxheWVyc1tnYW1lU3RhdGUuY3VycmVudFBsYXllckluZGV4XS5oYW5kLmxlbmd0aCA+IDcpIHtcbiAgICAgIHNldFNob3dEaXNjYXJkTW9kYWwodHJ1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29tcGxldGVFbmRUdXJuKCk7XG4gIH07XG5cbiAgLy8gQ29tcGxldGUgdGhlIGVuZCB0dXJuIHByb2Nlc3MgYWZ0ZXIgZGlzY2FyZGluZyBpZiBuZWNlc3NhcnlcbiAgY29uc3QgY29tcGxldGVFbmRUdXJuID0gKCkgPT4ge1xuICAgIGlmICghZ2FtZVN0YXRlKSByZXR1cm47XG5cbiAgICBjb25zdCB7IG5leHRQbGF5ZXJJbmRleCwgdXBkYXRlZFBsYXllcnMgfSA9IGVuZFR1cm4oXG4gICAgICBnYW1lU3RhdGUucGxheWVycyxcbiAgICAgIGdhbWVTdGF0ZS5jdXJyZW50UGxheWVySW5kZXhcbiAgICApO1xuXG4gICAgc2V0R2FtZVN0YXRlKHtcbiAgICAgIC4uLmdhbWVTdGF0ZSxcbiAgICAgIHBsYXllcnM6IHVwZGF0ZWRQbGF5ZXJzLFxuICAgICAgY3VycmVudFBsYXllckluZGV4OiBuZXh0UGxheWVySW5kZXgsXG4gICAgICBjYXJkc1BsYXllZDogMCxcbiAgICAgIGhhc0RyYXduQ2FyZHM6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogYFBsYXllciAke25leHRQbGF5ZXJJbmRleCArIDF9J3MgdHVybi4gRHJhdyBjYXJkcyB0byBiZWdpbi5gLFxuICAgIH0pO1xuICB9O1xuXG4gIC8vIEhhbmRsZSBkaXNjYXJkaW5nIGNhcmRzXG4gIGNvbnN0IGhhbmRsZURpc2NhcmQgPSAoY2FyZEluZGljZXM6IG51bWJlcltdKSA9PiB7XG4gICAgaWYgKCFnYW1lU3RhdGUpIHJldHVybjtcblxuICAgIGNvbnN0IHsgdXBkYXRlZFBsYXllciwgdXBkYXRlZERlY2sgfSA9IGRpc2NhcmRDYXJkcyhcbiAgICAgIGdhbWVTdGF0ZS5wbGF5ZXJzW2dhbWVTdGF0ZS5jdXJyZW50UGxheWVySW5kZXhdLFxuICAgICAgY2FyZEluZGljZXMsXG4gICAgICBnYW1lU3RhdGUuZGVja1xuICAgICk7XG5cbiAgICBjb25zdCB1cGRhdGVkUGxheWVycyA9IFsuLi5nYW1lU3RhdGUucGxheWVyc107XG4gICAgdXBkYXRlZFBsYXllcnNbZ2FtZVN0YXRlLmN1cnJlbnRQbGF5ZXJJbmRleF0gPSB1cGRhdGVkUGxheWVyO1xuXG4gICAgc2V0R2FtZVN0YXRlKHtcbiAgICAgIC4uLmdhbWVTdGF0ZSxcbiAgICAgIHBsYXllcnM6IHVwZGF0ZWRQbGF5ZXJzLFxuICAgICAgZGVjazogdXBkYXRlZERlY2ssXG4gICAgICBtZXNzYWdlOiBgRGlzY2FyZGVkICR7Y2FyZEluZGljZXMubGVuZ3RofSBjYXJkc2AsXG4gICAgfSk7XG5cbiAgICBzZXRTaG93RGlzY2FyZE1vZGFsKGZhbHNlKTtcbiAgICBjb21wbGV0ZUVuZFR1cm4oKTtcbiAgfTtcblxuICAvLyBDYWxjdWxhdGUgdG90YWwgbW9uZXkgaW4gYmFua1xuICBjb25zdCBjYWxjdWxhdGVCYW5rVG90YWwgPSAoYmFuazogQ2FyZFtdKTogbnVtYmVyID0+IHtcbiAgICByZXR1cm4gYmFuay5yZWR1Y2UoKHRvdGFsLCBjYXJkKSA9PiB0b3RhbCArIGNhcmQudmFsdWUsIDApO1xuICB9O1xuXG4gIC8vIENoZWNrIGZvciB3aW5uZXJcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWdhbWVTdGF0ZSkgcmV0dXJuO1xuXG4gICAgY29uc3QgY2hlY2tXaW5uZXIgPSAoKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IHBsYXllciBvZiBnYW1lU3RhdGUucGxheWVycykge1xuICAgICAgICAvLyBDaGVjayBpZiBwbGF5ZXIgaGFzIDMgY29tcGxldGUgcHJvcGVydHkgc2V0c1xuICAgICAgICBjb25zdCBjb21wbGV0ZVNldHMgPSBwbGF5ZXIucHJvcGVydGllcy5maWx0ZXIoXG4gICAgICAgICAgKHNldCkgPT4gc2V0LmlzQ29tcGxldGVcbiAgICAgICAgKS5sZW5ndGg7XG4gICAgICAgIGlmIChjb21wbGV0ZVNldHMgPj0gMykge1xuICAgICAgICAgIHNldEdhbWVTdGF0ZSh7XG4gICAgICAgICAgICAuLi5nYW1lU3RhdGUsXG4gICAgICAgICAgICBpc0dhbWVPdmVyOiB0cnVlLFxuICAgICAgICAgICAgd2lubmVyOiBwbGF5ZXIsXG4gICAgICAgICAgICBtZXNzYWdlOiBgUGxheWVyICR7XG4gICAgICAgICAgICAgIHBsYXllci5pZCArIDFcbiAgICAgICAgICAgIH0gd2lucyB3aXRoIDMgY29tcGxldGUgcHJvcGVydHkgc2V0cyFgLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBjaGVja1dpbm5lcigpO1xuICB9LCBbZ2FtZVN0YXRlXSk7XG5cbiAgaWYgKCFnYW1lU3RhdGUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBwLTYgYmctd2hpdGUgcm91bmRlZC1sZyBzaGFkb3ctbGdcIj5cbiAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtMnhsIGZvbnQtYm9sZCBtYi00XCI+U3RhcnQgTmV3IEdhbWU8L2gyPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZ2FwLTRcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzdGFydEdhbWUoMil9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJweC00IHB5LTIgYmctYmx1ZS01MDAgdGV4dC13aGl0ZSByb3VuZGVkIGhvdmVyOmJnLWJsdWUtNjAwXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICAyIFBsYXllcnNcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzdGFydEdhbWUoMyl9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJweC00IHB5LTIgYmctYmx1ZS01MDAgdGV4dC13aGl0ZSByb3VuZGVkIGhvdmVyOmJnLWJsdWUtNjAwXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICAzIFBsYXllcnNcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzdGFydEdhbWUoNCl9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJweC00IHB5LTIgYmctYmx1ZS01MDAgdGV4dC13aGl0ZSByb3VuZGVkIGhvdmVyOmJnLWJsdWUtNjAwXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA0IFBsYXllcnNcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgaWYgKGdhbWVTdGF0ZS5pc0dhbWVPdmVyICYmIGdhbWVTdGF0ZS53aW5uZXIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBwLTYgYmctd2hpdGUgcm91bmRlZC1sZyBzaGFkb3ctbGdcIj5cbiAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtMnhsIGZvbnQtYm9sZCBtYi00XCI+R2FtZSBPdmVyITwvaDI+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteGwgbWItNFwiPlBsYXllciB7Z2FtZVN0YXRlLndpbm5lci5pZCArIDF9IHdpbnMhPC9wPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gc3RhcnRHYW1lKGdhbWVTdGF0ZS5wbGF5ZXJzLmxlbmd0aCl9XG4gICAgICAgICAgY2xhc3NOYW1lPVwicHgtNCBweS0yIGJnLWJsdWUtNTAwIHRleHQtd2hpdGUgcm91bmRlZCBob3ZlcjpiZy1ibHVlLTYwMFwiXG4gICAgICAgID5cbiAgICAgICAgICBOZXcgR2FtZVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIG1heC13LTd4bFwiPlxuICAgICAgPEdhbWVJbmZvXG4gICAgICAgIGN1cnJlbnRQbGF5ZXI9e2dhbWVTdGF0ZS5jdXJyZW50UGxheWVySW5kZXggKyAxfVxuICAgICAgICBjYXJkc1BsYXllZD17Z2FtZVN0YXRlLmNhcmRzUGxheWVkfVxuICAgICAgICBoYXNEcmF3bkNhcmRzPXtnYW1lU3RhdGUuaGFzRHJhd25DYXJkc31cbiAgICAgIC8+XG5cbiAgICAgIHtnYW1lU3RhdGUubWVzc2FnZSAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctYmx1ZS0xMDAgcC0zIHJvdW5kZWQtbGcgbWItNCB0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIHtnYW1lU3RhdGUubWVzc2FnZX1cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIGdhcC02IG1iLTZcIj5cbiAgICAgICAgPENhcmREZWNrXG4gICAgICAgICAgY2FyZHNSZW1haW5pbmc9e2dhbWVTdGF0ZS5kZWNrLmxlbmd0aH1cbiAgICAgICAgICBvbkRyYXdDYXJkcz17aGFuZGxlRHJhd0NhcmRzfVxuICAgICAgICAgIGhhc0RyYXduQ2FyZHM9e2dhbWVTdGF0ZS5oYXNEcmF3bkNhcmRzfVxuICAgICAgICAvPlxuXG4gICAgICAgIDxBY3Rpb25BcmVhXG4gICAgICAgICAgYWN0aW9uQ2FyZHM9e2dhbWVTdGF0ZS5hY3Rpb25DYXJkc31cbiAgICAgICAgICBpc0N1cnJlbnRQbGF5ZXJzVHVybj17dHJ1ZX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTIgZ2FwLTYgbWItMjBcIj5cbiAgICAgICAge2dhbWVTdGF0ZS5wbGF5ZXJzLm1hcCgocGxheWVyLCBpbmRleCkgPT4gKFxuICAgICAgICAgIDxQbGF5ZXJBcmVhXG4gICAgICAgICAgICBrZXk9e3BsYXllci5pZH1cbiAgICAgICAgICAgIHBsYXllcj17cGxheWVyfVxuICAgICAgICAgICAgaXNDdXJyZW50UGxheWVyPXtpbmRleCA9PT0gZ2FtZVN0YXRlLmN1cnJlbnRQbGF5ZXJJbmRleH1cbiAgICAgICAgICAgIG9uUGxheUNhcmQ9e2hhbmRsZVBsYXlDYXJkfVxuICAgICAgICAgICAgb25QbGF5QWN0aW9uQ2FyZD17aGFuZGxlUGxheUFjdGlvbkNhcmR9XG4gICAgICAgICAgICBnYW1lU3RhdGU9e2dhbWVTdGF0ZX1cbiAgICAgICAgICAgIGJhbmtUb3RhbD17Y2FsY3VsYXRlQmFua1RvdGFsKHBsYXllci5iYW5rKX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8R2FtZUNvbnRyb2xzXG4gICAgICAgIGNhcmRzUGxheWVkPXtnYW1lU3RhdGUuY2FyZHNQbGF5ZWR9XG4gICAgICAgIG9uRW5kVHVybj17aGFuZGxlRW5kVHVybn1cbiAgICAgICAgaXNDdXJyZW50UGxheWVyc1R1cm49e3RydWV9XG4gICAgICAgIGhhc0RyYXduQ2FyZHM9e2dhbWVTdGF0ZS5oYXNEcmF3bkNhcmRzfVxuICAgICAgLz5cblxuICAgICAge3Nob3dEaXNjYXJkTW9kYWwgJiYgKFxuICAgICAgICA8RGlzY2FyZE1vZGFsXG4gICAgICAgICAgcGxheWVyPXtnYW1lU3RhdGUucGxheWVyc1tnYW1lU3RhdGUuY3VycmVudFBsYXllckluZGV4XX1cbiAgICAgICAgICBvbkRpc2NhcmQ9e2hhbmRsZURpc2NhcmR9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7YWN0aW9uQ2FyZEluUHJvZ3Jlc3MgJiYgKFxuICAgICAgICA8QWN0aW9uTW9kYWxcbiAgICAgICAgICBjYXJkPXthY3Rpb25DYXJkSW5Qcm9ncmVzcy5jYXJkfVxuICAgICAgICAgIHBsYXllcnM9e2dhbWVTdGF0ZS5wbGF5ZXJzfVxuICAgICAgICAgIGN1cnJlbnRQbGF5ZXJJbmRleD17Z2FtZVN0YXRlLmN1cnJlbnRQbGF5ZXJJbmRleH1cbiAgICAgICAgICBvbkNvbXBsZXRlPXtoYW5kbGVBY3Rpb25DYXJkQ29tcGxldGV9XG4gICAgICAgICAgb25DYW5jZWw9eygpID0+IHNldEFjdGlvbkNhcmRJblByb2dyZXNzKG51bGwpfVxuICAgICAgICAvPlxuICAgICAgKX1cblxuICAgICAge3Nob3dQcm9wZXJ0eVNlbGVjdGlvbk1vZGFsICYmXG4gICAgICAgIHRhcmdldFBsYXllckZvclByb3BlcnR5U2VsZWN0aW9uICE9PSBudWxsICYmIChcbiAgICAgICAgICA8UHJvcGVydHlTZWxlY3Rpb25Nb2RhbFxuICAgICAgICAgICAgdGl0bGU9e1xuICAgICAgICAgICAgICBwcm9wZXJ0eVNlbGVjdGlvblR5cGUgPT09IFwiZGVhbC1icmVha2VyXCJcbiAgICAgICAgICAgICAgICA/IFwiU2VsZWN0IGEgY29tcGxldGUgcHJvcGVydHkgc2V0IHRvIHN0ZWFsXCJcbiAgICAgICAgICAgICAgICA6IHByb3BlcnR5U2VsZWN0aW9uVHlwZSA9PT0gXCJzbHktZGVhbFwiXG4gICAgICAgICAgICAgICAgPyBcIlNlbGVjdCBhIHByb3BlcnR5IGNhcmQgdG8gc3RlYWxcIlxuICAgICAgICAgICAgICAgIDogXCJTZWxlY3QgYSBwcm9wZXJ0eSBjYXJkIHRvIHN3YXBcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvcGVydHlTZXRzPXtcbiAgICAgICAgICAgICAgZ2FtZVN0YXRlLnBsYXllcnNbdGFyZ2V0UGxheWVyRm9yUHJvcGVydHlTZWxlY3Rpb25dLnByb3BlcnRpZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uU2VsZWN0PXtoYW5kbGVQcm9wZXJ0eVNlbGVjdGlvbn1cbiAgICAgICAgICAgIG9uQ2FuY2VsPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHNldFNob3dQcm9wZXJ0eVNlbGVjdGlvbk1vZGFsKGZhbHNlKTtcbiAgICAgICAgICAgICAgc2V0VGFyZ2V0UGxheWVyRm9yUHJvcGVydHlTZWxlY3Rpb24obnVsbCk7XG4gICAgICAgICAgICAgIHNldFByb3BlcnR5U2VsZWN0aW9uVHlwZShcIlwiKTtcbiAgICAgICAgICAgICAgc2V0QWN0aW9uQ2FyZEluUHJvZ3Jlc3MobnVsbCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgYWxsb3dDb21wbGV0ZVNldD17cHJvcGVydHlTZWxlY3Rpb25UeXBlID09PSBcImRlYWwtYnJlYWtlclwifVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJQbGF5ZXJBcmVhIiwiQ2FyZERlY2siLCJBY3Rpb25BcmVhIiwiQWN0aW9uTW9kYWwiLCJQcm9wZXJ0eVNlbGVjdGlvbk1vZGFsIiwiaW5pdGlhbGl6ZUdhbWUiLCJkcmF3Q2FyZHMiLCJlbmRUdXJuIiwiaXNWYWxpZENhcmRQbGFjZW1lbnQiLCJkaXNjYXJkQ2FyZHMiLCJnZXRSZXF1aXJlZENhcmRzRm9yQ29sb3IiLCJjYWxjdWxhdGVSZW50QW1vdW50IiwiR2FtZUNvbnRyb2xzIiwiR2FtZUluZm8iLCJEaXNjYXJkTW9kYWwiLCJHYW1lQm9hcmQiLCJnYW1lU3RhdGUiLCJzZXRHYW1lU3RhdGUiLCJzaG93RGlzY2FyZE1vZGFsIiwic2V0U2hvd0Rpc2NhcmRNb2RhbCIsImFjdGlvbkNhcmRJblByb2dyZXNzIiwic2V0QWN0aW9uQ2FyZEluUHJvZ3Jlc3MiLCJzaG93UHJvcGVydHlTZWxlY3Rpb25Nb2RhbCIsInNldFNob3dQcm9wZXJ0eVNlbGVjdGlvbk1vZGFsIiwicHJvcGVydHlTZWxlY3Rpb25UeXBlIiwic2V0UHJvcGVydHlTZWxlY3Rpb25UeXBlIiwidGFyZ2V0UGxheWVyRm9yUHJvcGVydHlTZWxlY3Rpb24iLCJzZXRUYXJnZXRQbGF5ZXJGb3JQcm9wZXJ0eVNlbGVjdGlvbiIsImZvcmNlZERlYWxUYXJnZXRDYXJkIiwic2V0Rm9yY2VkRGVhbFRhcmdldENhcmQiLCJzdGFydEdhbWUiLCJudW1QbGF5ZXJzIiwiaW5pdGlhbGl6ZWRQbGF5ZXJzIiwiaW5pdGlhbGl6ZWREZWNrIiwicGxheWVycyIsImRlY2siLCJjdXJyZW50UGxheWVySW5kZXgiLCJjYXJkc1BsYXllZCIsImlzR2FtZU92ZXIiLCJ3aW5uZXIiLCJhY3Rpb25JblByb2dyZXNzIiwiaGFzRHJhd25DYXJkcyIsImFjdGlvbkNhcmRzIiwibWVzc2FnZSIsImhhbmRsZURyYXdDYXJkcyIsInVwZGF0ZWRQbGF5ZXIiLCJ1cGRhdGVkRGVjayIsInVwZGF0ZWRQbGF5ZXJzIiwiaGFuZGxlUGxheUNhcmQiLCJjYXJkSW5kZXgiLCJ0YXJnZXRBcmVhIiwidGFyZ2V0UGxheWVyIiwicGxheWVyIiwiY2FyZCIsImhhbmQiLCJhbGVydCIsInNwbGljZSIsImJhbmsiLCJzdGFydHNXaXRoIiwic2V0SW5kZXgiLCJOdW1iZXIiLCJwYXJzZUludCIsInNwbGl0IiwicHJvcGVydGllcyIsImxlbmd0aCIsInVwZGF0ZWRTZXQiLCJjYXJkcyIsImlzQ29tcGxldGUiLCJyZXF1aXJlZENhcmRzIiwiaXNBbnlDb2xvcldpbGRjYXJkIiwidHlwZSIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiY29sb3IiLCJob3VzZXMiLCJob3RlbHMiLCJoYW5kbGVQbGF5QWN0aW9uQ2FyZCIsImluZGV4IiwiaGFuZGxlQWN0aW9uQ2FyZENvbXBsZXRlIiwidGFyZ2V0UGxheWVySW5kZXgiLCJhbW91bnQiLCJ1cGRhdGVkQWN0aW9uQ2FyZHMiLCJhY3Rpb25UeXBlIiwidW5kZWZpbmVkIiwiYW1vdW50VG9QYXkiLCJNYXRoIiwibWluIiwiY2FsY3VsYXRlQmFua1RvdGFsIiwiY2FyZHNUb1BheSIsInRvdGFsUGFpZCIsInNvcnRlZEJhbmsiLCJzb3J0IiwiYSIsImIiLCJ2YWx1ZSIsImJhbmtDYXJkIiwicHVzaCIsImZpbHRlciIsInNvbWUiLCJwYXlDYXJkIiwiaWQiLCJ0b3RhbENvbGxlY3RlZCIsImZvckVhY2giLCJwbGF5ZXJUb1VwZGF0ZSIsInBsYXllcldpdGhFeHRyYUNhcmRzIiwicmVudENvbG9ycyIsInNlY29uZGFyeUNvbG9yIiwicmVsZXZhbnRTZXRzIiwic2V0IiwicmVudEFtb3VudCIsImhhbmRsZVByb3BlcnR5U2VsZWN0aW9uIiwiY3VycmVudFBsYXllciIsInN0b2xlblNldCIsIl8iLCJpIiwic3RvbGVuQ2FyZCIsInVwZGF0ZWRUYXJnZXRQcm9wZXJ0aWVzIiwiZXhpc3RpbmdTZXRJbmRleCIsImZpbmRJbmRleCIsInVwZGF0ZWRDdXJyZW50UHJvcGVydGllcyIsInVwZGF0ZWRDdXJyZW50U2V0IiwidGFyZ2V0Q2FyZCIsInBsYXllckluZGV4Iiwic2V0VGltZW91dCIsIm93bkNhcmQiLCJ0YXJnZXRTZXRJbmRleCIsInRhcmdldENhcmRJbmRleCIsInVwZGF0ZWRUYXJnZXRTZXQiLCJ1cGRhdGVkSGFuZCIsImNvbnNvbGUiLCJsb2ciLCJoYW5kbGVFbmRUdXJuIiwiY29tcGxldGVFbmRUdXJuIiwibmV4dFBsYXllckluZGV4IiwiaGFuZGxlRGlzY2FyZCIsImNhcmRJbmRpY2VzIiwicmVkdWNlIiwidG90YWwiLCJjaGVja1dpbm5lciIsImNvbXBsZXRlU2V0cyIsImRpdiIsImNsYXNzTmFtZSIsImgyIiwiYnV0dG9uIiwib25DbGljayIsInAiLCJjYXJkc1JlbWFpbmluZyIsIm9uRHJhd0NhcmRzIiwiaXNDdXJyZW50UGxheWVyc1R1cm4iLCJtYXAiLCJpc0N1cnJlbnRQbGF5ZXIiLCJvblBsYXlDYXJkIiwib25QbGF5QWN0aW9uQ2FyZCIsImJhbmtUb3RhbCIsIm9uRW5kVHVybiIsIm9uRGlzY2FyZCIsIm9uQ29tcGxldGUiLCJvbkNhbmNlbCIsInRpdGxlIiwicHJvcGVydHlTZXRzIiwib25TZWxlY3QiLCJhbGxvd0NvbXBsZXRlU2V0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/game-board.tsx\n"));

/***/ })

});