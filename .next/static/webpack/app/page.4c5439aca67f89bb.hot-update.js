"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/game-logic.ts":
/*!***************************!*\
  !*** ./lib/game-logic.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateRentAmount: () => (/* binding */ calculateRentAmount),\n/* harmony export */   discardCards: () => (/* binding */ discardCards),\n/* harmony export */   drawCards: () => (/* binding */ drawCards),\n/* harmony export */   endTurn: () => (/* binding */ endTurn),\n/* harmony export */   getRequiredCardsForColor: () => (/* binding */ getRequiredCardsForColor),\n/* harmony export */   initializeGame: () => (/* binding */ initializeGame),\n/* harmony export */   isPropertySetComplete: () => (/* binding */ isPropertySetComplete),\n/* harmony export */   isValidCardPlacement: () => (/* binding */ isValidCardPlacement),\n/* harmony export */   playCard: () => (/* binding */ playCard)\n/* harmony export */ });\n/* harmony import */ var _lib_card_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/card-data */ \"(app-pages-browser)/./lib/card-data.ts\");\n\n// Initialise the game with players and a shuffled deck\nfunction initializeGame(numPlayers) {\n    const deck = createDeck();\n    const shuffledDeck = shuffleDeck([\n        ...deck\n    ]);\n    const players = [];\n    for(let i = 0; i < numPlayers; i++){\n        // Deal 5 cards to each player\n        const hand = [];\n        for(let j = 0; j < 5; j++){\n            if (shuffledDeck.length > 0) {\n                hand.push(shuffledDeck.pop());\n            }\n        }\n        players.push({\n            id: i,\n            hand,\n            bank: [],\n            properties: []\n        });\n    }\n    return {\n        initializedPlayers: players,\n        initializedDeck: shuffledDeck\n    };\n}\n// Create the deck with all cards\nfunction createDeck() {\n    return _lib_card_data__WEBPACK_IMPORTED_MODULE_0__.cardData;\n}\n// Shuffle the deck using Fisher-Yates algorithm\nfunction shuffleDeck(deck) {\n    for(let i = deck.length - 1; i > 0; i--){\n        const j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [\n            deck[j],\n            deck[i]\n        ];\n    }\n    return deck;\n}\n// Update the drawCards function to only draw 2 cards (or 5 if hand is empty)\nfunction drawCards(player, deck) {\n    let numCards = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2;\n    const updatedPlayer = {\n        ...player\n    };\n    const updatedDeck = [\n        ...deck\n    ];\n    // If player has no cards, draw 5 instead of 2\n    const cardsToDraw = player.hand.length === 0 ? 5 : numCards;\n    for(let i = 0; i < cardsToDraw; i++){\n        if (updatedDeck.length > 0) {\n            updatedPlayer.hand.push(updatedDeck.pop());\n        }\n    }\n    return {\n        updatedPlayer,\n        updatedDeck\n    };\n}\n// Update the endTurn function to handle discarding excess cards\nfunction endTurn(players, currentPlayerIndex) {\n    const updatedPlayers = [\n        ...players\n    ];\n    const currentPlayer = {\n        ...updatedPlayers[currentPlayerIndex]\n    };\n    // don't automatically discard here the player must choose which cards to discard\n    // this is handled in the UI with a discard modal\n    // Move to the next player\n    const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n    return {\n        nextPlayerIndex,\n        updatedPlayers\n    };\n}\n// Check if a property set is complete\nfunction isPropertySetComplete(propertySet) {\n    return propertySet.cards.length >= propertySet.requiredCards;\n}\n// Update the calculateRentAmount function to use the rent values from the card data\nfunction calculateRentAmount(propertySet) {\n    // Count the number of properties in the set\n    const propertyCount = propertySet.cards.length;\n    // If the set is empty, return 0\n    if (propertyCount === 0) return 0;\n    // Find a property card with rent information\n    const propertyWithRent = propertySet.cards.find((card)=>card.rent);\n    if (propertyWithRent && propertyWithRent.rent) {\n        // Use the rent value based on the number of properties\n        // If the exact count isn't in the rent object, use the highest available\n        const rentKeys = Object.keys(propertyWithRent.rent).map(Number).sort((a, b)=>a - b);\n        let rentKey = propertyCount;\n        // If the exact count isn't available, find the closest lower value\n        if (!propertyWithRent.rent[rentKey]) {\n            for(let i = rentKeys.length - 1; i >= 0; i--){\n                if (rentKeys[i] <= propertyCount) {\n                    rentKey = rentKeys[i];\n                    break;\n                }\n            }\n        }\n        let rentAmount = propertyWithRent.rent[rentKey] || 1; // Default to 1 if no rent found\n        // If the set is complete, double the rent\n        if (propertySet.isComplete) {\n            rentAmount *= 2;\n        }\n        // Add extra for houses and hotels\n        rentAmount += propertySet.houses * 3;\n        rentAmount += propertySet.hotels * 5;\n        return rentAmount;\n    } else {\n        // Fallback to the old calculation if no rent information is available\n        // Base rent is 1M per property card\n        let rentAmount = propertyCount;\n        // If the set is complete, double the rent\n        if (propertySet.isComplete) {\n            rentAmount *= 2;\n        }\n        // Add extra for houses and hotels\n        rentAmount += propertySet.houses * 3;\n        rentAmount += propertySet.hotels * 5;\n        return rentAmount;\n    }\n}\n// Play a card from hand to a specific area\nfunction playCard(gameState, playerIndex, cardIndex, targetArea, targetPlayerIndex) {\n    const updatedGameState = {\n        ...gameState\n    };\n    const player = updatedGameState.players[playerIndex];\n    const card = player.hand[cardIndex];\n    // Remove card from hand\n    player.hand.splice(cardIndex, 1);\n    // Handle different target areas\n    if (targetArea === \"bank\") {\n        // Add card to bank\n        player.bank.push(card);\n    } else if (targetArea.startsWith(\"property-\")) {\n        const setIndex = Number.parseInt(targetArea.split(\"-\")[1]);\n        // Check if this is an existing property set\n        if (setIndex < player.properties.length) {\n            // Add to existing property set\n            const updatedSet = player.properties[setIndex];\n            updatedSet.cards.push(card);\n            // Check if set is now complete\n            updatedSet.isComplete = updatedSet.cards.length >= updatedSet.requiredCards;\n        } else {\n            // Create new property set (only for regular properties, not \"Any Color\" wildcards)\n            const isAnyColorWildcard = card.type === \"wildcard\" && (card.name.toLowerCase().includes(\"any color\") || card.name.toLowerCase().includes(\"any colour\"));\n            if (!isAnyColorWildcard) {\n                player.properties.push({\n                    color: card.color || \"\",\n                    cards: [\n                        card\n                    ],\n                    isComplete: false,\n                    houses: 0,\n                    hotels: 0,\n                    requiredCards: getRequiredCardsForColor(card.color || \"\")\n                });\n            } else {\n                // Any Color wildcards can't create their own sets\n                return updatedGameState;\n            }\n        }\n    } else if (targetArea === \"action\") {\n        // Add to action area\n        updatedGameState.actionCards.push(card);\n    }\n    // Increment cards played\n    updatedGameState.cardsPlayed += 1;\n    return updatedGameState;\n}\n// Get the number of cards required for a complete set of a specific colour\nfunction getRequiredCardsForColor(color) {\n    switch(color){\n        case \"brown\":\n        case \"dark blue\":\n        case \"mint\":\n            return 2;\n        case \"light blue\":\n        case \"pink\":\n        case \"orange\":\n        case \"red\":\n        case \"yellow\":\n        case \"green\":\n            return 3;\n        case \"black\":\n            return 4;\n        default:\n            return 1;\n    }\n}\n// Add a function to validate card placement\nfunction isValidCardPlacement(card, targetArea) {\n    if (targetArea === \"bank\") {\n        if (card.type === \"wildcard\" && card.value === 0) {\n            return false;\n        }\n        if (card.type === \"property\" || card.type === \"wildcard\") {\n            return false; // cannot add these cards to the bank\n        }\n        return true;\n    } else if (targetArea.startsWith(\"property-\")) {\n        // Only property cards and wildcards can go in property sets\n        if (card.type === \"property\" || card.type === \"wildcard\") {\n            // Special case for \"Any Color\" wildcards\n            const isAnyColorWildcard = card.type === \"wildcard\" && (card.name.toLowerCase().includes(\"any color\") || card.name.toLowerCase().includes(\"any colour\"));\n            if (isAnyColorWildcard) {\n                // \"Any Color\" wildcards can only be added to existing property sets\n                // They cannot create their own set\n                const setIndex = Number.parseInt(targetArea.split(\"-\")[1]);\n                return !targetArea.endsWith(\"-\".concat(setIndex)) || setIndex < Number.POSITIVE_INFINITY; // Always true for existing sets\n            }\n            return true;\n        }\n        return false;\n    } else if (targetArea === \"action\") {\n        // Only action cards can be played as actions\n        return card.type === \"action\";\n    }\n    return false;\n}\n// Add a function to discard cards\nfunction discardCards(player, cardIndices, deck) {\n    const updatedPlayer = {\n        ...player\n    };\n    const updatedDeck = [\n        ...deck\n    ];\n    // Sort indices in descending order to avoid shifting issues when removing\n    const sortedIndices = [\n        ...cardIndices\n    ].sort((a, b)=>b - a);\n    // Remove cards from hand and add to bottom of deck\n    for (const index of sortedIndices){\n        if (index >= 0 && index < updatedPlayer.hand.length) {\n            const card = updatedPlayer.hand.splice(index, 1)[0];\n            updatedDeck.unshift(card); // Add to bottom of deck\n        }\n    }\n    return {\n        updatedPlayer,\n        updatedDeck\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9nYW1lLWxvZ2ljLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDMkM7QUFFM0MsdURBQXVEO0FBQ2hELFNBQVNDLGVBQWVDLFVBQWtCO0lBQy9DLE1BQU1DLE9BQU9DO0lBRWIsTUFBTUMsZUFBZUMsWUFBWTtXQUFJSDtLQUFLO0lBRTFDLE1BQU1JLFVBQW9CLEVBQUU7SUFDNUIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlOLFlBQVlNLElBQUs7UUFDbkMsOEJBQThCO1FBQzlCLE1BQU1DLE9BQWUsRUFBRTtRQUN2QixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFLO1lBQzFCLElBQUlMLGFBQWFNLE1BQU0sR0FBRyxHQUFHO2dCQUMzQkYsS0FBS0csSUFBSSxDQUFDUCxhQUFhUSxHQUFHO1lBQzVCO1FBQ0Y7UUFFQU4sUUFBUUssSUFBSSxDQUFDO1lBQ1hFLElBQUlOO1lBQ0pDO1lBQ0FNLE1BQU0sRUFBRTtZQUNSQyxZQUFZLEVBQUU7UUFDaEI7SUFDRjtJQUVBLE9BQU87UUFDTEMsb0JBQW9CVjtRQUNwQlcsaUJBQWlCYjtJQUNuQjtBQUNGO0FBRUEsaUNBQWlDO0FBQ2pDLFNBQVNEO0lBQ1AsT0FBT0osb0RBQVFBO0FBQ2pCO0FBRUEsZ0RBQWdEO0FBQ2hELFNBQVNNLFlBQVlILElBQVk7SUFDL0IsSUFBSyxJQUFJSyxJQUFJTCxLQUFLUSxNQUFNLEdBQUcsR0FBR0gsSUFBSSxHQUFHQSxJQUFLO1FBQ3hDLE1BQU1FLElBQUlTLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsTUFBTSxLQUFNYixDQUFBQSxJQUFJO1FBQzFDLENBQUNMLElBQUksQ0FBQ0ssRUFBRSxFQUFFTCxJQUFJLENBQUNPLEVBQUUsQ0FBQyxHQUFHO1lBQUNQLElBQUksQ0FBQ08sRUFBRTtZQUFFUCxJQUFJLENBQUNLLEVBQUU7U0FBQztJQUN6QztJQUNBLE9BQU9MO0FBQ1Q7QUFFQSw2RUFBNkU7QUFDdEUsU0FB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QjtRQUNBQztJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xca2l0am9cXGNvZGVcXG1vbm9wb2x5LWRlYWxcXGxpYlxcZ2FtZS1sb2dpYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENhcmQsIFBsYXllciwgUHJvcGVydHlTZXQsIEdhbWVTdGF0ZSB9IGZyb20gXCJAL2xpYi90eXBlc1wiO1xyXG5pbXBvcnQgeyBjYXJkRGF0YSB9IGZyb20gXCJAL2xpYi9jYXJkLWRhdGFcIjtcclxuXHJcbi8vIEluaXRpYWxpc2UgdGhlIGdhbWUgd2l0aCBwbGF5ZXJzIGFuZCBhIHNodWZmbGVkIGRlY2tcclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVHYW1lKG51bVBsYXllcnM6IG51bWJlcikge1xyXG4gIGNvbnN0IGRlY2sgPSBjcmVhdGVEZWNrKCk7XHJcblxyXG4gIGNvbnN0IHNodWZmbGVkRGVjayA9IHNodWZmbGVEZWNrKFsuLi5kZWNrXSk7XHJcblxyXG4gIGNvbnN0IHBsYXllcnM6IFBsYXllcltdID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1QbGF5ZXJzOyBpKyspIHtcclxuICAgIC8vIERlYWwgNSBjYXJkcyB0byBlYWNoIHBsYXllclxyXG4gICAgY29uc3QgaGFuZDogQ2FyZFtdID0gW107XHJcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDU7IGorKykge1xyXG4gICAgICBpZiAoc2h1ZmZsZWREZWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBoYW5kLnB1c2goc2h1ZmZsZWREZWNrLnBvcCgpISk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwbGF5ZXJzLnB1c2goe1xyXG4gICAgICBpZDogaSxcclxuICAgICAgaGFuZCxcclxuICAgICAgYmFuazogW10sXHJcbiAgICAgIHByb3BlcnRpZXM6IFtdLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgaW5pdGlhbGl6ZWRQbGF5ZXJzOiBwbGF5ZXJzLFxyXG4gICAgaW5pdGlhbGl6ZWREZWNrOiBzaHVmZmxlZERlY2ssXHJcbiAgfTtcclxufVxyXG5cclxuLy8gQ3JlYXRlIHRoZSBkZWNrIHdpdGggYWxsIGNhcmRzXHJcbmZ1bmN0aW9uIGNyZWF0ZURlY2soKTogQ2FyZFtdIHtcclxuICByZXR1cm4gY2FyZERhdGE7XHJcbn1cclxuXHJcbi8vIFNodWZmbGUgdGhlIGRlY2sgdXNpbmcgRmlzaGVyLVlhdGVzIGFsZ29yaXRobVxyXG5mdW5jdGlvbiBzaHVmZmxlRGVjayhkZWNrOiBDYXJkW10pOiBDYXJkW10ge1xyXG4gIGZvciAobGV0IGkgPSBkZWNrLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcclxuICAgIGNvbnN0IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaSArIDEpKTtcclxuICAgIFtkZWNrW2ldLCBkZWNrW2pdXSA9IFtkZWNrW2pdLCBkZWNrW2ldXTtcclxuICB9XHJcbiAgcmV0dXJuIGRlY2s7XHJcbn1cclxuXHJcbi8vIFVwZGF0ZSB0aGUgZHJhd0NhcmRzIGZ1bmN0aW9uIHRvIG9ubHkgZHJhdyAyIGNhcmRzIChvciA1IGlmIGhhbmQgaXMgZW1wdHkpXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3Q2FyZHMocGxheWVyOiBQbGF5ZXIsIGRlY2s6IENhcmRbXSwgbnVtQ2FyZHMgPSAyKSB7XHJcbiAgY29uc3QgdXBkYXRlZFBsYXllciA9IHsgLi4ucGxheWVyIH07XHJcbiAgY29uc3QgdXBkYXRlZERlY2sgPSBbLi4uZGVja107XHJcblxyXG4gIC8vIElmIHBsYXllciBoYXMgbm8gY2FyZHMsIGRyYXcgNSBpbnN0ZWFkIG9mIDJcclxuICBjb25zdCBjYXJkc1RvRHJhdyA9IHBsYXllci5oYW5kLmxlbmd0aCA9PT0gMCA/IDUgOiBudW1DYXJkcztcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYXJkc1RvRHJhdzsgaSsrKSB7XHJcbiAgICBpZiAodXBkYXRlZERlY2subGVuZ3RoID4gMCkge1xyXG4gICAgICB1cGRhdGVkUGxheWVyLmhhbmQucHVzaCh1cGRhdGVkRGVjay5wb3AoKSEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHVwZGF0ZWRQbGF5ZXIsXHJcbiAgICB1cGRhdGVkRGVjayxcclxuICB9O1xyXG59XHJcblxyXG4vLyBVcGRhdGUgdGhlIGVuZFR1cm4gZnVuY3Rpb24gdG8gaGFuZGxlIGRpc2NhcmRpbmcgZXhjZXNzIGNhcmRzXHJcbmV4cG9ydCBmdW5jdGlvbiBlbmRUdXJuKHBsYXllcnM6IFBsYXllcltdLCBjdXJyZW50UGxheWVySW5kZXg6IG51bWJlcikge1xyXG4gIGNvbnN0IHVwZGF0ZWRQbGF5ZXJzID0gWy4uLnBsYXllcnNdO1xyXG4gIGNvbnN0IGN1cnJlbnRQbGF5ZXIgPSB7IC4uLnVwZGF0ZWRQbGF5ZXJzW2N1cnJlbnRQbGF5ZXJJbmRleF0gfTtcclxuXHJcbiAgLy8gZG9uJ3QgYXV0b21hdGljYWxseSBkaXNjYXJkIGhlcmUgdGhlIHBsYXllciBtdXN0IGNob29zZSB3aGljaCBjYXJkcyB0byBkaXNjYXJkXHJcbiAgLy8gdGhpcyBpcyBoYW5kbGVkIGluIHRoZSBVSSB3aXRoIGEgZGlzY2FyZCBtb2RhbFxyXG5cclxuICAvLyBNb3ZlIHRvIHRoZSBuZXh0IHBsYXllclxyXG4gIGNvbnN0IG5leHRQbGF5ZXJJbmRleCA9IChjdXJyZW50UGxheWVySW5kZXggKyAxKSAlIHBsYXllcnMubGVuZ3RoO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgbmV4dFBsYXllckluZGV4LFxyXG4gICAgdXBkYXRlZFBsYXllcnMsXHJcbiAgfTtcclxufVxyXG5cclxuLy8gQ2hlY2sgaWYgYSBwcm9wZXJ0eSBzZXQgaXMgY29tcGxldGVcclxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvcGVydHlTZXRDb21wbGV0ZShwcm9wZXJ0eVNldDogUHJvcGVydHlTZXQpOiBib29sZWFuIHtcclxuICByZXR1cm4gcHJvcGVydHlTZXQuY2FyZHMubGVuZ3RoID49IHByb3BlcnR5U2V0LnJlcXVpcmVkQ2FyZHM7XHJcbn1cclxuXHJcbi8vIFVwZGF0ZSB0aGUgY2FsY3VsYXRlUmVudEFtb3VudCBmdW5jdGlvbiB0byB1c2UgdGhlIHJlbnQgdmFsdWVzIGZyb20gdGhlIGNhcmQgZGF0YVxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlUmVudEFtb3VudChwcm9wZXJ0eVNldDogUHJvcGVydHlTZXQpOiBudW1iZXIge1xyXG4gIC8vIENvdW50IHRoZSBudW1iZXIgb2YgcHJvcGVydGllcyBpbiB0aGUgc2V0XHJcbiAgY29uc3QgcHJvcGVydHlDb3VudCA9IHByb3BlcnR5U2V0LmNhcmRzLmxlbmd0aDtcclxuXHJcbiAgLy8gSWYgdGhlIHNldCBpcyBlbXB0eSwgcmV0dXJuIDBcclxuICBpZiAocHJvcGVydHlDb3VudCA9PT0gMCkgcmV0dXJuIDA7XHJcblxyXG4gIC8vIEZpbmQgYSBwcm9wZXJ0eSBjYXJkIHdpdGggcmVudCBpbmZvcm1hdGlvblxyXG4gIGNvbnN0IHByb3BlcnR5V2l0aFJlbnQgPSBwcm9wZXJ0eVNldC5jYXJkcy5maW5kKChjYXJkKSA9PiBjYXJkLnJlbnQpO1xyXG5cclxuICBpZiAocHJvcGVydHlXaXRoUmVudCAmJiBwcm9wZXJ0eVdpdGhSZW50LnJlbnQpIHtcclxuICAgIC8vIFVzZSB0aGUgcmVudCB2YWx1ZSBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIHByb3BlcnRpZXNcclxuICAgIC8vIElmIHRoZSBleGFjdCBjb3VudCBpc24ndCBpbiB0aGUgcmVudCBvYmplY3QsIHVzZSB0aGUgaGlnaGVzdCBhdmFpbGFibGVcclxuICAgIGNvbnN0IHJlbnRLZXlzID0gT2JqZWN0LmtleXMocHJvcGVydHlXaXRoUmVudC5yZW50KVxyXG4gICAgICAubWFwKE51bWJlcilcclxuICAgICAgLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcclxuICAgIGxldCByZW50S2V5ID0gcHJvcGVydHlDb3VudDtcclxuXHJcbiAgICAvLyBJZiB0aGUgZXhhY3QgY291bnQgaXNuJ3QgYXZhaWxhYmxlLCBmaW5kIHRoZSBjbG9zZXN0IGxvd2VyIHZhbHVlXHJcbiAgICBpZiAoIXByb3BlcnR5V2l0aFJlbnQucmVudFtyZW50S2V5XSkge1xyXG4gICAgICBmb3IgKGxldCBpID0gcmVudEtleXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBpZiAocmVudEtleXNbaV0gPD0gcHJvcGVydHlDb3VudCkge1xyXG4gICAgICAgICAgcmVudEtleSA9IHJlbnRLZXlzW2ldO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJlbnRBbW91bnQgPSBwcm9wZXJ0eVdpdGhSZW50LnJlbnRbcmVudEtleV0gfHwgMTsgLy8gRGVmYXVsdCB0byAxIGlmIG5vIHJlbnQgZm91bmRcclxuXHJcbiAgICAvLyBJZiB0aGUgc2V0IGlzIGNvbXBsZXRlLCBkb3VibGUgdGhlIHJlbnRcclxuICAgIGlmIChwcm9wZXJ0eVNldC5pc0NvbXBsZXRlKSB7XHJcbiAgICAgIHJlbnRBbW91bnQgKj0gMjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQgZXh0cmEgZm9yIGhvdXNlcyBhbmQgaG90ZWxzXHJcbiAgICByZW50QW1vdW50ICs9IHByb3BlcnR5U2V0LmhvdXNlcyAqIDM7XHJcbiAgICByZW50QW1vdW50ICs9IHByb3BlcnR5U2V0LmhvdGVscyAqIDU7XHJcblxyXG4gICAgcmV0dXJuIHJlbnRBbW91bnQ7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIEZhbGxiYWNrIHRvIHRoZSBvbGQgY2FsY3VsYXRpb24gaWYgbm8gcmVudCBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGVcclxuICAgIC8vIEJhc2UgcmVudCBpcyAxTSBwZXIgcHJvcGVydHkgY2FyZFxyXG4gICAgbGV0IHJlbnRBbW91bnQgPSBwcm9wZXJ0eUNvdW50O1xyXG5cclxuICAgIC8vIElmIHRoZSBzZXQgaXMgY29tcGxldGUsIGRvdWJsZSB0aGUgcmVudFxyXG4gICAgaWYgKHByb3BlcnR5U2V0LmlzQ29tcGxldGUpIHtcclxuICAgICAgcmVudEFtb3VudCAqPSAyO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZCBleHRyYSBmb3IgaG91c2VzIGFuZCBob3RlbHNcclxuICAgIHJlbnRBbW91bnQgKz0gcHJvcGVydHlTZXQuaG91c2VzICogMztcclxuICAgIHJlbnRBbW91bnQgKz0gcHJvcGVydHlTZXQuaG90ZWxzICogNTtcclxuXHJcbiAgICByZXR1cm4gcmVudEFtb3VudDtcclxuICB9XHJcbn1cclxuXHJcbi8vIFBsYXkgYSBjYXJkIGZyb20gaGFuZCB0byBhIHNwZWNpZmljIGFyZWFcclxuZXhwb3J0IGZ1bmN0aW9uIHBsYXlDYXJkKFxyXG4gIGdhbWVTdGF0ZTogR2FtZVN0YXRlLFxyXG4gIHBsYXllckluZGV4OiBudW1iZXIsXHJcbiAgY2FyZEluZGV4OiBudW1iZXIsXHJcbiAgdGFyZ2V0QXJlYTogc3RyaW5nLFxyXG4gIHRhcmdldFBsYXllckluZGV4PzogbnVtYmVyXHJcbik6IEdhbWVTdGF0ZSB7XHJcbiAgY29uc3QgdXBkYXRlZEdhbWVTdGF0ZSA9IHsgLi4uZ2FtZVN0YXRlIH07XHJcbiAgY29uc3QgcGxheWVyID0gdXBkYXRlZEdhbWVTdGF0ZS5wbGF5ZXJzW3BsYXllckluZGV4XTtcclxuICBjb25zdCBjYXJkID0gcGxheWVyLmhhbmRbY2FyZEluZGV4XTtcclxuXHJcbiAgLy8gUmVtb3ZlIGNhcmQgZnJvbSBoYW5kXHJcbiAgcGxheWVyLmhhbmQuc3BsaWNlKGNhcmRJbmRleCwgMSk7XHJcblxyXG4gIC8vIEhhbmRsZSBkaWZmZXJlbnQgdGFyZ2V0IGFyZWFzXHJcbiAgaWYgKHRhcmdldEFyZWEgPT09IFwiYmFua1wiKSB7XHJcbiAgICAvLyBBZGQgY2FyZCB0byBiYW5rXHJcbiAgICBwbGF5ZXIuYmFuay5wdXNoKGNhcmQpO1xyXG4gIH0gZWxzZSBpZiAodGFyZ2V0QXJlYS5zdGFydHNXaXRoKFwicHJvcGVydHktXCIpKSB7XHJcbiAgICBjb25zdCBzZXRJbmRleCA9IE51bWJlci5wYXJzZUludCh0YXJnZXRBcmVhLnNwbGl0KFwiLVwiKVsxXSk7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhbiBleGlzdGluZyBwcm9wZXJ0eSBzZXRcclxuICAgIGlmIChzZXRJbmRleCA8IHBsYXllci5wcm9wZXJ0aWVzLmxlbmd0aCkge1xyXG4gICAgICAvLyBBZGQgdG8gZXhpc3RpbmcgcHJvcGVydHkgc2V0XHJcbiAgICAgIGNvbnN0IHVwZGF0ZWRTZXQgPSBwbGF5ZXIucHJvcGVydGllc1tzZXRJbmRleF07XHJcbiAgICAgIHVwZGF0ZWRTZXQuY2FyZHMucHVzaChjYXJkKTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHNldCBpcyBub3cgY29tcGxldGVcclxuICAgICAgdXBkYXRlZFNldC5pc0NvbXBsZXRlID1cclxuICAgICAgICB1cGRhdGVkU2V0LmNhcmRzLmxlbmd0aCA+PSB1cGRhdGVkU2V0LnJlcXVpcmVkQ2FyZHM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBDcmVhdGUgbmV3IHByb3BlcnR5IHNldCAob25seSBmb3IgcmVndWxhciBwcm9wZXJ0aWVzLCBub3QgXCJBbnkgQ29sb3JcIiB3aWxkY2FyZHMpXHJcbiAgICAgIGNvbnN0IGlzQW55Q29sb3JXaWxkY2FyZCA9XHJcbiAgICAgICAgY2FyZC50eXBlID09PSBcIndpbGRjYXJkXCIgJiZcclxuICAgICAgICAoY2FyZC5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJhbnkgY29sb3JcIikgfHxcclxuICAgICAgICAgIGNhcmQubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwiYW55IGNvbG91clwiKSk7XHJcblxyXG4gICAgICBpZiAoIWlzQW55Q29sb3JXaWxkY2FyZCkge1xyXG4gICAgICAgIHBsYXllci5wcm9wZXJ0aWVzLnB1c2goe1xyXG4gICAgICAgICAgY29sb3I6IGNhcmQuY29sb3IgfHwgXCJcIixcclxuICAgICAgICAgIGNhcmRzOiBbY2FyZF0sXHJcbiAgICAgICAgICBpc0NvbXBsZXRlOiBmYWxzZSxcclxuICAgICAgICAgIGhvdXNlczogMCxcclxuICAgICAgICAgIGhvdGVsczogMCxcclxuICAgICAgICAgIHJlcXVpcmVkQ2FyZHM6IGdldFJlcXVpcmVkQ2FyZHNGb3JDb2xvcihjYXJkLmNvbG9yIHx8IFwiXCIpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEFueSBDb2xvciB3aWxkY2FyZHMgY2FuJ3QgY3JlYXRlIHRoZWlyIG93biBzZXRzXHJcbiAgICAgICAgcmV0dXJuIHVwZGF0ZWRHYW1lU3RhdGU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9IGVsc2UgaWYgKHRhcmdldEFyZWEgPT09IFwiYWN0aW9uXCIpIHtcclxuICAgIC8vIEFkZCB0byBhY3Rpb24gYXJlYVxyXG4gICAgdXBkYXRlZEdhbWVTdGF0ZS5hY3Rpb25DYXJkcy5wdXNoKGNhcmQpO1xyXG4gIH1cclxuXHJcbiAgLy8gSW5jcmVtZW50IGNhcmRzIHBsYXllZFxyXG4gIHVwZGF0ZWRHYW1lU3RhdGUuY2FyZHNQbGF5ZWQgKz0gMTtcclxuXHJcbiAgcmV0dXJuIHVwZGF0ZWRHYW1lU3RhdGU7XHJcbn1cclxuXHJcbi8vIEdldCB0aGUgbnVtYmVyIG9mIGNhcmRzIHJlcXVpcmVkIGZvciBhIGNvbXBsZXRlIHNldCBvZiBhIHNwZWNpZmljIGNvbG91clxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVxdWlyZWRDYXJkc0ZvckNvbG9yKGNvbG9yOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gIHN3aXRjaCAoY29sb3IpIHtcclxuICAgIGNhc2UgXCJicm93blwiOlxyXG4gICAgY2FzZSBcImRhcmsgYmx1ZVwiOlxyXG4gICAgY2FzZSBcIm1pbnRcIjpcclxuICAgICAgcmV0dXJuIDI7XHJcbiAgICBjYXNlIFwibGlnaHQgYmx1ZVwiOlxyXG4gICAgY2FzZSBcInBpbmtcIjpcclxuICAgIGNhc2UgXCJvcmFuZ2VcIjpcclxuICAgIGNhc2UgXCJyZWRcIjpcclxuICAgIGNhc2UgXCJ5ZWxsb3dcIjpcclxuICAgIGNhc2UgXCJncmVlblwiOlxyXG4gICAgICByZXR1cm4gMztcclxuICAgIGNhc2UgXCJibGFja1wiOlxyXG4gICAgICByZXR1cm4gNDtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiAxO1xyXG4gIH1cclxufVxyXG5cclxuLy8gQWRkIGEgZnVuY3Rpb24gdG8gdmFsaWRhdGUgY2FyZCBwbGFjZW1lbnRcclxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRDYXJkUGxhY2VtZW50KGNhcmQ6IENhcmQsIHRhcmdldEFyZWE6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gIGlmICh0YXJnZXRBcmVhID09PSBcImJhbmtcIikge1xyXG4gICAgaWYgKGNhcmQudHlwZSA9PT0gXCJ3aWxkY2FyZFwiICYmIGNhcmQudmFsdWUgPT09IDApIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGNhcmQudHlwZSA9PT0gXCJwcm9wZXJ0eVwiIHx8IGNhcmQudHlwZSA9PT0gXCJ3aWxkY2FyZFwiKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTsgLy8gY2Fubm90IGFkZCB0aGVzZSBjYXJkcyB0byB0aGUgYmFua1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSBlbHNlIGlmICh0YXJnZXRBcmVhLnN0YXJ0c1dpdGgoXCJwcm9wZXJ0eS1cIikpIHtcclxuICAgIC8vIE9ubHkgcHJvcGVydHkgY2FyZHMgYW5kIHdpbGRjYXJkcyBjYW4gZ28gaW4gcHJvcGVydHkgc2V0c1xyXG4gICAgaWYgKGNhcmQudHlwZSA9PT0gXCJwcm9wZXJ0eVwiIHx8IGNhcmQudHlwZSA9PT0gXCJ3aWxkY2FyZFwiKSB7XHJcbiAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgXCJBbnkgQ29sb3JcIiB3aWxkY2FyZHNcclxuICAgICAgY29uc3QgaXNBbnlDb2xvcldpbGRjYXJkID1cclxuICAgICAgICBjYXJkLnR5cGUgPT09IFwid2lsZGNhcmRcIiAmJlxyXG4gICAgICAgIChjYXJkLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcImFueSBjb2xvclwiKSB8fFxyXG4gICAgICAgICAgY2FyZC5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJhbnkgY29sb3VyXCIpKTtcclxuXHJcbiAgICAgIGlmIChpc0FueUNvbG9yV2lsZGNhcmQpIHtcclxuICAgICAgICAvLyBcIkFueSBDb2xvclwiIHdpbGRjYXJkcyBjYW4gb25seSBiZSBhZGRlZCB0byBleGlzdGluZyBwcm9wZXJ0eSBzZXRzXHJcbiAgICAgICAgLy8gVGhleSBjYW5ub3QgY3JlYXRlIHRoZWlyIG93biBzZXRcclxuICAgICAgICBjb25zdCBzZXRJbmRleCA9IE51bWJlci5wYXJzZUludCh0YXJnZXRBcmVhLnNwbGl0KFwiLVwiKVsxXSk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICF0YXJnZXRBcmVhLmVuZHNXaXRoKGAtJHtzZXRJbmRleH1gKSB8fFxyXG4gICAgICAgICAgc2V0SW5kZXggPCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcclxuICAgICAgICApOyAvLyBBbHdheXMgdHJ1ZSBmb3IgZXhpc3Rpbmcgc2V0c1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9IGVsc2UgaWYgKHRhcmdldEFyZWEgPT09IFwiYWN0aW9uXCIpIHtcclxuICAgIC8vIE9ubHkgYWN0aW9uIGNhcmRzIGNhbiBiZSBwbGF5ZWQgYXMgYWN0aW9uc1xyXG4gICAgcmV0dXJuIGNhcmQudHlwZSA9PT0gXCJhY3Rpb25cIjtcclxuICB9XHJcblxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLy8gQWRkIGEgZnVuY3Rpb24gdG8gZGlzY2FyZCBjYXJkc1xyXG5leHBvcnQgZnVuY3Rpb24gZGlzY2FyZENhcmRzKFxyXG4gIHBsYXllcjogUGxheWVyLFxyXG4gIGNhcmRJbmRpY2VzOiBudW1iZXJbXSxcclxuICBkZWNrOiBDYXJkW11cclxuKTogeyB1cGRhdGVkUGxheWVyOiBQbGF5ZXI7IHVwZGF0ZWREZWNrOiBDYXJkW10gfSB7XHJcbiAgY29uc3QgdXBkYXRlZFBsYXllciA9IHsgLi4ucGxheWVyIH07XHJcbiAgY29uc3QgdXBkYXRlZERlY2sgPSBbLi4uZGVja107XHJcblxyXG4gIC8vIFNvcnQgaW5kaWNlcyBpbiBkZXNjZW5kaW5nIG9yZGVyIHRvIGF2b2lkIHNoaWZ0aW5nIGlzc3VlcyB3aGVuIHJlbW92aW5nXHJcbiAgY29uc3Qgc29ydGVkSW5kaWNlcyA9IFsuLi5jYXJkSW5kaWNlc10uc29ydCgoYSwgYikgPT4gYiAtIGEpO1xyXG5cclxuICAvLyBSZW1vdmUgY2FyZHMgZnJvbSBoYW5kIGFuZCBhZGQgdG8gYm90dG9tIG9mIGRlY2tcclxuICBmb3IgKGNvbnN0IGluZGV4IG9mIHNvcnRlZEluZGljZXMpIHtcclxuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdXBkYXRlZFBsYXllci5oYW5kLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCBjYXJkID0gdXBkYXRlZFBsYXllci5oYW5kLnNwbGljZShpbmRleCwgMSlbMF07XHJcbiAgICAgIHVwZGF0ZWREZWNrLnVuc2hpZnQoY2FyZCk7IC8vIEFkZCB0byBib3R0b20gb2YgZGVja1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHVwZGF0ZWRQbGF5ZXIsXHJcbiAgICB1cGRhdGVkRGVjayxcclxuICB9O1xyXG59XHJcbiJdLCJuYW1lcyI6WyJjYXJkRGF0YSIsImluaXRpYWxpemVHYW1lIiwibnVtUGxheWVycyIsImRlY2siLCJjcmVhdGVEZWNrIiwic2h1ZmZsZWREZWNrIiwic2h1ZmZsZURlY2siLCJwbGF5ZXJzIiwiaSIsImhhbmQiLCJqIiwibGVuZ3RoIiwicHVzaCIsInBvcCIsImlkIiwiYmFuayIsInByb3BlcnRpZXMiLCJpbml0aWFsaXplZFBsYXllcnMiLCJpbml0aWFsaXplZERlY2siLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJkcmF3Q2FyZHMiLCJwbGF5ZXIiLCJudW1DYXJkcyIsInVwZGF0ZWRQbGF5ZXIiLCJ1cGRhdGVkRGVjayIsImNhcmRzVG9EcmF3IiwiZW5kVHVybiIsImN1cnJlbnRQbGF5ZXJJbmRleCIsInVwZGF0ZWRQbGF5ZXJzIiwiY3VycmVudFBsYXllciIsIm5leHRQbGF5ZXJJbmRleCIsImlzUHJvcGVydHlTZXRDb21wbGV0ZSIsInByb3BlcnR5U2V0IiwiY2FyZHMiLCJyZXF1aXJlZENhcmRzIiwiY2FsY3VsYXRlUmVudEFtb3VudCIsInByb3BlcnR5Q291bnQiLCJwcm9wZXJ0eVdpdGhSZW50IiwiZmluZCIsImNhcmQiLCJyZW50IiwicmVudEtleXMiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwiTnVtYmVyIiwic29ydCIsImEiLCJiIiwicmVudEtleSIsInJlbnRBbW91bnQiLCJpc0NvbXBsZXRlIiwiaG91c2VzIiwiaG90ZWxzIiwicGxheUNhcmQiLCJnYW1lU3RhdGUiLCJwbGF5ZXJJbmRleCIsImNhcmRJbmRleCIsInRhcmdldEFyZWEiLCJ0YXJnZXRQbGF5ZXJJbmRleCIsInVwZGF0ZWRHYW1lU3RhdGUiLCJzcGxpY2UiLCJzdGFydHNXaXRoIiwic2V0SW5kZXgiLCJwYXJzZUludCIsInNwbGl0IiwidXBkYXRlZFNldCIsImlzQW55Q29sb3JXaWxkY2FyZCIsInR5cGUiLCJuYW1lIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsImNvbG9yIiwiZ2V0UmVxdWlyZWRDYXJkc0ZvckNvbG9yIiwiYWN0aW9uQ2FyZHMiLCJjYXJkc1BsYXllZCIsImlzVmFsaWRDYXJkUGxhY2VtZW50IiwidmFsdWUiLCJlbmRzV2l0aCIsIlBPU0lUSVZFX0lORklOSVRZIiwiZGlzY2FyZENhcmRzIiwiY2FyZEluZGljZXMiLCJzb3J0ZWRJbmRpY2VzIiwiaW5kZXgiLCJ1bnNoaWZ0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/game-logic.ts\n"));

/***/ })

});