"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/game-board.tsx":
/*!***********************************!*\
  !*** ./components/game-board.tsx ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GameBoard)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_player_area__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/player-area */ \"(app-pages-browser)/./components/player-area.tsx\");\n/* harmony import */ var _components_card_deck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/card-deck */ \"(app-pages-browser)/./components/card-deck.tsx\");\n/* harmony import */ var _components_action_area__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/action-area */ \"(app-pages-browser)/./components/action-area.tsx\");\n/* harmony import */ var _components_action_modal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/action-modal */ \"(app-pages-browser)/./components/action-modal.tsx\");\n/* harmony import */ var _components_property_selection_modal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/property-selection-modal */ \"(app-pages-browser)/./components/property-selection-modal.tsx\");\n/* harmony import */ var _lib_game_logic__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/lib/game-logic */ \"(app-pages-browser)/./lib/game-logic.ts\");\n/* harmony import */ var _components_game_controls__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/components/game-controls */ \"(app-pages-browser)/./components/game-controls.tsx\");\n/* harmony import */ var _components_game_info__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/components/game-info */ \"(app-pages-browser)/./components/game-info.tsx\");\n/* harmony import */ var _components_discard_modal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/components/discard-modal */ \"(app-pages-browser)/./components/discard-modal.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\nfunction GameBoard() {\n    _s();\n    const [gameState, setGameState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [showDiscardModal, setShowDiscardModal] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [actionCardInProgress, setActionCardInProgress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [showPropertySelectionModal, setShowPropertySelectionModal] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [propertySelectionType, setPropertySelectionType] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [targetPlayerForPropertySelection, setTargetPlayerForPropertySelection] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Initialize game\n    const startGame = (numPlayers)=>{\n        const { initializedPlayers, initializedDeck } = (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.initializeGame)(numPlayers);\n        setGameState({\n            players: initializedPlayers,\n            deck: initializedDeck,\n            currentPlayerIndex: 0,\n            cardsPlayed: 0,\n            isGameOver: false,\n            winner: null,\n            actionInProgress: null,\n            hasDrawnCards: false,\n            actionCards: [],\n            message: \"Game started! Draw cards to begin your turn.\"\n        });\n        console.log(\"Initial deck:\", initializedDeck);\n        console.log(\"Property cards in deck:\", initializedDeck.filter((card)=>card.type === \"property\"));\n    };\n    console.log(\"Hello\");\n    // Handle drawing cards at the start of a turn\n    const handleDrawCards = ()=>{\n        if (!gameState || gameState.hasDrawnCards) return;\n        const { updatedPlayer, updatedDeck } = (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.drawCards)(gameState.players[gameState.currentPlayerIndex], gameState.deck);\n        const updatedPlayers = [\n            ...gameState.players\n        ];\n        updatedPlayers[gameState.currentPlayerIndex] = updatedPlayer;\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            deck: updatedDeck,\n            hasDrawnCards: true,\n            message: \"Cards drawn. Play up to 3 cards.\"\n        });\n    };\n    // Handle playing a card\n    const handlePlayCard = (cardIndex, targetArea, targetPlayer)=>{\n        if (!gameState || gameState.cardsPlayed >= 3 || !gameState.hasDrawnCards) return;\n        const player = gameState.players[gameState.currentPlayerIndex];\n        const card = player.hand[cardIndex];\n        // Validate card placement\n        if (!(0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.isValidCardPlacement)(card, targetArea)) {\n            alert(\"Invalid card placement. Check the rules for where this card can be played.\");\n            return;\n        }\n        const updatedPlayers = [\n            ...gameState.players\n        ];\n        const updatedPlayer = {\n            ...updatedPlayers[gameState.currentPlayerIndex]\n        };\n        // Remove card from hand\n        updatedPlayer.hand = [\n            ...updatedPlayer.hand\n        ];\n        updatedPlayer.hand.splice(cardIndex, 1);\n        // Add card to appropriate area\n        if (targetArea === \"bank\") {\n            updatedPlayer.bank = [\n                ...updatedPlayer.bank,\n                card\n            ];\n        } else if (targetArea.startsWith(\"property-\")) {\n            // Handle property placement logic\n            const setIndex = Number.parseInt(targetArea.split(\"-\")[1]);\n            // Check if this is an existing property set\n            if (setIndex < updatedPlayer.properties.length) {\n                // Add to existing property set\n                updatedPlayer.properties = [\n                    ...updatedPlayer.properties\n                ];\n                const updatedSet = {\n                    ...updatedPlayer.properties[setIndex],\n                    cards: [\n                        ...updatedPlayer.properties[setIndex].cards,\n                        card\n                    ]\n                };\n                // Check if set is now complete\n                updatedSet.isComplete = updatedSet.cards.length >= updatedSet.requiredCards;\n                updatedPlayer.properties[setIndex] = updatedSet;\n            } else {\n                // Create new property set (only for regular properties, not \"Any Colour\" wildcards)\n                const isAnyColorWildcard = card.type === \"wildcard\" && (card.name.toLowerCase().includes(\"any color\") || card.name.toLowerCase().includes(\"any colour\"));\n                if (!isAnyColorWildcard) {\n                    updatedPlayer.properties = [\n                        ...updatedPlayer.properties,\n                        {\n                            color: card.color || \"\",\n                            cards: [\n                                card\n                            ],\n                            isComplete: false,\n                            houses: 0,\n                            hotels: 0,\n                            requiredCards: (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.getRequiredCardsForColor)(card.color || \"\")\n                        }\n                    ];\n                } else {\n                    // Any Colour wildcards can't create their own sets\n                    alert(\"Any Colour wildcards must be added to an existing property set.\");\n                    return;\n                }\n            }\n        } else if (targetArea === \"action\") {\n            // This is now handled by handlePlayActionCard\n            return;\n        }\n        updatedPlayers[gameState.currentPlayerIndex] = updatedPlayer;\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            cardsPlayed: gameState.cardsPlayed + 1,\n            message: \"Card played (\".concat(gameState.cardsPlayed + 1, \"/3)\")\n        });\n    };\n    // Handle playing an action card\n    const handlePlayActionCard = (cardIndex)=>{\n        if (!gameState || gameState.cardsPlayed >= 3 || !gameState.hasDrawnCards) return;\n        const player = gameState.players[gameState.currentPlayerIndex];\n        const card = player.hand[cardIndex];\n        if (card.type !== \"action\") {\n            alert(\"This is not an action card.\");\n            return;\n        }\n        // Set the action card in progress\n        setActionCardInProgress({\n            card,\n            index: cardIndex\n        });\n    };\n    // Handle completing an action card\n    const handleActionCardComplete = (targetPlayerIndex, amount)=>{\n        if (!gameState || !actionCardInProgress) return;\n        const currentPlayerIndex = gameState.currentPlayerIndex;\n        const card = actionCardInProgress.card;\n        const cardIndex = actionCardInProgress.index;\n        const updatedPlayers = [\n            ...gameState.players\n        ];\n        const updatedPlayer = {\n            ...updatedPlayers[currentPlayerIndex]\n        };\n        // Remove card from hand\n        updatedPlayer.hand = [\n            ...updatedPlayer.hand\n        ];\n        updatedPlayer.hand.splice(cardIndex, 1);\n        // Add card to action area\n        const updatedActionCards = [\n            ...gameState.actionCards,\n            card\n        ];\n        // Process the action based on the card type\n        let message = \"Played \".concat(card.name);\n        switch(card.actionType){\n            case \"debt-collector\":\n                if (targetPlayerIndex !== undefined) {\n                    const targetPlayer = {\n                        ...updatedPlayers[targetPlayerIndex]\n                    };\n                    const amountToPay = Math.min(5, calculateBankTotal(targetPlayer.bank));\n                    if (amountToPay > 0) {\n                        // Find cards to pay with (simple implementation - just take the first cards that add up to the amount)\n                        const cardsToPay = [];\n                        let totalPaid = 0;\n                        // Sort bank cards by value (ascending) to optimize payment\n                        const sortedBank = [\n                            ...targetPlayer.bank\n                        ].sort((a, b)=>a.value - b.value);\n                        for (const bankCard of sortedBank){\n                            if (totalPaid < amountToPay) {\n                                cardsToPay.push(bankCard);\n                                totalPaid += bankCard.value;\n                                if (totalPaid >= amountToPay) {\n                                    break;\n                                }\n                            }\n                        }\n                        // Remove cards from target player's bank\n                        targetPlayer.bank = targetPlayer.bank.filter((card)=>!cardsToPay.some((payCard)=>payCard.id === card.id));\n                        // Add cards to current player's bank\n                        updatedPlayer.bank = [\n                            ...updatedPlayer.bank,\n                            ...cardsToPay\n                        ];\n                        updatedPlayers[targetPlayerIndex] = targetPlayer;\n                        message = \"Collected $\".concat(totalPaid, \"M from Player \").concat(targetPlayerIndex + 1);\n                    } else {\n                        message = \"Player \".concat(targetPlayerIndex + 1, \" has no money to pay\");\n                    }\n                }\n                break;\n            case \"birthday\":\n                let totalCollected = 0;\n                // Collect 2M from each player\n                updatedPlayers.forEach((player, index)=>{\n                    if (index !== currentPlayerIndex) {\n                        const playerToUpdate = {\n                            ...player\n                        };\n                        const amountToPay = Math.min(2, calculateBankTotal(playerToUpdate.bank));\n                        if (amountToPay > 0) {\n                            // Find cards to pay with\n                            const cardsToPay = [];\n                            let totalPaid = 0;\n                            // Sort bank cards by value (ascending) to optimize payment\n                            const sortedBank = [\n                                ...playerToUpdate.bank\n                            ].sort((a, b)=>a.value - b.value);\n                            for (const bankCard of sortedBank){\n                                if (totalPaid < amountToPay) {\n                                    cardsToPay.push(bankCard);\n                                    totalPaid += bankCard.value;\n                                    if (totalPaid >= amountToPay) {\n                                        break;\n                                    }\n                                }\n                            }\n                            // Remove cards from player's bank\n                            playerToUpdate.bank = playerToUpdate.bank.filter((card)=>!cardsToPay.some((payCard)=>payCard.id === card.id));\n                            // Add cards to current player's bank\n                            updatedPlayer.bank = [\n                                ...updatedPlayer.bank,\n                                ...cardsToPay\n                            ];\n                            updatedPlayers[index] = playerToUpdate;\n                            totalCollected += totalPaid;\n                        }\n                    }\n                });\n                message = \"Collected $\".concat(totalCollected, \"M for your birthday\");\n                break;\n            case \"pass-go\":\n                // Draw 2 more cards\n                const { updatedPlayer: playerWithExtraCards, updatedDeck } = (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.drawCards)(updatedPlayer, gameState.deck, 2);\n                updatedPlayer.hand = playerWithExtraCards.hand;\n                message = \"Drew 2 more cards\";\n                setGameState({\n                    ...gameState,\n                    players: updatedPlayers,\n                    deck: updatedDeck,\n                    cardsPlayed: gameState.cardsPlayed + 1,\n                    actionCards: updatedActionCards,\n                    message\n                });\n                break;\n            case \"rent\":\n                if (targetPlayerIndex !== undefined) {\n                    // Calculate rent based on properties of the specified colors\n                    const rentColors = [];\n                    if (card.color) rentColors.push(card.color);\n                    if (card.secondaryColor) rentColors.push(card.secondaryColor);\n                    // Find property sets of the specified colors\n                    const relevantSets = updatedPlayer.properties.filter((set)=>rentColors.includes(set.color));\n                    // Calculate rent amount\n                    let rentAmount = 0;\n                    relevantSets.forEach((set)=>{\n                        rentAmount += (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.calculateRentAmount)(set);\n                    });\n                    if (rentAmount > 0) {\n                        const targetPlayer = {\n                            ...updatedPlayers[targetPlayerIndex]\n                        };\n                        const amountToPay = Math.min(rentAmount, calculateBankTotal(targetPlayer.bank));\n                        if (amountToPay > 0) {\n                            // Find cards to pay with\n                            const cardsToPay = [];\n                            let totalPaid = 0;\n                            // Sort bank cards by value (ascending) to optimize payment\n                            const sortedBank = [\n                                ...targetPlayer.bank\n                            ].sort((a, b)=>a.value - b.value);\n                            for (const bankCard of sortedBank){\n                                if (totalPaid < amountToPay) {\n                                    cardsToPay.push(bankCard);\n                                    totalPaid += bankCard.value;\n                                    if (totalPaid >= amountToPay) {\n                                        break;\n                                    }\n                                }\n                            }\n                            // Remove cards from target player's bank\n                            targetPlayer.bank = targetPlayer.bank.filter((card)=>!cardsToPay.some((payCard)=>payCard.id === card.id));\n                            // Add cards to current player's bank\n                            updatedPlayer.bank = [\n                                ...updatedPlayer.bank,\n                                ...cardsToPay\n                            ];\n                            updatedPlayers[targetPlayerIndex] = targetPlayer;\n                            message = \"Collected $\".concat(totalPaid, \"M rent from Player \").concat(targetPlayerIndex + 1);\n                        } else {\n                            message = \"Player \".concat(targetPlayerIndex + 1, \" has no money to pay rent\");\n                        }\n                    } else {\n                        message = \"No properties of the specified colors to collect rent for\";\n                    }\n                }\n                break;\n            case \"deal-breaker\":\n                if (targetPlayerIndex !== undefined) {\n                    // Show property selection modal for complete sets\n                    setPropertySelectionType(\"deal-breaker\");\n                    setTargetPlayerForPropertySelection(targetPlayerIndex);\n                    setShowPropertySelectionModal(true);\n                    // The rest of the logic will be handled when the property is selected\n                    setActionCardInProgress(null);\n                    return;\n                }\n                break;\n            case \"sly-deal\":\n                if (targetPlayerIndex !== undefined) {\n                    // Show property selection modal for incomplete sets\n                    setPropertySelectionType(\"sly-deal\");\n                    setTargetPlayerForPropertySelection(targetPlayerIndex);\n                    setShowPropertySelectionModal(true);\n                    // The rest of the logic will be handled when the property is selected\n                    setActionCardInProgress(null);\n                    return;\n                }\n                break;\n            case \"forced-deal\":\n                if (targetPlayerIndex !== undefined) {\n                    // Show property selection modal for incomplete sets\n                    setPropertySelectionType(\"forced-deal\");\n                    setTargetPlayerForPropertySelection(targetPlayerIndex);\n                    setShowPropertySelectionModal(true);\n                    // The rest of the logic will be handled when the property is selected\n                    setActionCardInProgress(null);\n                    return;\n                }\n                break;\n        }\n        updatedPlayers[currentPlayerIndex] = updatedPlayer;\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            cardsPlayed: gameState.cardsPlayed + 1,\n            actionCards: updatedActionCards,\n            message\n        });\n        setActionCardInProgress(null);\n    };\n    // Handle property selection for action cards\n    const handlePropertySelection = (setIndex, cardIndex)=>{\n        if (!gameState || !targetPlayerForPropertySelection) return;\n        const currentPlayerIndex = gameState.currentPlayerIndex;\n        const targetPlayerIndex = targetPlayerForPropertySelection;\n        const updatedPlayers = [\n            ...gameState.players\n        ];\n        const currentPlayer = {\n            ...updatedPlayers[currentPlayerIndex]\n        };\n        const targetPlayer = {\n            ...updatedPlayers[targetPlayerIndex]\n        };\n        let message = \"\";\n        switch(propertySelectionType){\n            case \"deal-breaker\":\n                // Steal a complete property set\n                if (setIndex < targetPlayer.properties.length) {\n                    const stolenSet = {\n                        ...targetPlayer.properties[setIndex]\n                    };\n                    // Remove the set from target player\n                    targetPlayer.properties = targetPlayer.properties.filter((_, i)=>i !== setIndex);\n                    // Add the set to current player\n                    currentPlayer.properties = [\n                        ...currentPlayer.properties,\n                        stolenSet\n                    ];\n                    message = \"Stole \".concat(stolenSet.color, \" property set from Player \").concat(targetPlayerIndex + 1);\n                }\n                break;\n            case \"sly-deal\":\n                // Steal a single property card\n                if (setIndex < targetPlayer.properties.length && cardIndex < targetPlayer.properties[setIndex].cards.length) {\n                    const stolenCard = targetPlayer.properties[setIndex].cards[cardIndex];\n                    // Remove the card from target player's set\n                    const updatedTargetProperties = [\n                        ...targetPlayer.properties\n                    ];\n                    const updatedSet = {\n                        ...updatedTargetProperties[setIndex]\n                    };\n                    updatedSet.cards = updatedSet.cards.filter((_, i)=>i !== cardIndex);\n                    // If the set is now empty, remove it\n                    if (updatedSet.cards.length === 0) {\n                        updatedTargetProperties.splice(setIndex, 1);\n                    } else {\n                        // Update the set's completion status\n                        updatedSet.isComplete = updatedSet.cards.length >= updatedSet.requiredCards;\n                        updatedTargetProperties[setIndex] = updatedSet;\n                    }\n                    targetPlayer.properties = updatedTargetProperties;\n                    // Add the card to current player's properties\n                    const existingSetIndex = currentPlayer.properties.findIndex((set)=>set.color === stolenCard.color);\n                    if (existingSetIndex >= 0) {\n                        // Add to existing set\n                        const updatedCurrentProperties = [\n                            ...currentPlayer.properties\n                        ];\n                        const updatedCurrentSet = {\n                            ...updatedCurrentProperties[existingSetIndex]\n                        };\n                        updatedCurrentSet.cards = [\n                            ...updatedCurrentSet.cards,\n                            stolenCard\n                        ];\n                        updatedCurrentSet.isComplete = updatedCurrentSet.cards.length >= updatedCurrentSet.requiredCards;\n                        updatedCurrentProperties[existingSetIndex] = updatedCurrentSet;\n                        currentPlayer.properties = updatedCurrentProperties;\n                    } else {\n                        // Create new set\n                        currentPlayer.properties = [\n                            ...currentPlayer.properties,\n                            {\n                                color: stolenCard.color || \"\",\n                                cards: [\n                                    stolenCard\n                                ],\n                                isComplete: false,\n                                houses: 0,\n                                hotels: 0,\n                                requiredCards: (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.getRequiredCardsForColor)(stolenCard.color || \"\")\n                            }\n                        ];\n                    }\n                    message = \"Stole \".concat(stolenCard.name, \" from Player \").concat(targetPlayerIndex + 1);\n                }\n                break;\n            case \"forced-deal\":\n                // This requires selecting a property from the current player as well\n                // For simplicity, we'll just implement a basic version\n                if (setIndex < targetPlayer.properties.length && cardIndex < targetPlayer.properties[setIndex].cards.length) {\n                    const targetCard = targetPlayer.properties[setIndex].cards[cardIndex];\n                    // Find a property card from current player to swap\n                    let currentPlayerCard = null;\n                    let currentPlayerSetIndex = -1;\n                    let currentPlayerCardIndex = -1;\n                    // Find the first non-complete set and take the first card\n                    for(let i = 0; i < currentPlayer.properties.length; i++){\n                        const set = currentPlayer.properties[i];\n                        if (!set.isComplete && set.cards.length > 0) {\n                            currentPlayerCard = set.cards[0];\n                            currentPlayerSetIndex = i;\n                            currentPlayerCardIndex = 0;\n                            break;\n                        }\n                    }\n                    if (currentPlayerCard) {\n                        // Remove the card from target player's set\n                        const updatedTargetProperties = [\n                            ...targetPlayer.properties\n                        ];\n                        const updatedTargetSet = {\n                            ...updatedTargetProperties[setIndex]\n                        };\n                        updatedTargetSet.cards = updatedTargetSet.cards.filter((_, i)=>i !== cardIndex);\n                        // Add current player's card to target player's properties\n                        if (updatedTargetSet.cards.length === 0) {\n                            // If set is empty, replace it with a new set of the current player's card color\n                            updatedTargetProperties[setIndex] = {\n                                color: currentPlayerCard.color || \"\",\n                                cards: [\n                                    currentPlayerCard\n                                ],\n                                isComplete: false,\n                                houses: 0,\n                                hotels: 0,\n                                requiredCards: (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.getRequiredCardsForColor)(currentPlayerCard.color || \"\")\n                            };\n                        } else {\n                            // Otherwise, just add the card if it matches the color\n                            if (currentPlayerCard.color === updatedTargetSet.color) {\n                                updatedTargetSet.cards.push(currentPlayerCard);\n                                updatedTargetSet.isComplete = updatedTargetSet.cards.length >= updatedTargetSet.requiredCards;\n                                updatedTargetProperties[setIndex] = updatedTargetSet;\n                            } else {\n                                // If colors don't match, create a new set\n                                updatedTargetProperties.push({\n                                    color: currentPlayerCard.color || \"\",\n                                    cards: [\n                                        currentPlayerCard\n                                    ],\n                                    isComplete: false,\n                                    houses: 0,\n                                    hotels: 0,\n                                    requiredCards: (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.getRequiredCardsForColor)(currentPlayerCard.color || \"\")\n                                });\n                            }\n                        }\n                        targetPlayer.properties = updatedTargetProperties;\n                        // Remove the card from current player's set\n                        const updatedCurrentProperties = [\n                            ...currentPlayer.properties\n                        ];\n                        const updatedCurrentSet = {\n                            ...updatedCurrentProperties[currentPlayerSetIndex]\n                        };\n                        updatedCurrentSet.cards = updatedCurrentSet.cards.filter((_, i)=>i !== currentPlayerCardIndex);\n                        // If the set is now empty, remove it\n                        if (updatedCurrentSet.cards.length === 0) {\n                            updatedCurrentProperties.splice(currentPlayerSetIndex, 1);\n                        } else {\n                            // Update the set's completion status\n                            updatedCurrentSet.isComplete = updatedCurrentSet.cards.length >= updatedCurrentSet.requiredCards;\n                            updatedCurrentProperties[currentPlayerSetIndex] = updatedCurrentSet;\n                        }\n                        // Add the target card to current player's properties\n                        const existingSetIndex = updatedCurrentProperties.findIndex((set)=>set.color === targetCard.color);\n                        if (existingSetIndex >= 0) {\n                            // Add to existing set\n                            const updatedExistingSet = {\n                                ...updatedCurrentProperties[existingSetIndex]\n                            };\n                            updatedExistingSet.cards = [\n                                ...updatedExistingSet.cards,\n                                targetCard\n                            ];\n                            updatedExistingSet.isComplete = updatedExistingSet.cards.length >= updatedExistingSet.requiredCards;\n                            updatedCurrentProperties[existingSetIndex] = updatedExistingSet;\n                        } else {\n                            // Create new set\n                            updatedCurrentProperties.push({\n                                color: targetCard.color || \"\",\n                                cards: [\n                                    targetCard\n                                ],\n                                isComplete: false,\n                                houses: 0,\n                                hotels: 0,\n                                requiredCards: (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.getRequiredCardsForColor)(targetCard.color || \"\")\n                            });\n                        }\n                        currentPlayer.properties = updatedCurrentProperties;\n                        message = \"Swapped \".concat(currentPlayerCard.name, \" for \").concat(targetCard.name, \" with Player \").concat(targetPlayerIndex + 1);\n                    } else {\n                        message = \"No property available to swap\";\n                    }\n                }\n                break;\n        }\n        // Update players\n        updatedPlayers[currentPlayerIndex] = currentPlayer;\n        updatedPlayers[targetPlayerIndex] = targetPlayer;\n        // Add the action card to the action area\n        const updatedActionCards = [\n            ...gameState.actionCards\n        ];\n        if (actionCardInProgress) {\n            updatedActionCards.push(actionCardInProgress.card);\n            // Remove the card from the player's hand\n            const updatedHand = [\n                ...currentPlayer.hand\n            ];\n            updatedHand.splice(actionCardInProgress.index, 1);\n            currentPlayer.hand = updatedHand;\n            updatedPlayers[currentPlayerIndex] = currentPlayer;\n        }\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            cardsPlayed: gameState.cardsPlayed + 1,\n            actionCards: updatedActionCards,\n            message\n        });\n        setShowPropertySelectionModal(false);\n        setTargetPlayerForPropertySelection(null);\n        setPropertySelectionType(\"\");\n    };\n    // Handle ending a turn\n    const handleEndTurn = ()=>{\n        if (!gameState) return;\n        // Check if player has more than 7 cards\n        if (gameState.players[gameState.currentPlayerIndex].hand.length > 7) {\n            setShowDiscardModal(true);\n            return;\n        }\n        completeEndTurn();\n    };\n    // Complete the end turn process after discarding if necessary\n    const completeEndTurn = ()=>{\n        if (!gameState) return;\n        const { nextPlayerIndex, updatedPlayers } = (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.endTurn)(gameState.players, gameState.currentPlayerIndex);\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            currentPlayerIndex: nextPlayerIndex,\n            cardsPlayed: 0,\n            hasDrawnCards: false,\n            message: \"Player \".concat(nextPlayerIndex + 1, \"'s turn. Draw cards to begin.\")\n        });\n    };\n    // Handle discarding cards\n    const handleDiscard = (cardIndices)=>{\n        if (!gameState) return;\n        const { updatedPlayer, updatedDeck } = (0,_lib_game_logic__WEBPACK_IMPORTED_MODULE_7__.discardCards)(gameState.players[gameState.currentPlayerIndex], cardIndices, gameState.deck);\n        const updatedPlayers = [\n            ...gameState.players\n        ];\n        updatedPlayers[gameState.currentPlayerIndex] = updatedPlayer;\n        setGameState({\n            ...gameState,\n            players: updatedPlayers,\n            deck: updatedDeck,\n            message: \"Discarded \".concat(cardIndices.length, \" cards\")\n        });\n        setShowDiscardModal(false);\n        completeEndTurn();\n    };\n    // Calculate total money in bank\n    const calculateBankTotal = (bank)=>{\n        return bank.reduce((total, card)=>total + card.value, 0);\n    };\n    // Check for winner\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"GameBoard.useEffect\": ()=>{\n            if (!gameState) return;\n            const checkWinner = {\n                \"GameBoard.useEffect.checkWinner\": ()=>{\n                    for (const player of gameState.players){\n                        // Check if player has 3 complete property sets\n                        const completeSets = player.properties.filter({\n                            \"GameBoard.useEffect.checkWinner\": (set)=>set.isComplete\n                        }[\"GameBoard.useEffect.checkWinner\"]).length;\n                        if (completeSets >= 3) {\n                            setGameState({\n                                ...gameState,\n                                isGameOver: true,\n                                winner: player,\n                                message: \"Player \".concat(player.id + 1, \" wins with 3 complete property sets!\")\n                            });\n                            return;\n                        }\n                    }\n                }\n            }[\"GameBoard.useEffect.checkWinner\"];\n            checkWinner();\n        }\n    }[\"GameBoard.useEffect\"], [\n        gameState\n    ]);\n    if (!gameState) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex flex-col items-center justify-center p-6 bg-white rounded-lg shadow-lg\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                    className: \"text-2xl font-bold mb-4\",\n                    children: \"Start New Game\"\n                }, void 0, false, {\n                    fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                    lineNumber: 808,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex gap-4\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>startGame(2),\n                            className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n                            children: \"2 Players\"\n                        }, void 0, false, {\n                            fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                            lineNumber: 810,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>startGame(3),\n                            className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n                            children: \"3 Players\"\n                        }, void 0, false, {\n                            fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                            lineNumber: 816,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>startGame(4),\n                            className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n                            children: \"4 Players\"\n                        }, void 0, false, {\n                            fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                            lineNumber: 822,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                    lineNumber: 809,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n            lineNumber: 807,\n            columnNumber: 7\n        }, this);\n    }\n    if (gameState.isGameOver && gameState.winner) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex flex-col items-center justify-center p-6 bg-white rounded-lg shadow-lg\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                    className: \"text-2xl font-bold mb-4\",\n                    children: \"Game Over!\"\n                }, void 0, false, {\n                    fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                    lineNumber: 836,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"text-xl mb-4\",\n                    children: [\n                        \"Player \",\n                        gameState.winner.id + 1,\n                        \" wins!\"\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                    lineNumber: 837,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    onClick: ()=>startGame(gameState.players.length),\n                    className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n                    children: \"New Game\"\n                }, void 0, false, {\n                    fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                    lineNumber: 838,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n            lineNumber: 835,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full max-w-7xl\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_game_info__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                currentPlayer: gameState.currentPlayerIndex + 1,\n                cardsPlayed: gameState.cardsPlayed,\n                hasDrawnCards: gameState.hasDrawnCards\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 850,\n                columnNumber: 7\n            }, this),\n            gameState.message && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"bg-blue-100 p-3 rounded-lg mb-4 text-center\",\n                children: gameState.message\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 857,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex justify-center items-center gap-6 mb-6\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_card_deck__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                        cardsRemaining: gameState.deck.length,\n                        onDrawCards: handleDrawCards,\n                        hasDrawnCards: gameState.hasDrawnCards\n                    }, void 0, false, {\n                        fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                        lineNumber: 863,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_action_area__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                        actionCards: gameState.actionCards,\n                        isCurrentPlayersTurn: true\n                    }, void 0, false, {\n                        fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                        lineNumber: 869,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 862,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"grid grid-cols-1 md:grid-cols-2 gap-6 mb-20\",\n                children: gameState.players.map((player, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_player_area__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                        player: player,\n                        isCurrentPlayer: index === gameState.currentPlayerIndex,\n                        onPlayCard: handlePlayCard,\n                        onPlayActionCard: handlePlayActionCard,\n                        gameState: gameState,\n                        bankTotal: calculateBankTotal(player.bank)\n                    }, player.id, false, {\n                        fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                        lineNumber: 877,\n                        columnNumber: 11\n                    }, this))\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 875,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_game_controls__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                cardsPlayed: gameState.cardsPlayed,\n                onEndTurn: handleEndTurn,\n                isCurrentPlayersTurn: true,\n                hasDrawnCards: gameState.hasDrawnCards\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 889,\n                columnNumber: 7\n            }, this),\n            showDiscardModal && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_discard_modal__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                player: gameState.players[gameState.currentPlayerIndex],\n                onDiscard: handleDiscard\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 897,\n                columnNumber: 9\n            }, this),\n            actionCardInProgress && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_action_modal__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                card: actionCardInProgress.card,\n                players: gameState.players,\n                currentPlayerIndex: gameState.currentPlayerIndex,\n                onComplete: handleActionCardComplete,\n                onCancel: ()=>setActionCardInProgress(null)\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 904,\n                columnNumber: 9\n            }, this),\n            showPropertySelectionModal && targetPlayerForPropertySelection !== null && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_property_selection_modal__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                title: propertySelectionType === \"deal-breaker\" ? \"Select a complete property set to steal\" : propertySelectionType === \"sly-deal\" ? \"Select a property card to steal\" : \"Select a property card to swap\",\n                propertySets: gameState.players[targetPlayerForPropertySelection].properties,\n                onSelect: handlePropertySelection,\n                onCancel: ()=>{\n                    setShowPropertySelectionModal(false);\n                    setTargetPlayerForPropertySelection(null);\n                    setPropertySelectionType(\"\");\n                    setActionCardInProgress(null);\n                },\n                allowCompleteSet: propertySelectionType === \"deal-breaker\"\n            }, void 0, false, {\n                fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n                lineNumber: 915,\n                columnNumber: 11\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/kitjones/Desktop/monopoly-deal/components/game-board.tsx\",\n        lineNumber: 849,\n        columnNumber: 5\n    }, this);\n}\n_s(GameBoard, \"GCRLVa0V9aMgsunOzlpLWJkMsec=\");\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/game-board.tsx\n"));

/***/ })

});