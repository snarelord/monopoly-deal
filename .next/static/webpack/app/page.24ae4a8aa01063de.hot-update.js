"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/game-logic.ts":
/*!***************************!*\
  !*** ./lib/game-logic.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateRentAmount: () => (/* binding */ calculateRentAmount),\n/* harmony export */   discardCards: () => (/* binding */ discardCards),\n/* harmony export */   drawCards: () => (/* binding */ drawCards),\n/* harmony export */   endTurn: () => (/* binding */ endTurn),\n/* harmony export */   getRequiredCardsForColor: () => (/* binding */ getRequiredCardsForColor),\n/* harmony export */   initializeGame: () => (/* binding */ initializeGame),\n/* harmony export */   isPropertySetComplete: () => (/* binding */ isPropertySetComplete),\n/* harmony export */   isValidCardPlacement: () => (/* binding */ isValidCardPlacement),\n/* harmony export */   playCard: () => (/* binding */ playCard)\n/* harmony export */ });\n/* harmony import */ var _lib_card_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/card-data */ \"(app-pages-browser)/./lib/card-data.ts\");\n\n// Initialise the game with players and a shuffled deck\nfunction initializeGame(numPlayers) {\n    const deck = createDeck();\n    const shuffledDeck = shuffleDeck([\n        ...deck\n    ]);\n    const players = [];\n    for(let i = 0; i < numPlayers; i++){\n        // Deal 5 cards to each player\n        const hand = [];\n        for(let j = 0; j < 5; j++){\n            if (shuffledDeck.length > 0) {\n                hand.push(shuffledDeck.pop());\n            }\n        }\n        players.push({\n            id: i,\n            hand,\n            bank: [],\n            properties: []\n        });\n    }\n    return {\n        initializedPlayers: players,\n        initializedDeck: shuffledDeck\n    };\n}\n// Create the deck with all cards\nfunction createDeck() {\n    return _lib_card_data__WEBPACK_IMPORTED_MODULE_0__.cardData;\n}\n// Shuffle the deck using Fisher-Yates algorithm\nfunction shuffleDeck(deck) {\n    for(let i = deck.length - 1; i > 0; i--){\n        const j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [\n            deck[j],\n            deck[i]\n        ];\n    }\n    return deck;\n}\n// Update the drawCards function to only draw 2 cards (or 5 if hand is empty)\nfunction drawCards(player, deck) {\n    let numCards = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2;\n    const updatedPlayer = {\n        ...player\n    };\n    const updatedDeck = [\n        ...deck\n    ];\n    // If player has no cards, draw 5 instead of 2\n    const cardsToDraw = player.hand.length === 0 ? 5 : numCards;\n    for(let i = 0; i < cardsToDraw; i++){\n        if (updatedDeck.length > 0) {\n            updatedPlayer.hand.push(updatedDeck.pop());\n        }\n    }\n    return {\n        updatedPlayer,\n        updatedDeck\n    };\n}\n// Update the endTurn function to handle discarding excess cards\nfunction endTurn(players, currentPlayerIndex) {\n    const updatedPlayers = [\n        ...players\n    ];\n    const currentPlayer = {\n        ...updatedPlayers[currentPlayerIndex]\n    };\n    // don't automatically discard here the player must choose which cards to discard\n    // this is handled in the UI with a discard modal\n    // Move to the next player\n    const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n    return {\n        nextPlayerIndex,\n        updatedPlayers\n    };\n}\n// Check if a property set is complete\nfunction isPropertySetComplete(propertySet) {\n    return propertySet.cards.length >= propertySet.requiredCards;\n}\n// Update the calculateRentAmount function to use the rent values from the card data\nfunction calculateRentAmount(propertySet) {\n    const propertyCount = propertySet.cards.length;\n    // If the set is empty, return 0\n    if (propertyCount === 0) return 0;\n    let rentAmount = 0;\n    // Check for color wildcards (which add to the property count)\n    const colorWildcard = propertySet.cards.find((card)=>card.type === \"wildcard\" && !card.secondaryColor);\n    // If a color wildcard is present, it increases the number of properties\n    const adjustedPropertyCount = colorWildcard ? propertyCount + 1 : propertyCount;\n    // Find a property card with rent information or wildcard to check\n    const propertyWithRent = propertySet.cards.find((card)=>card.rent);\n    if (propertyWithRent && propertyWithRent.rent) {\n        if (propertyWithRent.type === \"wildcard\") {\n            // For two-way wildcards, check the selected color\n            const selectedColor = propertySet.selectedColor; // assuming this is part of the set info\n            const selectedRent = propertyWithRent.rent[selectedColor];\n            if (selectedRent) {\n                rentAmount = selectedRent[adjustedPropertyCount] || selectedRent[Object.keys(selectedRent).sort((a, b)=>+a - +b).reverse()[0]];\n            }\n        } else {\n            // For regular properties, use the standard rent logic\n            const rentKeys = Object.keys(propertyWithRent.rent).map(Number).sort((a, b)=>a - b);\n            let rentKey = adjustedPropertyCount;\n            // If the exact rent key doesn't exist, find the closest lower value\n            if (!propertyWithRent.rent[rentKey]) {\n                for(let i = rentKeys.length - 1; i >= 0; i--){\n                    if (rentKeys[i] <= adjustedPropertyCount) {\n                        rentKey = rentKeys[i];\n                        break;\n                    }\n                }\n            }\n            rentAmount = propertyWithRent.rent[rentKey] || 1; // Default to 1 if no rent found\n        }\n    }\n    // If the set is complete (owns all properties of the same color), double the rent\n    if (propertySet.isComplete) {\n        rentAmount *= 2;\n    }\n    // Add extra for houses and hotels\n    rentAmount += propertySet.houses * 3;\n    rentAmount += propertySet.hotels * 5;\n    return rentAmount;\n}\n// Play a card from hand to a specific area\nfunction playCard(gameState, playerIndex, cardIndex, targetArea, targetPlayerIndex) {\n    const updatedGameState = {\n        ...gameState\n    };\n    const player = updatedGameState.players[playerIndex];\n    const card = player.hand[cardIndex];\n    // Remove card from hand\n    player.hand.splice(cardIndex, 1);\n    // Handle different target areas\n    if (targetArea === \"bank\") {\n        // Add card to bank\n        player.bank.push(card);\n    } else if (targetArea.startsWith(\"property-\")) {\n        const setIndex = Number.parseInt(targetArea.split(\"-\")[1]);\n        // Check if this is an existing property set\n        if (setIndex < player.properties.length) {\n            // Add to existing property set\n            const updatedSet = player.properties[setIndex];\n            updatedSet.cards.push(card);\n            // Check if set is now complete\n            updatedSet.isComplete = updatedSet.cards.length >= updatedSet.requiredCards;\n        } else {\n            // Create new property set (only for regular properties, not \"Any Color\" wildcards)\n            const isAnyColorWildcard = card.type === \"wildcard\" && (card.name.toLowerCase().includes(\"any color\") || card.name.toLowerCase().includes(\"any colour\"));\n            if (!isAnyColorWildcard) {\n                player.properties.push({\n                    color: card.color || \"\",\n                    cards: [\n                        card\n                    ],\n                    isComplete: false,\n                    houses: 0,\n                    hotels: 0,\n                    requiredCards: getRequiredCardsForColor(card.color || \"\")\n                });\n            } else {\n                // Any Color wildcards can't create their own sets\n                return updatedGameState;\n            }\n        }\n    } else if (targetArea === \"action\") {\n        // Add to action area\n        updatedGameState.actionCards.push(card);\n    }\n    // Increment cards played\n    updatedGameState.cardsPlayed += 1;\n    return updatedGameState;\n}\n// Get the number of cards required for a complete set of a specific colour\nfunction getRequiredCardsForColor(color) {\n    switch(color){\n        case \"brown\":\n        case \"dark blue\":\n        case \"mint\":\n            return 2;\n        case \"light blue\":\n        case \"pink\":\n        case \"orange\":\n        case \"red\":\n        case \"yellow\":\n        case \"green\":\n            return 3;\n        case \"black\":\n            return 4;\n        default:\n            return 1;\n    }\n}\n// validate card placement\nfunction isValidCardPlacement(card, targetArea) {\n    if (targetArea === \"bank\") {\n        if (card.type === \"wildcard\" && card.value === 0) {\n            return false;\n        }\n        if (card.type === \"property\" || card.type === \"wildcard\") {\n            return false; // cannot add these cards to the bank\n        }\n        return true;\n    } else if (targetArea.startsWith(\"property-\")) {\n        // only property cards and wildcards can go in property sets\n        if (card.type === \"property\" || card.type === \"wildcard\") {\n            // special case for any color wildcards\n            const isAnyColorWildcard = card.type === \"wildcard\" && (card.name.toLowerCase().includes(\"any color\") || card.name.toLowerCase().includes(\"any colour\"));\n            if (isAnyColorWildcard) {\n                // any color wildcards can only be added to existing property sets, they cannot create their own set\n                const setIndex = Number.parseInt(targetArea.split(\"-\")[1]);\n                return !targetArea.endsWith(\"-\".concat(setIndex)) || setIndex < Number.POSITIVE_INFINITY; // always true for existing sets\n            }\n            return true;\n        }\n        return false;\n    } else if (targetArea === \"action\") {\n        // only action cards can be played as actions\n        return card.type === \"action\";\n    }\n    return false;\n}\n// function to discard cards\nfunction discardCards(player, cardIndices, deck) {\n    const updatedPlayer = {\n        ...player\n    };\n    const updatedDeck = [\n        ...deck\n    ];\n    // sort indices in descending order to prevent issues when removing\n    const sortedIndices = [\n        ...cardIndices\n    ].sort((a, b)=>b - a);\n    // remove cards from hand and add to bottom of the deck\n    for (const index of sortedIndices){\n        if (index >= 0 && index < updatedPlayer.hand.length) {\n            const card = updatedPlayer.hand.splice(index, 1)[0];\n            updatedDeck.unshift(card); // add to bottom of deck\n        }\n    }\n    return {\n        updatedPlayer,\n        updatedDeck\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/game-logic.ts\n"));

/***/ })

});